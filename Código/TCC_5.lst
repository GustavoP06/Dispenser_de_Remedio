;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 07/06/2021 00:30:18
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF007EFDA  	GOTO        4020
_interrupt:
;TCC_5.c,123 :: 		void interrupt()                          //interrupção
0x0008	0xF017C000  	MOVFF       R0, 23
0x000C	0xF016C00C  	MOVFF       R12, 22
0x0010	0xF015C00D  	MOVFF       R13, 21
;TCC_5.c,125 :: 		if(TMR1IF_bit)                       //overflow em 100ms
0x0014	0xA09E      	BTFSS       TMR1IF_bit, BitPos(TMR1IF_bit+0) 
0x0016	0xD012      	BRA         L_interrupt0
;TCC_5.c,127 :: 		TMR1IF_bit  =  0x00;                //zera flag do timer1
0x0018	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;TCC_5.c,128 :: 		TMR1H       =  0x3C;
0x001A	0x0E3C      	MOVLW       60
0x001C	0x6ECF      	MOVWF       TMR1H 
;TCC_5.c,129 :: 		TMR1L       =  0xB0;                //seta timer1 em 15536
0x001E	0x0EB0      	MOVLW       176
0x0020	0x6ECE      	MOVWF       TMR1L 
;TCC_5.c,130 :: 		temp_led++;                         //incrementa temp_led
0x0022	0x0100      	MOVLB       0
0x0024	0x4BC4      	INFSNZ      _temp_led, 1, 1
0x0026	0x2BC5      	INCF        _temp_led+1, 1, 1
;TCC_5.c,131 :: 		temp_led2++;                        //incrementa temp_led2
0x0028	0x4BC8      	INFSNZ      _temp_led2, 1, 1
0x002A	0x2BC9      	INCF        _temp_led2+1, 1, 1
;TCC_5.c,132 :: 		temp_led3++;                        //incrementa temp_led3
0x002C	0x4BCA      	INFSNZ      _temp_led3, 1, 1
0x002E	0x2BCB      	INCF        _temp_led3+1, 1, 1
;TCC_5.c,133 :: 		temp_led4++;                        //incrementa temp_led4
0x0030	0x4BCC      	INFSNZ      _temp_led4, 1, 1
0x0032	0x2BCD      	INCF        _temp_led4+1, 1, 1
;TCC_5.c,134 :: 		temp_disp++;                        //incrementa temp_disp
0x0034	0x4A18      	INFSNZ      _temp_disp, 1 
0x0036	0x2A19      	INCF        _temp_disp+1, 1 
;TCC_5.c,135 :: 		temp_som++;                         //incrementa temp_som
0x0038	0x4BC0      	INFSNZ      _temp_som, 1, 1
0x003A	0x2BC1      	INCF        _temp_som+1, 1, 1
;TCC_5.c,136 :: 		}
L_interrupt0:
;TCC_5.c,138 :: 		if(TMR0IF_bit)                        //overflow em 100ms overflow
0x003C	0xA4F2      	BTFSS       TMR0IF_bit, BitPos(TMR0IF_bit+0) 
0x003E	0xD00C      	BRA         L_interrupt1
;TCC_5.c,140 :: 		TMR0IF_bit =  0x00;                  //zera flag do timer0
0x0040	0x0100      	MOVLB       0
0x0042	0x94F2      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0) 
;TCC_5.c,141 :: 		TMR0H      =  0x3C;
0x0044	0x0E3C      	MOVLW       60
0x0046	0x6ED7      	MOVWF       TMR0H 
;TCC_5.c,142 :: 		TMR0L      =  0xB0;                  //seta timer0 em 15536
0x0048	0x0EB0      	MOVLW       176
0x004A	0x6ED6      	MOVWF       TMR0L 
;TCC_5.c,143 :: 		temp++;                              //incrementa temp
0x004C	0x4BDE      	INFSNZ      _temp, 1, 1
0x004E	0x2BDF      	INCF        _temp+1, 1, 1
;TCC_5.c,144 :: 		temp2++;                             //incrementa temp2
0x0050	0x4BD8      	INFSNZ      _temp2, 1, 1
0x0052	0x2BD9      	INCF        _temp2+1, 1, 1
;TCC_5.c,145 :: 		temp3++;                             //incrementa temp3
0x0054	0x4A56      	INFSNZ      _temp3, 1 
0x0056	0x2A57      	INCF        _temp3+1, 1 
;TCC_5.c,147 :: 		}                                     //end if TMR0IF
L_interrupt1:
;TCC_5.c,151 :: 		piscaLED();                           //executa piscaLED
0x0058	0xF007EC66  	CALL        _piscaLED, 0
;TCC_5.c,152 :: 		timebase();                           //executa timebase
0x005C	0xF007EC3D  	CALL        _timebase, 0
;TCC_5.c,153 :: 		timebase2();                          //executa timebase2
0x0060	0xF006ECEB  	CALL        _timebase2, 0
;TCC_5.c,154 :: 		timebase3();
0x0064	0xF007EC14  	CALL        _timebase3, 0
;TCC_5.c,157 :: 		}                                          //end interrupt()
L_end_interrupt:
L__interrupt250:
0x0068	0xF000C017  	MOVFF       23, R0
0x006C	0xF00CC016  	MOVFF       22, R12
0x0070	0xF00DC015  	MOVFF       21, R13
0x0074	0x0011      	RETFIE      1
; end of _interrupt
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x0076	0x0000      	NOP
0x0078	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x007A	0x0012      	RETURN      0
; end of _Delay_1us
_Delay_5500us:
;__Lib_Delays.c,31 :: 		void Delay_5500us() {
;__Lib_Delays.c,32 :: 		Delay_us(5500);
0x007C	0x0E0F      	MOVLW       15
0x007E	0x6E0C      	MOVWF       R12, 0
0x0080	0x0E47      	MOVLW       71
0x0082	0x6E0D      	MOVWF       R13, 0
L_Delay_5500us5:
0x0084	0x2E0D      	DECFSZ      R13, 1, 0
0x0086	0xD7FE      	BRA         L_Delay_5500us5
0x0088	0x2E0C      	DECFSZ      R12, 1, 0
0x008A	0xD7FC      	BRA         L_Delay_5500us5
0x008C	0x0000      	NOP
0x008E	0x0000      	NOP
;__Lib_Delays.c,33 :: 		}
L_end_Delay_5500us:
0x0090	0x0012      	RETURN      0
; end of _Delay_5500us
_Delay_50us:
;__Lib_Delays.c,19 :: 		void Delay_50us() {
;__Lib_Delays.c,20 :: 		Delay_us(50);
0x0092	0x0E21      	MOVLW       33
0x0094	0x6E0D      	MOVWF       R13, 0
L_Delay_50us2:
0x0096	0x2E0D      	DECFSZ      R13, 1, 0
0x0098	0xD7FE      	BRA         L_Delay_50us2
;__Lib_Delays.c,21 :: 		}
L_end_Delay_50us:
0x009A	0x0012      	RETURN      0
; end of _Delay_50us
_Lcd_Cmd:
;__Lib_Lcd.c,18 :: 		
;__Lib_Lcd.c,20 :: 		
0x009C	0x0100      	MOVLB       0
0x009E	0xBFF3      	BTFSC       FARG_Lcd_Cmd_out_char, 7, 1
0x00A0	0xD002      	BRA         L__Lcd_Cmd21
0x00A2	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x00A4	0xD001      	BRA         L__Lcd_Cmd22
L__Lcd_Cmd21:
0x00A6	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd22:
;__Lib_Lcd.c,21 :: 		
0x00A8	0xBDF3      	BTFSC       FARG_Lcd_Cmd_out_char, 6, 1
0x00AA	0xD002      	BRA         L__Lcd_Cmd23
0x00AC	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x00AE	0xD001      	BRA         L__Lcd_Cmd24
L__Lcd_Cmd23:
0x00B0	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd24:
;__Lib_Lcd.c,22 :: 		
0x00B2	0xBBF3      	BTFSC       FARG_Lcd_Cmd_out_char, 5, 1
0x00B4	0xD002      	BRA         L__Lcd_Cmd25
0x00B6	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x00B8	0xD001      	BRA         L__Lcd_Cmd26
L__Lcd_Cmd25:
0x00BA	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd26:
;__Lib_Lcd.c,23 :: 		
0x00BC	0xB9F3      	BTFSC       FARG_Lcd_Cmd_out_char, 4, 1
0x00BE	0xD002      	BRA         L__Lcd_Cmd27
0x00C0	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x00C2	0xD001      	BRA         L__Lcd_Cmd28
L__Lcd_Cmd27:
0x00C4	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd28:
;__Lib_Lcd.c,25 :: 		
0x00C6	0xBDE1      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x00C8	0xD002      	BRA         L__Lcd_Cmd29
0x00CA	0x8483      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x00CC	0xD001      	BRA         L__Lcd_Cmd30
L__Lcd_Cmd29:
0x00CE	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd30:
;__Lib_Lcd.c,28 :: 		
0x00D0	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,29 :: 		
0x00D2	0xDFD1      	RCALL       _Delay_1us
;__Lib_Lcd.c,30 :: 		
0x00D4	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,33 :: 		
0x00D6	0xB7F3      	BTFSC       FARG_Lcd_Cmd_out_char, 3, 1
0x00D8	0xD002      	BRA         L__Lcd_Cmd31
0x00DA	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x00DC	0xD001      	BRA         L__Lcd_Cmd32
L__Lcd_Cmd31:
0x00DE	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd32:
;__Lib_Lcd.c,34 :: 		
0x00E0	0xB5F3      	BTFSC       FARG_Lcd_Cmd_out_char, 2, 1
0x00E2	0xD002      	BRA         L__Lcd_Cmd33
0x00E4	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x00E6	0xD001      	BRA         L__Lcd_Cmd34
L__Lcd_Cmd33:
0x00E8	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd34:
;__Lib_Lcd.c,35 :: 		
0x00EA	0xB3F3      	BTFSC       FARG_Lcd_Cmd_out_char, 1, 1
0x00EC	0xD002      	BRA         L__Lcd_Cmd35
0x00EE	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x00F0	0xD001      	BRA         L__Lcd_Cmd36
L__Lcd_Cmd35:
0x00F2	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd36:
;__Lib_Lcd.c,36 :: 		
0x00F4	0xB1F3      	BTFSC       FARG_Lcd_Cmd_out_char, 0, 1
0x00F6	0xD002      	BRA         L__Lcd_Cmd37
0x00F8	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x00FA	0xD001      	BRA         L__Lcd_Cmd38
L__Lcd_Cmd37:
0x00FC	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd38:
;__Lib_Lcd.c,38 :: 		
0x00FE	0xBDE1      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x0100	0xD002      	BRA         L__Lcd_Cmd39
0x0102	0x8483      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x0104	0xD001      	BRA         L__Lcd_Cmd40
L__Lcd_Cmd39:
0x0106	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd40:
;__Lib_Lcd.c,40 :: 		
0x0108	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,41 :: 		
0x010A	0xDFB5      	RCALL       _Delay_1us
;__Lib_Lcd.c,42 :: 		
0x010C	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,44 :: 		
0x010E	0xADE1      	BTFSS       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x0110	0xD002      	BRA         L_Lcd_Cmd0
;__Lib_Lcd.c,45 :: 		
0x0112	0xDFB4      	RCALL       _Delay_5500us
0x0114	0xD001      	BRA         L_Lcd_Cmd1
L_Lcd_Cmd0:
;__Lib_Lcd.c,47 :: 		
0x0116	0xDFBD      	RCALL       _Delay_50us
L_Lcd_Cmd1:
;__Lib_Lcd.c,48 :: 		
L_end_Lcd_Cmd:
0x0118	0x0012      	RETURN      0
; end of _Lcd_Cmd
_Lcd_Chr_CP:
;__Lib_Lcd.c,50 :: 		
;__Lib_Lcd.c,52 :: 		
0x011A	0x0100      	MOVLB       0
0x011C	0x9DE1      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,53 :: 		
0x011E	0xF0F3C0F2  	MOVFF       FARG_Lcd_Chr_CP_out_char, FARG_Lcd_Cmd_out_char
0x0122	0xDFBC      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,54 :: 		
0x0124	0x8DE1      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,55 :: 		
L_end_Lcd_Chr_CP:
0x0126	0x0012      	RETURN      0
; end of _Lcd_Chr_CP
_fecha_mot3:
;TCC_5.c,1005 :: 		void fecha_mot3()
;TCC_5.c,1007 :: 		open_bit3  = 0x00;                               //limpa o bit de abertura
0x0128	0x0100      	MOVLB       0
0x012A	0x95E0      	BCF         _open_bit3, BitPos(_open_bit3+0), 1
;TCC_5.c,1008 :: 		close_bit3 = 0x01;                               //seta o bit de fechamento
0x012C	0x89E1      	BSF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,1009 :: 		x_mot3     = 0x00;                               //zera x_mot3
0x012E	0x6BD4      	CLRF        _x_mot3, 1
0x0130	0x6BD5      	CLRF        _x_mot3+1, 1
;TCC_5.c,1011 :: 		}                                                 //end fecha_mot3()
L_end_fecha_mot3:
0x0132	0x0012      	RETURN      0
; end of _fecha_mot3
_fecha_mot2:
;TCC_5.c,992 :: 		void fecha_mot2()
;TCC_5.c,994 :: 		open_bit2  = 0x00;                               //limpa o bit de abertura
0x0134	0x0100      	MOVLB       0
0x0136	0x93E0      	BCF         _open_bit2, BitPos(_open_bit2+0), 1
;TCC_5.c,995 :: 		close_bit2 = 0x01;                               //seta o bit de fechamento
0x0138	0x87E1      	BSF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,996 :: 		x_mot2     = 0x00;                               //zera x_mot2
0x013A	0x6BC6      	CLRF        _x_mot2, 1
0x013C	0x6BC7      	CLRF        _x_mot2+1, 1
;TCC_5.c,998 :: 		}                                                 //end fecha_mot2()
L_end_fecha_mot2:
0x013E	0x0012      	RETURN      0
; end of _fecha_mot2
_fecha_mot:
;TCC_5.c,979 :: 		void fecha_mot()
;TCC_5.c,981 :: 		open_bit  = 0x00;                                //limpa o bit de abertura
0x0140	0x0100      	MOVLB       0
0x0142	0x9DE0      	BCF         _open_bit, BitPos(_open_bit+0), 1
;TCC_5.c,982 :: 		close_bit = 0x01;                                //seta o bit de fechamento
0x0144	0x87E0      	BSF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,983 :: 		x_mot     = 0x00;                                //zera x_mot
0x0146	0x6BC2      	CLRF        _x_mot, 1
0x0148	0x6BC3      	CLRF        _x_mot+1, 1
;TCC_5.c,985 :: 		}                                                 //end fecha_mot()
L_end_fecha_mot:
0x014A	0x0012      	RETURN      0
; end of _fecha_mot
_mot_aberto:
;TCC_5.c,903 :: 		void mot_aberto()
;TCC_5.c,905 :: 		if(x_mot<10)                                     //se x_mot for menor que 10...
0x014C	0x0E00      	MOVLW       0
0x014E	0x0100      	MOVLB       0
0x0150	0x5DC3      	SUBWF       _x_mot+1, 0, 1
0x0152	0xE102      	BNZ         L__mot_aberto335
0x0154	0x0E0A      	MOVLW       10
0x0156	0x5DC2      	SUBWF       _x_mot, 0, 1
L__mot_aberto335:
0x0158	0xE218      	BC          L_mot_aberto169
;TCC_5.c,907 :: 		SM=0;                                         //  ||
0x015A	0x9280      	BCF         PORTA, 1 
;TCC_5.c,908 :: 		delay_us(18000);                              //  ||
0x015C	0x0E2F      	MOVLW       47
0x015E	0x6E0C      	MOVWF       R12, 0
0x0160	0x0EBF      	MOVLW       191
0x0162	0x6E0D      	MOVWF       R13, 0
L_mot_aberto170:
0x0164	0x2E0D      	DECFSZ      R13, 1, 0
0x0166	0xD7FE      	BRA         L_mot_aberto170
0x0168	0x2E0C      	DECFSZ      R12, 1, 0
0x016A	0xD7FC      	BRA         L_mot_aberto170
0x016C	0x0000      	NOP
0x016E	0x0000      	NOP
;TCC_5.c,909 :: 		SM=1;                                         //  ||
0x0170	0x8280      	BSF         PORTA, 1 
;TCC_5.c,910 :: 		delay_us(2000);                               //  \/
0x0172	0x0E06      	MOVLW       6
0x0174	0x6E0C      	MOVWF       R12, 0
0x0176	0x0E30      	MOVLW       48
0x0178	0x6E0D      	MOVWF       R13, 0
L_mot_aberto171:
0x017A	0x2E0D      	DECFSZ      R13, 1, 0
0x017C	0xD7FE      	BRA         L_mot_aberto171
0x017E	0x2E0C      	DECFSZ      R12, 1, 0
0x0180	0xD7FC      	BRA         L_mot_aberto171
0x0182	0x0000      	NOP
;TCC_5.c,911 :: 		SM=0;                                         // liga motor 1 no sentido horário
0x0184	0x9280      	BCF         PORTA, 1 
;TCC_5.c,912 :: 		x_mot ++;                                     //incrementa x_mot
0x0186	0x4BC2      	INFSNZ      _x_mot, 1, 1
0x0188	0x2BC3      	INCF        _x_mot+1, 1, 1
;TCC_5.c,914 :: 		}                                               //end if x_mot<10
L_mot_aberto169:
;TCC_5.c,916 :: 		if(x_mot == 10)                                 //se x_mot for 10...
0x018A	0x0E00      	MOVLW       0
0x018C	0x19C3      	XORWF       _x_mot+1, 0, 1
0x018E	0xE102      	BNZ         L__mot_aberto336
0x0190	0x0E0A      	MOVLW       10
0x0192	0x19C2      	XORWF       _x_mot, 0, 1
L__mot_aberto336:
0x0194	0xE101      	BNZ         L_mot_aberto172
;TCC_5.c,918 :: 		fecha_mot();                                  //executa a configuração dos bits de controle do motor 1 para fechar
0x0196	0xDFD4      	RCALL       _fecha_mot
;TCC_5.c,920 :: 		}                                              //end if x_mot==10
L_mot_aberto172:
;TCC_5.c,922 :: 		}                                                 //end mot_aberto()
L_end_mot_aberto:
0x0198	0x0012      	RETURN      0
; end of _mot_aberto
_mot_fechado3:
;TCC_5.c,1067 :: 		void mot_fechado3()
;TCC_5.c,1069 :: 		if(x_mot3<10)                                   //se x_mot3 for menor que 10
0x019A	0x0E00      	MOVLW       0
0x019C	0x0100      	MOVLB       0
0x019E	0x5DD5      	SUBWF       _x_mot3+1, 0, 1
0x01A0	0xE102      	BNZ         L__mot_fechado3353
0x01A2	0x0E0A      	MOVLW       10
0x01A4	0x5DD4      	SUBWF       _x_mot3, 0, 1
L__mot_fechado3353:
0x01A6	0xE218      	BC          L_mot_fechado3189
;TCC_5.c,1071 :: 		SM3=0;                                        //  ||
0x01A8	0x9A80      	BCF         PORTA, 5 
;TCC_5.c,1072 :: 		delay_us(18500);                              //  ||
0x01AA	0x0E31      	MOVLW       49
0x01AC	0x6E0C      	MOVWF       R12, 0
0x01AE	0x0E0B      	MOVLW       11
0x01B0	0x6E0D      	MOVWF       R13, 0
L_mot_fechado3190:
0x01B2	0x2E0D      	DECFSZ      R13, 1, 0
0x01B4	0xD7FE      	BRA         L_mot_fechado3190
0x01B6	0x2E0C      	DECFSZ      R12, 1, 0
0x01B8	0xD7FC      	BRA         L_mot_fechado3190
0x01BA	0x0000      	NOP
0x01BC	0x0000      	NOP
;TCC_5.c,1073 :: 		SM3=1;                                        //  ||
0x01BE	0x8A80      	BSF         PORTA, 5 
;TCC_5.c,1074 :: 		delay_us(1500);                               //  \/
0x01C0	0x0E04      	MOVLW       4
0x01C2	0x6E0C      	MOVWF       R12, 0
0x01C4	0x0EE4      	MOVLW       228
0x01C6	0x6E0D      	MOVWF       R13, 0
L_mot_fechado3191:
0x01C8	0x2E0D      	DECFSZ      R13, 1, 0
0x01CA	0xD7FE      	BRA         L_mot_fechado3191
0x01CC	0x2E0C      	DECFSZ      R12, 1, 0
0x01CE	0xD7FC      	BRA         L_mot_fechado3191
0x01D0	0x0000      	NOP
;TCC_5.c,1075 :: 		SM3=0;                                        //leva o motor 3 para a posição inicial
0x01D2	0x9A80      	BCF         PORTA, 5 
;TCC_5.c,1076 :: 		x_mot3++;                                     //incrementa x_mot3
0x01D4	0x4BD4      	INFSNZ      _x_mot3, 1, 1
0x01D6	0x2BD5      	INCF        _x_mot3+1, 1, 1
;TCC_5.c,1078 :: 		}                                               //end if x_mot2<10
L_mot_fechado3189:
;TCC_5.c,1080 :: 		if(x_mot3==10)                                  //se x_mot3 for 10
0x01D8	0x0E00      	MOVLW       0
0x01DA	0x19D5      	XORWF       _x_mot3+1, 0, 1
0x01DC	0xE102      	BNZ         L__mot_fechado3354
0x01DE	0x0E0A      	MOVLW       10
0x01E0	0x19D4      	XORWF       _x_mot3, 0, 1
L__mot_fechado3354:
0x01E2	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,1082 :: 		close_bit3 = 0x00;                           //limpa o bit de fechamento
0x01E4	0x99E1      	BCF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,1084 :: 		}                                             //end if x_mot3==10
L_mot_fechado3192:
;TCC_5.c,1086 :: 		}                                                 //end mot_fechado3()
L_end_mot_fechado3:
0x01E6	0x0012      	RETURN      0
; end of _mot_fechado3
_mot_fechado2:
;TCC_5.c,1042 :: 		void mot_fechado2()
;TCC_5.c,1044 :: 		if(x_mot2<10)                                   //se x_mot2 for menor que 10
0x01E8	0x0E00      	MOVLW       0
0x01EA	0x0100      	MOVLB       0
0x01EC	0x5DC7      	SUBWF       _x_mot2+1, 0, 1
0x01EE	0xE102      	BNZ         L__mot_fechado2350
0x01F0	0x0E0A      	MOVLW       10
0x01F2	0x5DC6      	SUBWF       _x_mot2, 0, 1
L__mot_fechado2350:
0x01F4	0xE218      	BC          L_mot_fechado2185
;TCC_5.c,1046 :: 		SM2=0;                                        //  ||
0x01F6	0x9880      	BCF         PORTA, 4 
;TCC_5.c,1047 :: 		delay_us(18500);                              //  ||
0x01F8	0x0E31      	MOVLW       49
0x01FA	0x6E0C      	MOVWF       R12, 0
0x01FC	0x0E0B      	MOVLW       11
0x01FE	0x6E0D      	MOVWF       R13, 0
L_mot_fechado2186:
0x0200	0x2E0D      	DECFSZ      R13, 1, 0
0x0202	0xD7FE      	BRA         L_mot_fechado2186
0x0204	0x2E0C      	DECFSZ      R12, 1, 0
0x0206	0xD7FC      	BRA         L_mot_fechado2186
0x0208	0x0000      	NOP
0x020A	0x0000      	NOP
;TCC_5.c,1048 :: 		SM2=1;                                        //  ||
0x020C	0x8880      	BSF         PORTA, 4 
;TCC_5.c,1049 :: 		delay_us(1500);                               //  \/
0x020E	0x0E04      	MOVLW       4
0x0210	0x6E0C      	MOVWF       R12, 0
0x0212	0x0EE4      	MOVLW       228
0x0214	0x6E0D      	MOVWF       R13, 0
L_mot_fechado2187:
0x0216	0x2E0D      	DECFSZ      R13, 1, 0
0x0218	0xD7FE      	BRA         L_mot_fechado2187
0x021A	0x2E0C      	DECFSZ      R12, 1, 0
0x021C	0xD7FC      	BRA         L_mot_fechado2187
0x021E	0x0000      	NOP
;TCC_5.c,1050 :: 		SM2=0;                                        //leva o motor 2 para a posição inicial
0x0220	0x9880      	BCF         PORTA, 4 
;TCC_5.c,1051 :: 		x_mot2++;                                     //incrementa x_mot2
0x0222	0x4BC6      	INFSNZ      _x_mot2, 1, 1
0x0224	0x2BC7      	INCF        _x_mot2+1, 1, 1
;TCC_5.c,1053 :: 		}                                               //end if x_mot2<10
L_mot_fechado2185:
;TCC_5.c,1055 :: 		if(x_mot2==10)                                  //se x_mot2 for 10
0x0226	0x0E00      	MOVLW       0
0x0228	0x19C7      	XORWF       _x_mot2+1, 0, 1
0x022A	0xE102      	BNZ         L__mot_fechado2351
0x022C	0x0E0A      	MOVLW       10
0x022E	0x19C6      	XORWF       _x_mot2, 0, 1
L__mot_fechado2351:
0x0230	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,1057 :: 		close_bit2 = 0x00;                           //limpa o bit de fechamento
0x0232	0x97E1      	BCF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,1059 :: 		}                                             //end if x_mot2==10
L_mot_fechado2188:
;TCC_5.c,1061 :: 		}                                                 //end mot_fechado2()
L_end_mot_fechado2:
0x0234	0x0012      	RETURN      0
; end of _mot_fechado2
_mot_aberto2:
;TCC_5.c,928 :: 		void mot_aberto2()
;TCC_5.c,930 :: 		if(x_mot2<10)                                    //se x_mot2 for menor que 10...
0x0236	0x0E00      	MOVLW       0
0x0238	0x0100      	MOVLB       0
0x023A	0x5DC7      	SUBWF       _x_mot2+1, 0, 1
0x023C	0xE102      	BNZ         L__mot_aberto2338
0x023E	0x0E0A      	MOVLW       10
0x0240	0x5DC6      	SUBWF       _x_mot2, 0, 1
L__mot_aberto2338:
0x0242	0xE218      	BC          L_mot_aberto2173
;TCC_5.c,932 :: 		SM2=0;                                        //  ||
0x0244	0x9880      	BCF         PORTA, 4 
;TCC_5.c,933 :: 		delay_us(18000);                              //  ||
0x0246	0x0E2F      	MOVLW       47
0x0248	0x6E0C      	MOVWF       R12, 0
0x024A	0x0EBF      	MOVLW       191
0x024C	0x6E0D      	MOVWF       R13, 0
L_mot_aberto2174:
0x024E	0x2E0D      	DECFSZ      R13, 1, 0
0x0250	0xD7FE      	BRA         L_mot_aberto2174
0x0252	0x2E0C      	DECFSZ      R12, 1, 0
0x0254	0xD7FC      	BRA         L_mot_aberto2174
0x0256	0x0000      	NOP
0x0258	0x0000      	NOP
;TCC_5.c,934 :: 		SM2=1;                                        //  ||
0x025A	0x8880      	BSF         PORTA, 4 
;TCC_5.c,935 :: 		delay_us(2000);                               //  \/
0x025C	0x0E06      	MOVLW       6
0x025E	0x6E0C      	MOVWF       R12, 0
0x0260	0x0E30      	MOVLW       48
0x0262	0x6E0D      	MOVWF       R13, 0
L_mot_aberto2175:
0x0264	0x2E0D      	DECFSZ      R13, 1, 0
0x0266	0xD7FE      	BRA         L_mot_aberto2175
0x0268	0x2E0C      	DECFSZ      R12, 1, 0
0x026A	0xD7FC      	BRA         L_mot_aberto2175
0x026C	0x0000      	NOP
;TCC_5.c,936 :: 		SM2=0;                                        //liga motor 2 no sentido horário
0x026E	0x9880      	BCF         PORTA, 4 
;TCC_5.c,937 :: 		x_mot2 ++;                                    //incrementa x_mot2
0x0270	0x4BC6      	INFSNZ      _x_mot2, 1, 1
0x0272	0x2BC7      	INCF        _x_mot2+1, 1, 1
;TCC_5.c,939 :: 		}                                               //end if x_mot2<10
L_mot_aberto2173:
;TCC_5.c,941 :: 		if(x_mot2 == 10)                                //se x_mot2 for 10...
0x0274	0x0E00      	MOVLW       0
0x0276	0x19C7      	XORWF       _x_mot2+1, 0, 1
0x0278	0xE102      	BNZ         L__mot_aberto2339
0x027A	0x0E0A      	MOVLW       10
0x027C	0x19C6      	XORWF       _x_mot2, 0, 1
L__mot_aberto2339:
0x027E	0xE101      	BNZ         L_mot_aberto2176
;TCC_5.c,943 :: 		fecha_mot2();                                 //executa a configuração dos bits de controle do motor 2 para fechar
0x0280	0xDF59      	RCALL       _fecha_mot2
;TCC_5.c,945 :: 		}                                              //end if x_mot2==10
L_mot_aberto2176:
;TCC_5.c,947 :: 		}                                                 //end mot_aberto2()
L_end_mot_aberto2:
0x0282	0x0012      	RETURN      0
; end of _mot_aberto2
_mot_aberto3:
;TCC_5.c,953 :: 		void mot_aberto3()
;TCC_5.c,955 :: 		if(x_mot3<10)                                    //se x_mot3 for menor que 10...
0x0284	0x0E00      	MOVLW       0
0x0286	0x0100      	MOVLB       0
0x0288	0x5DD5      	SUBWF       _x_mot3+1, 0, 1
0x028A	0xE102      	BNZ         L__mot_aberto3341
0x028C	0x0E0A      	MOVLW       10
0x028E	0x5DD4      	SUBWF       _x_mot3, 0, 1
L__mot_aberto3341:
0x0290	0xE218      	BC          L_mot_aberto3177
;TCC_5.c,957 :: 		SM3=0;                                        //  ||
0x0292	0x9A80      	BCF         PORTA, 5 
;TCC_5.c,958 :: 		delay_us(18000);                              //  ||
0x0294	0x0E2F      	MOVLW       47
0x0296	0x6E0C      	MOVWF       R12, 0
0x0298	0x0EBF      	MOVLW       191
0x029A	0x6E0D      	MOVWF       R13, 0
L_mot_aberto3178:
0x029C	0x2E0D      	DECFSZ      R13, 1, 0
0x029E	0xD7FE      	BRA         L_mot_aberto3178
0x02A0	0x2E0C      	DECFSZ      R12, 1, 0
0x02A2	0xD7FC      	BRA         L_mot_aberto3178
0x02A4	0x0000      	NOP
0x02A6	0x0000      	NOP
;TCC_5.c,959 :: 		SM3=1;                                        //  ||
0x02A8	0x8A80      	BSF         PORTA, 5 
;TCC_5.c,960 :: 		delay_us(2000);                               //  \/
0x02AA	0x0E06      	MOVLW       6
0x02AC	0x6E0C      	MOVWF       R12, 0
0x02AE	0x0E30      	MOVLW       48
0x02B0	0x6E0D      	MOVWF       R13, 0
L_mot_aberto3179:
0x02B2	0x2E0D      	DECFSZ      R13, 1, 0
0x02B4	0xD7FE      	BRA         L_mot_aberto3179
0x02B6	0x2E0C      	DECFSZ      R12, 1, 0
0x02B8	0xD7FC      	BRA         L_mot_aberto3179
0x02BA	0x0000      	NOP
;TCC_5.c,961 :: 		SM3=0;                                        // liga motor 1 no sentido horário
0x02BC	0x9A80      	BCF         PORTA, 5 
;TCC_5.c,962 :: 		x_mot3 ++;                                    //incrementa x_mot3
0x02BE	0x4BD4      	INFSNZ      _x_mot3, 1, 1
0x02C0	0x2BD5      	INCF        _x_mot3+1, 1, 1
;TCC_5.c,964 :: 		}                                               //end if x_mot3<10
L_mot_aberto3177:
;TCC_5.c,966 :: 		if(x_mot3 == 10)                                //se x_mot3 for 10...
0x02C2	0x0E00      	MOVLW       0
0x02C4	0x19D5      	XORWF       _x_mot3+1, 0, 1
0x02C6	0xE102      	BNZ         L__mot_aberto3342
0x02C8	0x0E0A      	MOVLW       10
0x02CA	0x19D4      	XORWF       _x_mot3, 0, 1
L__mot_aberto3342:
0x02CC	0xE101      	BNZ         L_mot_aberto3180
;TCC_5.c,968 :: 		fecha_mot3();                                 //executa a configuração dos bits de controle do motor 3 para fechar
0x02CE	0xDF2C      	RCALL       _fecha_mot3
;TCC_5.c,970 :: 		}                                              //end if x_mot3==10
L_mot_aberto3180:
;TCC_5.c,972 :: 		}                                                 //end mot_aberto3()
L_end_mot_aberto3:
0x02D0	0x0012      	RETURN      0
; end of _mot_aberto3
_mot_fechado:
;TCC_5.c,1017 :: 		void mot_fechado()
;TCC_5.c,1019 :: 		if(x_mot<10)                                     //se x_mot for menor que 10
0x02D2	0x0E00      	MOVLW       0
0x02D4	0x0100      	MOVLB       0
0x02D6	0x5DC3      	SUBWF       _x_mot+1, 0, 1
0x02D8	0xE102      	BNZ         L__mot_fechado347
0x02DA	0x0E0A      	MOVLW       10
0x02DC	0x5DC2      	SUBWF       _x_mot, 0, 1
L__mot_fechado347:
0x02DE	0xE218      	BC          L_mot_fechado181
;TCC_5.c,1021 :: 		SM=0;                                         //  ||
0x02E0	0x9280      	BCF         PORTA, 1 
;TCC_5.c,1022 :: 		delay_us(18500);                              //  ||
0x02E2	0x0E31      	MOVLW       49
0x02E4	0x6E0C      	MOVWF       R12, 0
0x02E6	0x0E0B      	MOVLW       11
0x02E8	0x6E0D      	MOVWF       R13, 0
L_mot_fechado182:
0x02EA	0x2E0D      	DECFSZ      R13, 1, 0
0x02EC	0xD7FE      	BRA         L_mot_fechado182
0x02EE	0x2E0C      	DECFSZ      R12, 1, 0
0x02F0	0xD7FC      	BRA         L_mot_fechado182
0x02F2	0x0000      	NOP
0x02F4	0x0000      	NOP
;TCC_5.c,1023 :: 		SM=1;                                         //  ||
0x02F6	0x8280      	BSF         PORTA, 1 
;TCC_5.c,1024 :: 		delay_us(1500);                               //  \/
0x02F8	0x0E04      	MOVLW       4
0x02FA	0x6E0C      	MOVWF       R12, 0
0x02FC	0x0EE4      	MOVLW       228
0x02FE	0x6E0D      	MOVWF       R13, 0
L_mot_fechado183:
0x0300	0x2E0D      	DECFSZ      R13, 1, 0
0x0302	0xD7FE      	BRA         L_mot_fechado183
0x0304	0x2E0C      	DECFSZ      R12, 1, 0
0x0306	0xD7FC      	BRA         L_mot_fechado183
0x0308	0x0000      	NOP
;TCC_5.c,1025 :: 		SM=0;                                         //leva o motor para a posição inicial
0x030A	0x9280      	BCF         PORTA, 1 
;TCC_5.c,1026 :: 		x_mot++;                                      //incrementa x_mot
0x030C	0x4BC2      	INFSNZ      _x_mot, 1, 1
0x030E	0x2BC3      	INCF        _x_mot+1, 1, 1
;TCC_5.c,1028 :: 		}                                               //end if x_mot<10
L_mot_fechado181:
;TCC_5.c,1030 :: 		if(x_mot==10)                                   //se x_mot for 10
0x0310	0x0E00      	MOVLW       0
0x0312	0x19C3      	XORWF       _x_mot+1, 0, 1
0x0314	0xE102      	BNZ         L__mot_fechado348
0x0316	0x0E0A      	MOVLW       10
0x0318	0x19C2      	XORWF       _x_mot, 0, 1
L__mot_fechado348:
0x031A	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,1032 :: 		close_bit = 0x00;                            //limpa o bit de fechamento
0x031C	0x97E0      	BCF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,1034 :: 		}                                             //end if x_mot==10
L_mot_fechado184:
;TCC_5.c,1036 :: 		}                                                 //end mot_fechado
L_end_mot_fechado:
0x031E	0x0012      	RETURN      0
; end of _mot_fechado
_Lcd_Out:
;__Lib_Lcd.c,184 :: 		
;__Lib_Lcd.c,187 :: 		
0x0320	0xD010      	BRA         L_Lcd_Out11
;__Lib_Lcd.c,188 :: 		
L_Lcd_Out13:
0x0322	0x0E80      	MOVLW       128
0x0324	0x0100      	MOVLB       0
0x0326	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0328	0xD01A      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,189 :: 		
L_Lcd_Out14:
0x032A	0x0EC0      	MOVLW       192
0x032C	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x032E	0xD017      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,190 :: 		
L_Lcd_Out15:
0x0330	0x0E94      	MOVLW       148
0x0332	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0334	0xD014      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,191 :: 		
L_Lcd_Out16:
0x0336	0x0ED4      	MOVLW       212
0x0338	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x033A	0xD011      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,192 :: 		
L_Lcd_Out17:
0x033C	0x0E80      	MOVLW       128
0x033E	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
;__Lib_Lcd.c,193 :: 		
0x0340	0xD00E      	BRA         L_Lcd_Out12
L_Lcd_Out11:
0x0342	0x0100      	MOVLB       0
0x0344	0x51ED      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0346	0x0A01      	XORLW       1
0x0348	0xE0EC      	BZ          L_Lcd_Out13
0x034A	0x51ED      	MOVF        FARG_Lcd_Out_row, 0, 1
0x034C	0x0A02      	XORLW       2
0x034E	0xE0ED      	BZ          L_Lcd_Out14
0x0350	0x51ED      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0352	0x0A03      	XORLW       3
0x0354	0xE0ED      	BZ          L_Lcd_Out15
0x0356	0x51ED      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0358	0x0A04      	XORLW       4
0x035A	0xE0ED      	BZ          L_Lcd_Out16
0x035C	0xD7EF      	BRA         L_Lcd_Out17
L_Lcd_Out12:
;__Lib_Lcd.c,194 :: 		
0x035E	0x05EE      	DECF        FARG_Lcd_Out_column, 0, 1
0x0360	0x6E00      	MOVWF       R0 
0x0362	0x51ED      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0364	0x2600      	ADDWF       R0, 1 
0x0366	0xF0EDC000  	MOVFF       R0, FARG_Lcd_Out_row
;__Lib_Lcd.c,196 :: 		
0x036A	0xF0F3C000  	MOVFF       R0, FARG_Lcd_Cmd_out_char
0x036E	0xDE96      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,197 :: 		
0x0370	0x9DE1      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,198 :: 		
0x0372	0x6BF1      	CLRF        Lcd_Out_i_L0, 1
;__Lib_Lcd.c,199 :: 		
L_Lcd_Out18:
0x0374	0x51F1      	MOVF        Lcd_Out_i_L0, 0, 1
0x0376	0x25EF      	ADDWF       FARG_Lcd_Out_text, 0, 1
0x0378	0x6EE9      	MOVWF       FSR0L 
0x037A	0x0E00      	MOVLW       0
0x037C	0x21F0      	ADDWFC      FARG_Lcd_Out_text+1, 0, 1
0x037E	0x6EEA      	MOVWF       FSR0L+1 
0x0380	0x52EE      	MOVF        POSTINC0, 1 
0x0382	0xE00B      	BZ          L_Lcd_Out19
;__Lib_Lcd.c,200 :: 		
0x0384	0x51F1      	MOVF        Lcd_Out_i_L0, 0, 1
0x0386	0x25EF      	ADDWF       FARG_Lcd_Out_text, 0, 1
0x0388	0x6EE9      	MOVWF       FSR0L 
0x038A	0x0E00      	MOVLW       0
0x038C	0x21F0      	ADDWFC      FARG_Lcd_Out_text+1, 0, 1
0x038E	0x6EEA      	MOVWF       FSR0L+1 
0x0390	0xF0F2CFEE  	MOVFF       POSTINC0, FARG_Lcd_Chr_CP_out_char
0x0394	0xDEC2      	RCALL       _Lcd_Chr_CP
0x0396	0x2BF1      	INCF        Lcd_Out_i_L0, 1, 1
0x0398	0xD7ED      	BRA         L_Lcd_Out18
L_Lcd_Out19:
;__Lib_Lcd.c,201 :: 		
0x039A	0x8DE1      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,202 :: 		
L_end_Lcd_Out:
0x039C	0x0012      	RETURN      0
; end of _Lcd_Out
_Lcd_Chr:
;__Lib_Lcd.c,65 :: 		
;__Lib_Lcd.c,66 :: 		
0x039E	0xD010      	BRA         L_Lcd_Chr4
;__Lib_Lcd.c,67 :: 		
L_Lcd_Chr6:
0x03A0	0x0E80      	MOVLW       128
0x03A2	0x0100      	MOVLB       0
0x03A4	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x03A6	0xD01A      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,68 :: 		
L_Lcd_Chr7:
0x03A8	0x0EC0      	MOVLW       192
0x03AA	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x03AC	0xD017      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,69 :: 		
L_Lcd_Chr8:
0x03AE	0x0E94      	MOVLW       148
0x03B0	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x03B2	0xD014      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,70 :: 		
L_Lcd_Chr9:
0x03B4	0x0ED4      	MOVLW       212
0x03B6	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x03B8	0xD011      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,71 :: 		
L_Lcd_Chr10:
0x03BA	0x0E80      	MOVLW       128
0x03BC	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
;__Lib_Lcd.c,72 :: 		
0x03BE	0xD00E      	BRA         L_Lcd_Chr5
L_Lcd_Chr4:
0x03C0	0x0100      	MOVLB       0
0x03C2	0x51ED      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x03C4	0x0A01      	XORLW       1
0x03C6	0xE0EC      	BZ          L_Lcd_Chr6
0x03C8	0x51ED      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x03CA	0x0A02      	XORLW       2
0x03CC	0xE0ED      	BZ          L_Lcd_Chr7
0x03CE	0x51ED      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x03D0	0x0A03      	XORLW       3
0x03D2	0xE0ED      	BZ          L_Lcd_Chr8
0x03D4	0x51ED      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x03D6	0x0A04      	XORLW       4
0x03D8	0xE0ED      	BZ          L_Lcd_Chr9
0x03DA	0xD7EF      	BRA         L_Lcd_Chr10
L_Lcd_Chr5:
;__Lib_Lcd.c,74 :: 		
0x03DC	0x05EE      	DECF        FARG_Lcd_Chr_column, 0, 1
0x03DE	0x6E00      	MOVWF       R0 
0x03E0	0x51ED      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x03E2	0x2600      	ADDWF       R0, 1 
0x03E4	0xF0EDC000  	MOVFF       R0, FARG_Lcd_Chr_row
;__Lib_Lcd.c,76 :: 		
0x03E8	0x8DE1      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,77 :: 		
0x03EA	0xF0F3C000  	MOVFF       R0, FARG_Lcd_Cmd_out_char
0x03EE	0xDE56      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,79 :: 		
0x03F0	0x9DE1      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,80 :: 		
0x03F2	0xF0F3C0EF  	MOVFF       FARG_Lcd_Chr_out_char, FARG_Lcd_Cmd_out_char
0x03F6	0xDE52      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,81 :: 		
0x03F8	0x8DE1      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,82 :: 		
L_end_Lcd_Chr:
0x03FA	0x0012      	RETURN      0
; end of _Lcd_Chr
_Div_16X16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x03FC	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x03FE	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x0400	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x0402	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x0404	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x0406	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x0408	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x040A	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x040C	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x040E	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x0410	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x0412	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x0414	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x0416	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x0418	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x041A	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x041C	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x041E	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x0420	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x0422	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x0424	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x0426	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x0428	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x042A	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x042C	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x042E	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16X16_U:
0x0430	0x0012      	RETURN      0
; end of _Div_16X16_U
_toca_som:
;TCC_5.c,840 :: 		void toca_som()
;TCC_5.c,842 :: 		if(temp_som>3) temp_som=0x00;                    //se temp_som for maior que 3, zera temp_som
0x0432	0x0E00      	MOVLW       0
0x0434	0x6E00      	MOVWF       R0 
0x0436	0x0100      	MOVLB       0
0x0438	0x51C1      	MOVF        _temp_som+1, 0, 1
0x043A	0x5C00      	SUBWF       R0, 0 
0x043C	0xE102      	BNZ         L__toca_som329
0x043E	0x51C0      	MOVF        _temp_som, 0, 1
0x0440	0x0803      	SUBLW       3
L__toca_som329:
0x0442	0xE202      	BC          L_toca_som166
0x0444	0x6BC0      	CLRF        _temp_som, 1
0x0446	0x6BC1      	CLRF        _temp_som+1, 1
L_toca_som166:
;TCC_5.c,843 :: 		if(temp_som==3)                               //conta 300 milisegundos...
0x0448	0x0E00      	MOVLW       0
0x044A	0x19C1      	XORWF       _temp_som+1, 0, 1
0x044C	0xE102      	BNZ         L__toca_som330
0x044E	0x0E03      	MOVLW       3
0x0450	0x19C0      	XORWF       _temp_som, 0, 1
L__toca_som330:
0x0452	0xE10A      	BNZ         L_toca_som167
;TCC_5.c,845 :: 		temp_som = 0x00;                             //zera temp_som
0x0454	0x6BC0      	CLRF        _temp_som, 1
0x0456	0x6BC1      	CLRF        _temp_som+1, 1
;TCC_5.c,846 :: 		SOM = ~SOM;                                  //inverte o estado do buzzer
0x0458	0x7480      	BTG         PORTA, 2 
;TCC_5.c,847 :: 		vezes++;                                     //incrementa vezes
0x045A	0x4BD6      	INFSNZ      _vezes, 1, 1
0x045C	0x2BD7      	INCF        _vezes+1, 1, 1
;TCC_5.c,849 :: 		if(!ligar)                                   //se ligar for 0 (desligado)
0x045E	0xB5E6      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x0460	0xD003      	BRA         L_toca_som168
;TCC_5.c,851 :: 		vezes = 0x00;                               //zera vezes
0x0462	0x6BD6      	CLRF        _vezes, 1
0x0464	0x6BD7      	CLRF        _vezes+1, 1
;TCC_5.c,852 :: 		SOM   = 0x00;                               //desliga o buzzer
0x0466	0x9480      	BCF         PORTA, 2 
;TCC_5.c,854 :: 		}                                            //end if !ligar
L_toca_som168:
;TCC_5.c,856 :: 		}                                             //end if temp_som==3
L_toca_som167:
;TCC_5.c,858 :: 		}                                                 //end toca_som()
L_end_toca_som:
0x0468	0x0012      	RETURN      0
; end of _toca_som
_abre_mot:
;TCC_5.c,865 :: 		void abre_mot()
;TCC_5.c,867 :: 		open_bit  = 0x01;                                //seta bit de abertura
0x046A	0x0100      	MOVLB       0
0x046C	0x8DE0      	BSF         _open_bit, BitPos(_open_bit+0), 1
;TCC_5.c,868 :: 		close_bit = 0x00;                                //limpa bit de fechamento
0x046E	0x97E0      	BCF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,869 :: 		x_mot     = 0x00;                                //zera x_mot
0x0470	0x6BC2      	CLRF        _x_mot, 1
0x0472	0x6BC3      	CLRF        _x_mot+1, 1
;TCC_5.c,871 :: 		}                                                 //end abre_mot()
L_end_abre_mot:
0x0474	0x0012      	RETURN      0
; end of _abre_mot
_abre_mot3:
;TCC_5.c,891 :: 		void abre_mot3()
;TCC_5.c,893 :: 		open_bit3  = 0x01;                               //seta bit de abertura
0x0476	0x0100      	MOVLB       0
0x0478	0x85E0      	BSF         _open_bit3, BitPos(_open_bit3+0), 1
;TCC_5.c,894 :: 		close_bit3 = 0x00;                               //limpa bit de fechamento
0x047A	0x99E1      	BCF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,895 :: 		x_mot3     = 0x00;                               //zera x_mot
0x047C	0x6BD4      	CLRF        _x_mot3, 1
0x047E	0x6BD5      	CLRF        _x_mot3+1, 1
;TCC_5.c,897 :: 		}                                                 //end abre_mot3()
L_end_abre_mot3:
0x0480	0x0012      	RETURN      0
; end of _abre_mot3
_alarme:
;TCC_5.c,794 :: 		void alarme()
;TCC_5.c,796 :: 		if(toque || toque2 || toque3)                    //se toque, toque2 ou toque3 for 1
0x0482	0x0100      	MOVLB       0
0x0484	0xB1E0      	BTFSC       _toque, BitPos(_toque+0), 1
0x0486	0xD005      	BRA         L__alarme239
0x0488	0xB9E0      	BTFSC       _toque2, BitPos(_toque2+0), 1
0x048A	0xD003      	BRA         L__alarme239
0x048C	0xBBE0      	BTFSC       _toque3, BitPos(_toque3+0), 1
0x048E	0xD001      	BRA         L__alarme239
0x0490	0xD01A      	BRA         L_alarme160
L__alarme239:
;TCC_5.c,798 :: 		if(vezes <10)                                  //se vezes for menor que 10
0x0492	0x0E00      	MOVLW       0
0x0494	0x5DD7      	SUBWF       _vezes+1, 0, 1
0x0496	0xE102      	BNZ         L__alarme327
0x0498	0x0E0A      	MOVLW       10
0x049A	0x5DD6      	SUBWF       _vezes, 0, 1
L__alarme327:
0x049C	0xE202      	BC          L_alarme161
;TCC_5.c,800 :: 		toca_som();                                   //executa a toca do SOM
0x049E	0xDFC9      	RCALL       _toca_som
;TCC_5.c,802 :: 		}                                              //end if vezes<10
0x04A0	0xD012      	BRA         L_alarme162
L_alarme161:
;TCC_5.c,806 :: 		if(toque)                                     //se toque for 1
0x04A2	0xA1E0      	BTFSS       _toque, BitPos(_toque+0), 1
0x04A4	0xD003      	BRA         L_alarme163
;TCC_5.c,808 :: 		toque=0x00;                                  //limpa o bit toque
0x04A6	0x91E0      	BCF         _toque, BitPos(_toque+0), 1
;TCC_5.c,809 :: 		temp_ligado=0x00;                            //zera temp_ligado para recomeçar a contagem
0x04A8	0x6BCE      	CLRF        _temp_ligado, 1
0x04AA	0x6BCF      	CLRF        _temp_ligado+1, 1
;TCC_5.c,811 :: 		}                                             //end if toque
L_alarme163:
;TCC_5.c,813 :: 		if(toque2)                                    //se toque2 for 1
0x04AC	0xA9E0      	BTFSS       _toque2, BitPos(_toque2+0), 1
0x04AE	0xD003      	BRA         L_alarme164
;TCC_5.c,815 :: 		toque2=0x00;                                 //limpa o bit toque 2
0x04B0	0x99E0      	BCF         _toque2, BitPos(_toque2+0), 1
;TCC_5.c,816 :: 		temp_ligado2=0x00;                           //zera temp_ligado2 para recomeçar a contagem
0x04B2	0x6BD0      	CLRF        _temp_ligado2, 1
0x04B4	0x6BD1      	CLRF        _temp_ligado2+1, 1
;TCC_5.c,818 :: 		}                                             //end if toque2
L_alarme164:
;TCC_5.c,820 :: 		if(toque3)                                    //se toque2 for 1
0x04B6	0xABE0      	BTFSS       _toque3, BitPos(_toque3+0), 1
0x04B8	0xD003      	BRA         L_alarme165
;TCC_5.c,822 :: 		toque3=0x00;                                 //limpa o bit toque3
0x04BA	0x9BE0      	BCF         _toque3, BitPos(_toque3+0), 1
;TCC_5.c,823 :: 		temp_ligado3=0x00;                           //zera temp_ligado3 para recomeçar a contagem
0x04BC	0x6BD2      	CLRF        _temp_ligado3, 1
0x04BE	0x6BD3      	CLRF        _temp_ligado3+1, 1
;TCC_5.c,825 :: 		}                                             //end if toque3
L_alarme165:
;TCC_5.c,827 :: 		vezes=0x00;                                  //zera vezes
0x04C0	0x6BD6      	CLRF        _vezes, 1
0x04C2	0x6BD7      	CLRF        _vezes+1, 1
;TCC_5.c,828 :: 		SOM = 0x00;                                  //desliga o som
0x04C4	0x9480      	BCF         PORTA, 2 
;TCC_5.c,830 :: 		}                                              //end else
L_alarme162:
;TCC_5.c,832 :: 		}                                                //end if toque || toque2 || toque3
L_alarme160:
;TCC_5.c,834 :: 		}                                                 //end alarme()
L_end_alarme:
0x04C6	0x0012      	RETURN      0
; end of _alarme
_abre_mot2:
;TCC_5.c,878 :: 		void abre_mot2()
;TCC_5.c,880 :: 		open_bit2  = 0x01;                               //seta bit de abertura
0x04C8	0x0100      	MOVLB       0
0x04CA	0x83E0      	BSF         _open_bit2, BitPos(_open_bit2+0), 1
;TCC_5.c,881 :: 		close_bit2 = 0x00;                               //limpa bit de fechamento
0x04CC	0x97E1      	BCF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,882 :: 		x_mot2     = 0x00;                               //zera x_mot
0x04CE	0x6BC6      	CLRF        _x_mot2, 1
0x04D0	0x6BC7      	CLRF        _x_mot2+1, 1
;TCC_5.c,884 :: 		}                                                 //end abre_mot2()
L_end_abre_mot2:
0x04D2	0x0012      	RETURN      0
; end of _abre_mot2
_EEPROM_Write:
;__Lib_EEPROM_256.c,21 :: 		
;__Lib_EEPROM_256.c,24 :: 		
L_EEPROM_Write0:
0x04D4	0xA2A6      	BTFSS       EECON1, 1 
0x04D6	0xD002      	BRA         L_EEPROM_Write1
;__Lib_EEPROM_256.c,25 :: 		
0x04D8	0x0000      	NOP
0x04DA	0xD7FC      	BRA         L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM_256.c,26 :: 		
0x04DC	0x9CA6      	BCF         EECON1, 6 
;__Lib_EEPROM_256.c,27 :: 		
0x04DE	0xFFA9C0EA  	MOVFF       FARG_EEPROM_Write_address, EEADR
;__Lib_EEPROM_256.c,28 :: 		
0x04E2	0xFFA8C0EB  	MOVFF       FARG_EEPROM_Write_data_, EEDATA
;__Lib_EEPROM_256.c,29 :: 		
0x04E6	0x9EA6      	BCF         EECON1, 7 
;__Lib_EEPROM_256.c,30 :: 		
0x04E8	0x84A6      	BSF         EECON1, 2 
;__Lib_EEPROM_256.c,32 :: 		
0x04EA	0xF000CFF2  	MOVFF       INTCON, R0
;__Lib_EEPROM_256.c,35 :: 		
0x04EE	0x9EF2      	BCF         INTCON, 7 
;__Lib_EEPROM_256.c,36 :: 		
0x04F0	0x0E55      	MOVLW       85
0x04F2	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_256.c,37 :: 		
0x04F4	0x0EAA      	MOVLW       170
0x04F6	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_256.c,38 :: 		
0x04F8	0x82A6      	BSF         EECON1, 1 
;__Lib_EEPROM_256.c,42 :: 		
0x04FA	0xBE00      	BTFSC       R0, 7 
0x04FC	0xD002      	BRA         L__EEPROM_Write6
0x04FE	0x9EF2      	BCF         INTCON, 7 
0x0500	0xD001      	BRA         L__EEPROM_Write7
L__EEPROM_Write6:
0x0502	0x8EF2      	BSF         INTCON, 7 
L__EEPROM_Write7:
;__Lib_EEPROM_256.c,44 :: 		
0x0504	0x94A6      	BCF         EECON1, 2 
;__Lib_EEPROM_256.c,46 :: 		
L_EEPROM_Write2:
0x0506	0xB8A1      	BTFSC       PIR2, 4 
0x0508	0xD002      	BRA         L_EEPROM_Write3
;__Lib_EEPROM_256.c,47 :: 		
0x050A	0x0000      	NOP
0x050C	0xD7FC      	BRA         L_EEPROM_Write2
L_EEPROM_Write3:
;__Lib_EEPROM_256.c,49 :: 		
0x050E	0x98A1      	BCF         PIR2, 4 
;__Lib_EEPROM_256.c,50 :: 		
L_end_EEPROM_Write:
0x0510	0x0012      	RETURN      0
; end of _EEPROM_Write
_Mul_16X16_U:
;__Lib_Math.c,440 :: 		
;__Lib_Math.c,447 :: 		
0x0512	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,448 :: 		
0x0514	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,449 :: 		
0x0516	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,450 :: 		
0x0518	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,451 :: 		
0x051A	0x0204      	MULWF       R4, 0
;__Lib_Math.c,453 :: 		
0x051C	0xF009CFF4  	MOVFF       PRODH, R9
;__Lib_Math.c,454 :: 		
0x0520	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_Math.c,455 :: 		
0x0524	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,456 :: 		
0x0526	0x0205      	MULWF       R5, 0
;__Lib_Math.c,458 :: 		
0x0528	0xF00BCFF4  	MOVFF       PRODH, R11
;__Lib_Math.c,459 :: 		
0x052C	0xF00ACFF3  	MOVFF       PRODL, R10
;__Lib_Math.c,460 :: 		
0x0530	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,461 :: 		
0x0532	0x0205      	MULWF       R5, 0
;__Lib_Math.c,463 :: 		
0x0534	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,464 :: 		
0x0536	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,465 :: 		
0x0538	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,466 :: 		
0x053A	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,467 :: 		
0x053C	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,468 :: 		
0x053E	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,469 :: 		
0x0540	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,470 :: 		
0x0542	0x0204      	MULWF       R4, 0
;__Lib_Math.c,472 :: 		
0x0544	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,473 :: 		
0x0546	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,474 :: 		
0x0548	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,475 :: 		
0x054A	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,476 :: 		
0x054C	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,477 :: 		
0x054E	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,479 :: 		
0x0550	0xF000C008  	MOVFF       R8, R0
;__Lib_Math.c,480 :: 		
0x0554	0xF001C009  	MOVFF       R9, R1
;__Lib_Math.c,481 :: 		
0x0558	0xF002C00A  	MOVFF       R10, R2
;__Lib_Math.c,482 :: 		
0x055C	0xF003C00B  	MOVFF       R11, R3
;__Lib_Math.c,485 :: 		
L_end_Mul_16X16_U:
0x0560	0x0012      	RETURN      0
; end of _Mul_16X16_U
_read_motbits:
;TCC_5.c,1093 :: 		void read_motbits()
;TCC_5.c,1095 :: 		if(!open_bit && !close_bit) atv_mot = 0x00;    //se os bits de abertura e fechamento do motor 1 forem 0,
0x0562	0x0100      	MOVLB       0
0x0564	0xBDE0      	BTFSC       _open_bit, BitPos(_open_bit+0), 1
0x0566	0xD003      	BRA         L_read_motbits195
0x0568	0xB7E0      	BTFSC       _close_bit, BitPos(_close_bit+0), 1
0x056A	0xD001      	BRA         L_read_motbits195
L__read_motbits248:
0x056C	0x9BE1      	BCF         _atv_mot, BitPos(_atv_mot+0), 1
L_read_motbits195:
;TCC_5.c,1098 :: 		if(open_bit && !close_bit)                     //se o bit de abertura for 1 e o de fechamento for 0...
0x056E	0xADE0      	BTFSS       _open_bit, BitPos(_open_bit+0), 1
0x0570	0xD003      	BRA         L_read_motbits198
0x0572	0xB7E0      	BTFSC       _close_bit, BitPos(_close_bit+0), 1
0x0574	0xD001      	BRA         L_read_motbits198
L__read_motbits247:
;TCC_5.c,1100 :: 		mot_aberto();                                 //executa a abertura do motor 1
0x0576	0xDDEA      	RCALL       _mot_aberto
;TCC_5.c,1102 :: 		}                                              //end if open_bit && !close_bit
L_read_motbits198:
;TCC_5.c,1104 :: 		if(!open_bit && close_bit)                     //se o bit de abertura for 0 e o de fechamento for 1...
0x0578	0xBDE0      	BTFSC       _open_bit, BitPos(_open_bit+0), 1
0x057A	0xD003      	BRA         L_read_motbits201
0x057C	0xA7E0      	BTFSS       _close_bit, BitPos(_close_bit+0), 1
0x057E	0xD001      	BRA         L_read_motbits201
L__read_motbits246:
;TCC_5.c,1106 :: 		mot_fechado();                                //executa o fechamento do motor 1
0x0580	0xDEA8      	RCALL       _mot_fechado
;TCC_5.c,1108 :: 		}                                              //end if !open_bit && close_bit
L_read_motbits201:
;TCC_5.c,1111 :: 		if(!open_bit2 && !close_bit2) atv_mot2 = 0x00; //se os bits de abertura e fechamento do motor 2 forem 0,
0x0582	0xB3E0      	BTFSC       _open_bit2, BitPos(_open_bit2+0), 1
0x0584	0xD003      	BRA         L_read_motbits204
0x0586	0xB7E1      	BTFSC       _close_bit2, BitPos(_close_bit2+0), 1
0x0588	0xD001      	BRA         L_read_motbits204
L__read_motbits245:
0x058A	0x93E1      	BCF         _atv_mot2, BitPos(_atv_mot2+0), 1
L_read_motbits204:
;TCC_5.c,1114 :: 		if(open_bit2 && !close_bit2)                   //se o bit de abertura for 1 e o de fechamento for 0...
0x058C	0xA3E0      	BTFSS       _open_bit2, BitPos(_open_bit2+0), 1
0x058E	0xD003      	BRA         L_read_motbits207
0x0590	0xB7E1      	BTFSC       _close_bit2, BitPos(_close_bit2+0), 1
0x0592	0xD001      	BRA         L_read_motbits207
L__read_motbits244:
;TCC_5.c,1116 :: 		mot_aberto2();                                //executa a abertura do motor 2
0x0594	0xDE50      	RCALL       _mot_aberto2
;TCC_5.c,1118 :: 		}                                              //end if open_bit2 && !close_bit2
L_read_motbits207:
;TCC_5.c,1120 :: 		if(!open_bit2 && close_bit2)                   //se o bit de abertura for 0 e o de fechamento for 1...
0x0596	0xB3E0      	BTFSC       _open_bit2, BitPos(_open_bit2+0), 1
0x0598	0xD003      	BRA         L_read_motbits210
0x059A	0xA7E1      	BTFSS       _close_bit2, BitPos(_close_bit2+0), 1
0x059C	0xD001      	BRA         L_read_motbits210
L__read_motbits243:
;TCC_5.c,1122 :: 		mot_fechado2();                               //executa o fechamento do motor 2
0x059E	0xDE24      	RCALL       _mot_fechado2
;TCC_5.c,1124 :: 		}                                              //end if !open_bit2 && close_bit2
L_read_motbits210:
;TCC_5.c,1127 :: 		if(!open_bit3 && !close_bit3) atv_mot3 = 0x00; //se os bits de abertura e fechamento do motor 3 forem 0,
0x05A0	0xB5E0      	BTFSC       _open_bit3, BitPos(_open_bit3+0), 1
0x05A2	0xD003      	BRA         L_read_motbits213
0x05A4	0xB9E1      	BTFSC       _close_bit3, BitPos(_close_bit3+0), 1
0x05A6	0xD001      	BRA         L_read_motbits213
L__read_motbits242:
0x05A8	0x95E1      	BCF         _atv_mot3, BitPos(_atv_mot3+0), 1
L_read_motbits213:
;TCC_5.c,1130 :: 		if(open_bit3 && !close_bit3)                   //se o bit de abertura for 1 e o de fechamento for 0...
0x05AA	0xA5E0      	BTFSS       _open_bit3, BitPos(_open_bit3+0), 1
0x05AC	0xD003      	BRA         L_read_motbits216
0x05AE	0xB9E1      	BTFSC       _close_bit3, BitPos(_close_bit3+0), 1
0x05B0	0xD001      	BRA         L_read_motbits216
L__read_motbits241:
;TCC_5.c,1132 :: 		mot_aberto3();                                //executa a abertura do motor 3
0x05B2	0xDE68      	RCALL       _mot_aberto3
;TCC_5.c,1134 :: 		}                                              //end if open_bit3 && !close_bit3
L_read_motbits216:
;TCC_5.c,1136 :: 		if(!open_bit3 && close_bit3)                   //se o bit de abertura for 0 e o de fechamento for 1...
0x05B4	0xB5E0      	BTFSC       _open_bit3, BitPos(_open_bit3+0), 1
0x05B6	0xD003      	BRA         L_read_motbits219
0x05B8	0xA9E1      	BTFSS       _close_bit3, BitPos(_close_bit3+0), 1
0x05BA	0xD001      	BRA         L_read_motbits219
L__read_motbits240:
;TCC_5.c,1138 :: 		mot_fechado3();                               //executa o fechamento do motor 3
0x05BC	0xDDEE      	RCALL       _mot_fechado3
;TCC_5.c,1140 :: 		}                                              //end if !open_bit3 && close_bit3
L_read_motbits219:
;TCC_5.c,1142 :: 		}                                                 //end read_motbits()
L_end_read_motbits:
0x05BE	0x0012      	RETURN      0
; end of _read_motbits
_num_un:
;TCC_5.c,510 :: 		void num_un()
;TCC_5.c,513 :: 		if(option==0)                                    //se option for 0 (dispenser n° 1 selecionado)
0x05C0	0x0E00      	MOVLW       0
0x05C2	0x0100      	MOVLB       0
0x05C4	0x19DD      	XORWF       _option+1, 0, 1
0x05C6	0xE102      	BNZ         L__num_un300
0x05C8	0x0E00      	MOVLW       0
0x05CA	0x19DC      	XORWF       _option, 0, 1
L__num_un300:
0x05CC	0xE13E      	BNZ         L_num_un94
;TCC_5.c,515 :: 		dig2 = num/10;                                  //dígito 2 é igual a num dividido por 10
0x05CE	0x0E0A      	MOVLW       10
0x05D0	0x6E04      	MOVWF       R4 
0x05D2	0x0E00      	MOVLW       0
0x05D4	0x6E05      	MOVWF       R5 
0x05D6	0xF000C0E7  	MOVFF       _num, R0
0x05DA	0xF001C0E8  	MOVFF       _num+1, R1
0x05DE	0xDF0E      	RCALL       _Div_16X16_U
0x05E0	0xF0EBC000  	MOVFF       R0, FLOC__num_un
0x05E4	0xF0ECC001  	MOVFF       R1, FLOC__num_un+1
0x05E8	0x0E0A      	MOVLW       10
0x05EA	0x6E04      	MOVWF       R4 
0x05EC	0x0E00      	MOVLW       0
0x05EE	0x6E05      	MOVWF       R5 
0x05F0	0xF000C0E7  	MOVFF       _num, R0
0x05F4	0xF001C0E8  	MOVFF       _num+1, R1
0x05F8	0xDF01      	RCALL       _Div_16X16_U
0x05FA	0xF000C008  	MOVFF       R8, R0
0x05FE	0xF001C009  	MOVFF       R9, R1
;TCC_5.c,516 :: 		dig1 = num%10;                                  //digito 1 é igual a sobra da divisão de num por 10
0x0602	0xF0EAC000  	MOVFF       R0, num_un_dig1_L0
;TCC_5.c,518 :: 		LCD_Chr(2,2,dig2+0x30);                         //soma digito 2 com 30 hexa para exibição no display
0x0606	0x0E02      	MOVLW       2
0x0608	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x060A	0x0E02      	MOVLW       2
0x060C	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x060E	0x0E30      	MOVLW       48
0x0610	0x25EB      	ADDWF       FLOC__num_un, 0, 1
0x0612	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0614	0xDEC4      	RCALL       _Lcd_Chr
;TCC_5.c,519 :: 		LCD_Chr_Cp (dig1+0x30);                         //soma digito 1 com 30 hexa para exibição no display
0x0616	0x0E30      	MOVLW       48
0x0618	0x25EA      	ADDWF       num_un_dig1_L0, 0, 1
0x061A	0x6FF2      	MOVWF       FARG_Lcd_Chr_CP_out_char, 1
0x061C	0xDD7E      	RCALL       _Lcd_Chr_CP
;TCC_5.c,521 :: 		if(!un) LCD_Out(2,5,hora);                      //se un for zero, exibe "hora"
0x061E	0xBFE1      	BTFSC       _un, BitPos(_un+0), 1
0x0620	0xD009      	BRA         L_num_un95
0x0622	0x0E02      	MOVLW       2
0x0624	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0626	0x0E05      	MOVLW       5
0x0628	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x062A	0x0E1A      	MOVLW       _hora
0x062C	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x062E	0x0E00      	MOVLW       hi_addr(_hora)
0x0630	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0632	0xDE76      	RCALL       _Lcd_Out
L_num_un95:
;TCC_5.c,523 :: 		if(un) LCD_Out(2,5,dia);                        //se un for um, exibe "dia"
0x0634	0xAFE1      	BTFSS       _un, BitPos(_un+0), 1
0x0636	0xD009      	BRA         L_num_un96
0x0638	0x0E02      	MOVLW       2
0x063A	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x063C	0x0E05      	MOVLW       5
0x063E	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x0640	0x0E1E      	MOVLW       _dia
0x0642	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x0644	0x0E00      	MOVLW       hi_addr(_dia)
0x0646	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0648	0xDE6B      	RCALL       _Lcd_Out
L_num_un96:
;TCC_5.c,525 :: 		}                                                //end if option==0
L_num_un94:
;TCC_5.c,528 :: 		if(option==1)                                    //se option for 1 (dispenser n°2 selecionado)
0x064A	0x0E00      	MOVLW       0
0x064C	0x19DD      	XORWF       _option+1, 0, 1
0x064E	0xE102      	BNZ         L__num_un301
0x0650	0x0E01      	MOVLW       1
0x0652	0x19DC      	XORWF       _option, 0, 1
L__num_un301:
0x0654	0xE13E      	BNZ         L_num_un97
;TCC_5.c,530 :: 		dig2 = num2/10;                                 //digito 2 é igual a num2 dividido por 10
0x0656	0x0E0A      	MOVLW       10
0x0658	0x6E04      	MOVWF       R4 
0x065A	0x0E00      	MOVLW       0
0x065C	0x6E05      	MOVWF       R5 
0x065E	0xF000C0E2  	MOVFF       _num2, R0
0x0662	0xF001C0E3  	MOVFF       _num2+1, R1
0x0666	0xDECA      	RCALL       _Div_16X16_U
0x0668	0xF0EBC000  	MOVFF       R0, FLOC__num_un
0x066C	0xF0ECC001  	MOVFF       R1, FLOC__num_un+1
0x0670	0x0E0A      	MOVLW       10
0x0672	0x6E04      	MOVWF       R4 
0x0674	0x0E00      	MOVLW       0
0x0676	0x6E05      	MOVWF       R5 
0x0678	0xF000C0E2  	MOVFF       _num2, R0
0x067C	0xF001C0E3  	MOVFF       _num2+1, R1
0x0680	0xDEBD      	RCALL       _Div_16X16_U
0x0682	0xF000C008  	MOVFF       R8, R0
0x0686	0xF001C009  	MOVFF       R9, R1
;TCC_5.c,531 :: 		dig1 = num2%10;                                 //digito 1 é igual a sobra da divisão de num2 por 10
0x068A	0xF0EAC000  	MOVFF       R0, num_un_dig1_L0
;TCC_5.c,533 :: 		LCD_Chr(2,2,dig2+0x30);                         //soma digito 2 com 30 hexa para exibição no display
0x068E	0x0E02      	MOVLW       2
0x0690	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x0692	0x0E02      	MOVLW       2
0x0694	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x0696	0x0E30      	MOVLW       48
0x0698	0x25EB      	ADDWF       FLOC__num_un, 0, 1
0x069A	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x069C	0xDE80      	RCALL       _Lcd_Chr
;TCC_5.c,534 :: 		LCD_Chr_Cp (dig1+0x30);                         //soma digito 1 com 30 hexa para exibição no display
0x069E	0x0E30      	MOVLW       48
0x06A0	0x25EA      	ADDWF       num_un_dig1_L0, 0, 1
0x06A2	0x6FF2      	MOVWF       FARG_Lcd_Chr_CP_out_char, 1
0x06A4	0xDD3A      	RCALL       _Lcd_Chr_CP
;TCC_5.c,536 :: 		if(!un2) LCD_Out(2,5,hora);                     //se un2 for zero, exibe "hora"
0x06A6	0xB1E6      	BTFSC       _un2, BitPos(_un2+0), 1
0x06A8	0xD009      	BRA         L_num_un98
0x06AA	0x0E02      	MOVLW       2
0x06AC	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x06AE	0x0E05      	MOVLW       5
0x06B0	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x06B2	0x0E1A      	MOVLW       _hora
0x06B4	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x06B6	0x0E00      	MOVLW       hi_addr(_hora)
0x06B8	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x06BA	0xDE32      	RCALL       _Lcd_Out
L_num_un98:
;TCC_5.c,538 :: 		if(un2) LCD_Out(2,5,dia);                       //se un2 for um, exibe "dia"
0x06BC	0xA1E6      	BTFSS       _un2, BitPos(_un2+0), 1
0x06BE	0xD009      	BRA         L_num_un99
0x06C0	0x0E02      	MOVLW       2
0x06C2	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x06C4	0x0E05      	MOVLW       5
0x06C6	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x06C8	0x0E1E      	MOVLW       _dia
0x06CA	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x06CC	0x0E00      	MOVLW       hi_addr(_dia)
0x06CE	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x06D0	0xDE27      	RCALL       _Lcd_Out
L_num_un99:
;TCC_5.c,540 :: 		}                                                //end if option==1
L_num_un97:
;TCC_5.c,542 :: 		if(option==2)                                    //se option for 1 (dispenser n°2 selecionado)
0x06D2	0x0E00      	MOVLW       0
0x06D4	0x19DD      	XORWF       _option+1, 0, 1
0x06D6	0xE102      	BNZ         L__num_un302
0x06D8	0x0E02      	MOVLW       2
0x06DA	0x19DC      	XORWF       _option, 0, 1
L__num_un302:
0x06DC	0xE13E      	BNZ         L_num_un100
;TCC_5.c,544 :: 		dig2 = num3/10;                                 //digito 2 é igual a num3 dividido por 10
0x06DE	0x0E0A      	MOVLW       10
0x06E0	0x6E04      	MOVWF       R4 
0x06E2	0x0E00      	MOVLW       0
0x06E4	0x6E05      	MOVWF       R5 
0x06E6	0xF000C0E4  	MOVFF       _num3, R0
0x06EA	0xF001C0E5  	MOVFF       _num3+1, R1
0x06EE	0xDE86      	RCALL       _Div_16X16_U
0x06F0	0xF0EBC000  	MOVFF       R0, FLOC__num_un
0x06F4	0xF0ECC001  	MOVFF       R1, FLOC__num_un+1
0x06F8	0x0E0A      	MOVLW       10
0x06FA	0x6E04      	MOVWF       R4 
0x06FC	0x0E00      	MOVLW       0
0x06FE	0x6E05      	MOVWF       R5 
0x0700	0xF000C0E4  	MOVFF       _num3, R0
0x0704	0xF001C0E5  	MOVFF       _num3+1, R1
0x0708	0xDE79      	RCALL       _Div_16X16_U
0x070A	0xF000C008  	MOVFF       R8, R0
0x070E	0xF001C009  	MOVFF       R9, R1
;TCC_5.c,545 :: 		dig1 = num3%10;                                 //digito 1 é igual a sobra da divisão de num3 por 10
0x0712	0xF0EAC000  	MOVFF       R0, num_un_dig1_L0
;TCC_5.c,547 :: 		LCD_Chr(2,2,dig2+0x30);                         //soma digito 2 com 30 hexa para exibição no display
0x0716	0x0E02      	MOVLW       2
0x0718	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x071A	0x0E02      	MOVLW       2
0x071C	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x071E	0x0E30      	MOVLW       48
0x0720	0x25EB      	ADDWF       FLOC__num_un, 0, 1
0x0722	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0724	0xDE3C      	RCALL       _Lcd_Chr
;TCC_5.c,548 :: 		LCD_Chr_Cp (dig1+0x30);                         //soma digito 1 com 30 hexa para exibição no display
0x0726	0x0E30      	MOVLW       48
0x0728	0x25EA      	ADDWF       num_un_dig1_L0, 0, 1
0x072A	0x6FF2      	MOVWF       FARG_Lcd_Chr_CP_out_char, 1
0x072C	0xDCF6      	RCALL       _Lcd_Chr_CP
;TCC_5.c,550 :: 		if(!un3) LCD_Out(2,5,hora);                     //se un3 for zero, exibe "hora"
0x072E	0xB7E6      	BTFSC       _un3, BitPos(_un3+0), 1
0x0730	0xD009      	BRA         L_num_un101
0x0732	0x0E02      	MOVLW       2
0x0734	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0736	0x0E05      	MOVLW       5
0x0738	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x073A	0x0E1A      	MOVLW       _hora
0x073C	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x073E	0x0E00      	MOVLW       hi_addr(_hora)
0x0740	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0742	0xDDEE      	RCALL       _Lcd_Out
L_num_un101:
;TCC_5.c,552 :: 		if(un3) LCD_Out(2,5,dia);                       //se un3 for um, exibe "dia"
0x0744	0xA7E6      	BTFSS       _un3, BitPos(_un3+0), 1
0x0746	0xD009      	BRA         L_num_un102
0x0748	0x0E02      	MOVLW       2
0x074A	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x074C	0x0E05      	MOVLW       5
0x074E	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x0750	0x0E1E      	MOVLW       _dia
0x0752	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x0754	0x0E00      	MOVLW       hi_addr(_dia)
0x0756	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0758	0xDDE3      	RCALL       _Lcd_Out
L_num_un102:
;TCC_5.c,554 :: 		}                                                //end if option==2
L_num_un100:
;TCC_5.c,556 :: 		}                                                 //end num_un()
L_end_num_un:
0x075A	0x0012      	RETURN      0
; end of _num_un
_Lcd_Init:
;__Lib_Lcd.c,84 :: 		
;__Lib_Lcd.c,86 :: 		
0x075C	0x9695      	BCF         LCD_EN_Direction, BitPos(LCD_EN_Direction+0) 
;__Lib_Lcd.c,87 :: 		
0x075E	0x9495      	BCF         LCD_RS_Direction, BitPos(LCD_RS_Direction+0) 
;__Lib_Lcd.c,88 :: 		
0x0760	0x9895      	BCF         LCD_D4_Direction, BitPos(LCD_D4_Direction+0) 
;__Lib_Lcd.c,89 :: 		
0x0762	0x9A95      	BCF         LCD_D5_Direction, BitPos(LCD_D5_Direction+0) 
;__Lib_Lcd.c,90 :: 		
0x0764	0x9C95      	BCF         LCD_D6_Direction, BitPos(LCD_D6_Direction+0) 
;__Lib_Lcd.c,91 :: 		
0x0766	0x9E95      	BCF         LCD_D7_Direction, BitPos(LCD_D7_Direction+0) 
;__Lib_Lcd.c,93 :: 		
0x0768	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,94 :: 		
0x076A	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
;__Lib_Lcd.c,95 :: 		
0x076C	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,96 :: 		
0x076E	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,97 :: 		
0x0770	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,98 :: 		
0x0772	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,100 :: 		
0x0774	0xDC83      	RCALL       _Delay_5500us
;__Lib_Lcd.c,101 :: 		
0x0776	0xDC82      	RCALL       _Delay_5500us
;__Lib_Lcd.c,102 :: 		
0x0778	0xDC81      	RCALL       _Delay_5500us
;__Lib_Lcd.c,105 :: 		
0x077A	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,106 :: 		
0x077C	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,107 :: 		
0x077E	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,108 :: 		
0x0780	0xDC7A      	RCALL       _Delay_1us
;__Lib_Lcd.c,109 :: 		
0x0782	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,110 :: 		
0x0784	0xDC7B      	RCALL       _Delay_5500us
;__Lib_Lcd.c,112 :: 		
0x0786	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,113 :: 		
0x0788	0xDC76      	RCALL       _Delay_1us
;__Lib_Lcd.c,114 :: 		
0x078A	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,115 :: 		
0x078C	0xDC77      	RCALL       _Delay_5500us
;__Lib_Lcd.c,117 :: 		
0x078E	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,118 :: 		
0x0790	0xDC72      	RCALL       _Delay_1us
;__Lib_Lcd.c,119 :: 		
0x0792	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,120 :: 		
0x0794	0xDC73      	RCALL       _Delay_5500us
;__Lib_Lcd.c,123 :: 		
0x0796	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,124 :: 		
0x0798	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,125 :: 		
0x079A	0xDC6D      	RCALL       _Delay_1us
;__Lib_Lcd.c,126 :: 		
0x079C	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,127 :: 		
0x079E	0xDC6E      	RCALL       _Delay_5500us
;__Lib_Lcd.c,130 :: 		
0x07A0	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,131 :: 		
0x07A2	0xDC69      	RCALL       _Delay_1us
;__Lib_Lcd.c,132 :: 		
0x07A4	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,134 :: 		
0x07A6	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,135 :: 		
0x07A8	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,136 :: 		
0x07AA	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,137 :: 		
0x07AC	0xDC64      	RCALL       _Delay_1us
;__Lib_Lcd.c,138 :: 		
0x07AE	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,139 :: 		
0x07B0	0xDC65      	RCALL       _Delay_5500us
;__Lib_Lcd.c,142 :: 		
0x07B2	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,143 :: 		
0x07B4	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,144 :: 		
0x07B6	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,145 :: 		
0x07B8	0xDC5E      	RCALL       _Delay_1us
;__Lib_Lcd.c,146 :: 		
0x07BA	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,148 :: 		
0x07BC	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,149 :: 		
0x07BE	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,150 :: 		
0x07C0	0xDC5A      	RCALL       _Delay_1us
;__Lib_Lcd.c,151 :: 		
0x07C2	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,152 :: 		
0x07C4	0xDC5B      	RCALL       _Delay_5500us
;__Lib_Lcd.c,155 :: 		
0x07C6	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,156 :: 		
0x07C8	0xDC56      	RCALL       _Delay_1us
;__Lib_Lcd.c,157 :: 		
0x07CA	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,159 :: 		
0x07CC	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,160 :: 		
0x07CE	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,161 :: 		
0x07D0	0xDC52      	RCALL       _Delay_1us
;__Lib_Lcd.c,162 :: 		
0x07D2	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,163 :: 		
0x07D4	0xDC53      	RCALL       _Delay_5500us
;__Lib_Lcd.c,166 :: 		
0x07D6	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,167 :: 		
0x07D8	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,168 :: 		
0x07DA	0xDC4D      	RCALL       _Delay_1us
;__Lib_Lcd.c,169 :: 		
0x07DC	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,171 :: 		
0x07DE	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,172 :: 		
0x07E0	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,173 :: 		
0x07E2	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,174 :: 		
0x07E4	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,175 :: 		
0x07E6	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,176 :: 		
0x07E8	0xDC46      	RCALL       _Delay_1us
;__Lib_Lcd.c,177 :: 		
0x07EA	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,179 :: 		
0x07EC	0xDC47      	RCALL       _Delay_5500us
;__Lib_Lcd.c,181 :: 		
0x07EE	0x0100      	MOVLB       0
0x07F0	0x8DE1      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,182 :: 		
L_end_Lcd_Init:
0x07F2	0x0012      	RETURN      0
; end of _Lcd_Init
_ler_bot:
;TCC_5.c,239 :: 		void ler_bot()
;TCC_5.c,242 :: 		if(!BOTAO1) b1_flag=0x01;                       //se botão1 for pressionado, flag do botão1 = 1
0x07F4	0xB082      	BTFSC       PORTC, 0 
0x07F6	0xD002      	BRA         L_ler_bot4
0x07F8	0x0100      	MOVLB       0
0x07FA	0x83E6      	BSF         _b1_flag, BitPos(_b1_flag+0), 1
L_ler_bot4:
;TCC_5.c,244 :: 		if(BOTAO1 && b1_flag)                           //se botão1 estiver solto e flag do botão1 = 1
0x07FC	0xA082      	BTFSS       PORTC, 0 
0x07FE	0xD074      	BRA         L_ler_bot7
0x0800	0x0100      	MOVLB       0
0x0802	0xA3E6      	BTFSS       _b1_flag, BitPos(_b1_flag+0), 1
0x0804	0xD071      	BRA         L_ler_bot7
L__ler_bot225:
;TCC_5.c,246 :: 		LCD_Cmd(_LCD_CLEAR);                           //limpa o LCD
0x0806	0x0E01      	MOVLW       1
0x0808	0x6FF3      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x080A	0xDC48      	RCALL       _Lcd_Cmd
;TCC_5.c,247 :: 		b1_flag = 0x00;                                //lmpa a flag do botão1
0x080C	0x93E6      	BCF         _b1_flag, BitPos(_b1_flag+0), 1
;TCC_5.c,248 :: 		if(!ligar)                                     //se bit ligar = 0
0x080E	0xB5E6      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x0810	0xD06B      	BRA         L_ler_bot8
;TCC_5.c,250 :: 		prog++;                                       //incrementa prog, muda a programação
0x0812	0x4BDA      	INFSNZ      _prog, 1, 1
0x0814	0x2BDB      	INCF        _prog+1, 1, 1
;TCC_5.c,251 :: 		if(prog==3)                                   //se prog = 3
0x0816	0x0E00      	MOVLW       0
0x0818	0x19DB      	XORWF       _prog+1, 0, 1
0x081A	0xE102      	BNZ         L__ler_bot259
0x081C	0x0E03      	MOVLW       3
0x081E	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot259:
0x0820	0xE163      	BNZ         L_ler_bot9
;TCC_5.c,253 :: 		prog=0x00;                                   //zera a variável prog
0x0822	0x6BDA      	CLRF        _prog, 1
0x0824	0x6BDB      	CLRF        _prog+1, 1
;TCC_5.c,254 :: 		EEPROM_Write(0x01,num);                      //grava num na EEPROM
0x0826	0x0E01      	MOVLW       1
0x0828	0x6FEA      	MOVWF       FARG_EEPROM_Write_address, 1
0x082A	0xF0EBC0E7  	MOVFF       _num, FARG_EEPROM_Write_data_
0x082E	0xDE52      	RCALL       _EEPROM_Write
;TCC_5.c,255 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0830	0x0E1A      	MOVLW       26
0x0832	0x6E0C      	MOVWF       R12, 0
0x0834	0x0EF8      	MOVLW       248
0x0836	0x6E0D      	MOVWF       R13, 0
L_ler_bot10:
0x0838	0x2E0D      	DECFSZ      R13, 1, 0
0x083A	0xD7FE      	BRA         L_ler_bot10
0x083C	0x2E0C      	DECFSZ      R12, 1, 0
0x083E	0xD7FC      	BRA         L_ler_bot10
0x0840	0x0000      	NOP
;TCC_5.c,256 :: 		EEPROM_Write(0x03,un);                       //grava un na EEPROM
0x0842	0x0E03      	MOVLW       3
0x0844	0x0100      	MOVLB       0
0x0846	0x6FEA      	MOVWF       FARG_EEPROM_Write_address, 1
0x0848	0x0E00      	MOVLW       0
0x084A	0xBFE1      	BTFSC       _un, BitPos(_un+0), 1
0x084C	0x0E01      	MOVLW       1
0x084E	0x6FEB      	MOVWF       FARG_EEPROM_Write_data_, 1
0x0850	0xDE41      	RCALL       _EEPROM_Write
;TCC_5.c,257 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0852	0x0E1A      	MOVLW       26
0x0854	0x6E0C      	MOVWF       R12, 0
0x0856	0x0EF8      	MOVLW       248
0x0858	0x6E0D      	MOVWF       R13, 0
L_ler_bot11:
0x085A	0x2E0D      	DECFSZ      R13, 1, 0
0x085C	0xD7FE      	BRA         L_ler_bot11
0x085E	0x2E0C      	DECFSZ      R12, 1, 0
0x0860	0xD7FC      	BRA         L_ler_bot11
0x0862	0x0000      	NOP
;TCC_5.c,258 :: 		EEPROM_Write(0x02,num2);                     //grava num2 na EEPROM
0x0864	0x0E02      	MOVLW       2
0x0866	0x0100      	MOVLB       0
0x0868	0x6FEA      	MOVWF       FARG_EEPROM_Write_address, 1
0x086A	0xF0EBC0E2  	MOVFF       _num2, FARG_EEPROM_Write_data_
0x086E	0xDE32      	RCALL       _EEPROM_Write
;TCC_5.c,259 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0870	0x0E1A      	MOVLW       26
0x0872	0x6E0C      	MOVWF       R12, 0
0x0874	0x0EF8      	MOVLW       248
0x0876	0x6E0D      	MOVWF       R13, 0
L_ler_bot12:
0x0878	0x2E0D      	DECFSZ      R13, 1, 0
0x087A	0xD7FE      	BRA         L_ler_bot12
0x087C	0x2E0C      	DECFSZ      R12, 1, 0
0x087E	0xD7FC      	BRA         L_ler_bot12
0x0880	0x0000      	NOP
;TCC_5.c,260 :: 		EEPROM_Write(0x04,un2);                      //grava un2 na EEPROM
0x0882	0x0E04      	MOVLW       4
0x0884	0x0100      	MOVLB       0
0x0886	0x6FEA      	MOVWF       FARG_EEPROM_Write_address, 1
0x0888	0x0E00      	MOVLW       0
0x088A	0xB1E6      	BTFSC       _un2, BitPos(_un2+0), 1
0x088C	0x0E01      	MOVLW       1
0x088E	0x6FEB      	MOVWF       FARG_EEPROM_Write_data_, 1
0x0890	0xDE21      	RCALL       _EEPROM_Write
;TCC_5.c,261 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0892	0x0E1A      	MOVLW       26
0x0894	0x6E0C      	MOVWF       R12, 0
0x0896	0x0EF8      	MOVLW       248
0x0898	0x6E0D      	MOVWF       R13, 0
L_ler_bot13:
0x089A	0x2E0D      	DECFSZ      R13, 1, 0
0x089C	0xD7FE      	BRA         L_ler_bot13
0x089E	0x2E0C      	DECFSZ      R12, 1, 0
0x08A0	0xD7FC      	BRA         L_ler_bot13
0x08A2	0x0000      	NOP
;TCC_5.c,262 :: 		EEPROM_Write(0x05,num3);                     //grava num3 na EEPROM
0x08A4	0x0E05      	MOVLW       5
0x08A6	0x0100      	MOVLB       0
0x08A8	0x6FEA      	MOVWF       FARG_EEPROM_Write_address, 1
0x08AA	0xF0EBC0E4  	MOVFF       _num3, FARG_EEPROM_Write_data_
0x08AE	0xDE12      	RCALL       _EEPROM_Write
;TCC_5.c,263 :: 		delay_ms(10);                                //espera 10 micro segundos
0x08B0	0x0E1A      	MOVLW       26
0x08B2	0x6E0C      	MOVWF       R12, 0
0x08B4	0x0EF8      	MOVLW       248
0x08B6	0x6E0D      	MOVWF       R13, 0
L_ler_bot14:
0x08B8	0x2E0D      	DECFSZ      R13, 1, 0
0x08BA	0xD7FE      	BRA         L_ler_bot14
0x08BC	0x2E0C      	DECFSZ      R12, 1, 0
0x08BE	0xD7FC      	BRA         L_ler_bot14
0x08C0	0x0000      	NOP
;TCC_5.c,264 :: 		EEPROM_Write(0x06,un3);                      //grava un3 na EEPROM
0x08C2	0x0E06      	MOVLW       6
0x08C4	0x0100      	MOVLB       0
0x08C6	0x6FEA      	MOVWF       FARG_EEPROM_Write_address, 1
0x08C8	0x0E00      	MOVLW       0
0x08CA	0xB7E6      	BTFSC       _un3, BitPos(_un3+0), 1
0x08CC	0x0E01      	MOVLW       1
0x08CE	0x6FEB      	MOVWF       FARG_EEPROM_Write_data_, 1
0x08D0	0xDE01      	RCALL       _EEPROM_Write
;TCC_5.c,265 :: 		delay_ms(10);                                //espera 10 micro segundos
0x08D2	0x0E1A      	MOVLW       26
0x08D4	0x6E0C      	MOVWF       R12, 0
0x08D6	0x0EF8      	MOVLW       248
0x08D8	0x6E0D      	MOVWF       R13, 0
L_ler_bot15:
0x08DA	0x2E0D      	DECFSZ      R13, 1, 0
0x08DC	0xD7FE      	BRA         L_ler_bot15
0x08DE	0x2E0C      	DECFSZ      R12, 1, 0
0x08E0	0xD7FC      	BRA         L_ler_bot15
0x08E2	0x0000      	NOP
;TCC_5.c,266 :: 		display=0x01;                                //bit display em 1
0x08E4	0x0100      	MOVLB       0
0x08E6	0x8DE6      	BSF         _display, BitPos(_display+0), 1
;TCC_5.c,268 :: 		}                                             //end if prog = 3
L_ler_bot9:
;TCC_5.c,270 :: 		}                                              //end if !ligar
L_ler_bot8:
;TCC_5.c,272 :: 		}                                               //end if BOTAO1 && b1_flag
L_ler_bot7:
;TCC_5.c,277 :: 		if(!BOTAO2) b2_flag=0x01;                       //se botão2 for pressionado, flag do botão2 = 1
0x08E8	0xB282      	BTFSC       PORTC, 1 
0x08EA	0xD002      	BRA         L_ler_bot16
0x08EC	0x0100      	MOVLB       0
0x08EE	0x8FE6      	BSF         _b2_flag, BitPos(_b2_flag+0), 1
L_ler_bot16:
;TCC_5.c,279 :: 		if(BOTAO2 && b2_flag)                           //se botão2 for solto e flag do botão2 for 1
0x08F0	0xA282      	BTFSS       PORTC, 1 
0x08F2	0xD047      	BRA         L_ler_bot19
0x08F4	0x0100      	MOVLB       0
0x08F6	0xAFE6      	BTFSS       _b2_flag, BitPos(_b2_flag+0), 1
0x08F8	0xD044      	BRA         L_ler_bot19
L__ler_bot224:
;TCC_5.c,281 :: 		LCD_Cmd(_LCD_CLEAR);                          //limpa LCD
0x08FA	0x0E01      	MOVLW       1
0x08FC	0x6FF3      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x08FE	0xF000EC4E  	CALL        _Lcd_Cmd, 0
;TCC_5.c,282 :: 		b2_flag    =  0x00;                           //limpa flag do botão
0x0902	0x9FE6      	BCF         _b2_flag, BitPos(_b2_flag+0), 1
;TCC_5.c,283 :: 		if(option==0)                                  //dispenser n°1
0x0904	0x0E00      	MOVLW       0
0x0906	0x19DD      	XORWF       _option+1, 0, 1
0x0908	0xE102      	BNZ         L__ler_bot260
0x090A	0x0E00      	MOVLW       0
0x090C	0x19DC      	XORWF       _option, 0, 1
L__ler_bot260:
0x090E	0xE10F      	BNZ         L_ler_bot20
;TCC_5.c,285 :: 		if(prog==1)                                   //programação de numero
0x0910	0x0E00      	MOVLW       0
0x0912	0x19DB      	XORWF       _prog+1, 0, 1
0x0914	0xE102      	BNZ         L__ler_bot261
0x0916	0x0E01      	MOVLW       1
0x0918	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot261:
0x091A	0xE102      	BNZ         L_ler_bot21
;TCC_5.c,287 :: 		num++;                                       //incrementa num
0x091C	0x4BE7      	INFSNZ      _num, 1, 1
0x091E	0x2BE8      	INCF        _num+1, 1, 1
;TCC_5.c,288 :: 		}
L_ler_bot21:
;TCC_5.c,289 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0920	0x0E00      	MOVLW       0
0x0922	0x19DB      	XORWF       _prog+1, 0, 1
0x0924	0xE102      	BNZ         L__ler_bot262
0x0926	0x0E02      	MOVLW       2
0x0928	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot262:
0x092A	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,291 :: 		un = ~un;                                   //inverte un
0x092C	0x7FE1      	BTG         _un, BitPos(_un+0), 1
;TCC_5.c,292 :: 		}                                             //end if prog==2
L_ler_bot22:
;TCC_5.c,293 :: 		}                                              //end if option==0
L_ler_bot20:
;TCC_5.c,295 :: 		if(option==1)                                  //dispenser n°2
0x092E	0x0E00      	MOVLW       0
0x0930	0x19DD      	XORWF       _option+1, 0, 1
0x0932	0xE102      	BNZ         L__ler_bot263
0x0934	0x0E01      	MOVLW       1
0x0936	0x19DC      	XORWF       _option, 0, 1
L__ler_bot263:
0x0938	0xE10F      	BNZ         L_ler_bot23
;TCC_5.c,297 :: 		if(prog==1)                                   //programação do numero
0x093A	0x0E00      	MOVLW       0
0x093C	0x19DB      	XORWF       _prog+1, 0, 1
0x093E	0xE102      	BNZ         L__ler_bot264
0x0940	0x0E01      	MOVLW       1
0x0942	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot264:
0x0944	0xE102      	BNZ         L_ler_bot24
;TCC_5.c,299 :: 		num2++;                                      //incrementa num2
0x0946	0x4BE2      	INFSNZ      _num2, 1, 1
0x0948	0x2BE3      	INCF        _num2+1, 1, 1
;TCC_5.c,300 :: 		}
L_ler_bot24:
;TCC_5.c,301 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x094A	0x0E00      	MOVLW       0
0x094C	0x19DB      	XORWF       _prog+1, 0, 1
0x094E	0xE102      	BNZ         L__ler_bot265
0x0950	0x0E02      	MOVLW       2
0x0952	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot265:
0x0954	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,303 :: 		un2 = ~un2;                                 //inverte un2
0x0956	0x71E6      	BTG         _un2, BitPos(_un2+0), 1
;TCC_5.c,304 :: 		}
L_ler_bot25:
;TCC_5.c,305 :: 		}                                              //end if option==1
L_ler_bot23:
;TCC_5.c,307 :: 		if(option==2)                                  //dispenser n°3
0x0958	0x0E00      	MOVLW       0
0x095A	0x19DD      	XORWF       _option+1, 0, 1
0x095C	0xE102      	BNZ         L__ler_bot266
0x095E	0x0E02      	MOVLW       2
0x0960	0x19DC      	XORWF       _option, 0, 1
L__ler_bot266:
0x0962	0xE10F      	BNZ         L_ler_bot26
;TCC_5.c,309 :: 		if(prog==1)                                   //programação do numero
0x0964	0x0E00      	MOVLW       0
0x0966	0x19DB      	XORWF       _prog+1, 0, 1
0x0968	0xE102      	BNZ         L__ler_bot267
0x096A	0x0E01      	MOVLW       1
0x096C	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot267:
0x096E	0xE102      	BNZ         L_ler_bot27
;TCC_5.c,311 :: 		num3++;                                      //incrementa num3
0x0970	0x4BE4      	INFSNZ      _num3, 1, 1
0x0972	0x2BE5      	INCF        _num3+1, 1, 1
;TCC_5.c,312 :: 		}
L_ler_bot27:
;TCC_5.c,313 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0974	0x0E00      	MOVLW       0
0x0976	0x19DB      	XORWF       _prog+1, 0, 1
0x0978	0xE102      	BNZ         L__ler_bot268
0x097A	0x0E02      	MOVLW       2
0x097C	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot268:
0x097E	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,315 :: 		un3 = ~un3;                                 //inverte un3
0x0980	0x77E6      	BTG         _un3, BitPos(_un3+0), 1
;TCC_5.c,316 :: 		}
L_ler_bot28:
;TCC_5.c,317 :: 		}                                              //end if option==2
L_ler_bot26:
;TCC_5.c,319 :: 		}                                               //end if BOTAO2 e b2_flag
L_ler_bot19:
;TCC_5.c,322 :: 		if(!BOTAO3) b3_flag=0x01;                       //se botão3 for pressionado, flag do botão3 = 1
0x0982	0xB482      	BTFSC       PORTC, 2 
0x0984	0xD002      	BRA         L_ler_bot29
0x0986	0x0100      	MOVLB       0
0x0988	0x8BE6      	BSF         _b3_flag, BitPos(_b3_flag+0), 1
L_ler_bot29:
;TCC_5.c,324 :: 		if(BOTAO3 && b3_flag)                           //se botão3 for solto e flag do botão3 for 1
0x098A	0xA482      	BTFSS       PORTC, 2 
0x098C	0xD04D      	BRA         L_ler_bot32
0x098E	0x0100      	MOVLB       0
0x0990	0xABE6      	BTFSS       _b3_flag, BitPos(_b3_flag+0), 1
0x0992	0xD04A      	BRA         L_ler_bot32
L__ler_bot223:
;TCC_5.c,326 :: 		LCD_Cmd(_LCD_CLEAR);                           //limpa LCD
0x0994	0x0E01      	MOVLW       1
0x0996	0x6FF3      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x0998	0xF000EC4E  	CALL        _Lcd_Cmd, 0
;TCC_5.c,327 :: 		b3_flag     =  0x00;                           //limpa flag do botão3
0x099C	0x9BE6      	BCF         _b3_flag, BitPos(_b3_flag+0), 1
;TCC_5.c,328 :: 		if(option==0)                                  //dispenser n°1
0x099E	0x0E00      	MOVLW       0
0x09A0	0x19DD      	XORWF       _option+1, 0, 1
0x09A2	0xE102      	BNZ         L__ler_bot269
0x09A4	0x0E00      	MOVLW       0
0x09A6	0x19DC      	XORWF       _option, 0, 1
L__ler_bot269:
0x09A8	0xE111      	BNZ         L_ler_bot33
;TCC_5.c,330 :: 		if(prog==1)                                   //programação do numero
0x09AA	0x0E00      	MOVLW       0
0x09AC	0x19DB      	XORWF       _prog+1, 0, 1
0x09AE	0xE102      	BNZ         L__ler_bot270
0x09B0	0x0E01      	MOVLW       1
0x09B2	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot270:
0x09B4	0xE104      	BNZ         L_ler_bot34
;TCC_5.c,332 :: 		num--;                                       //decrementa num
0x09B6	0x0E01      	MOVLW       1
0x09B8	0x5FE7      	SUBWF       _num, 1, 1
0x09BA	0x0E00      	MOVLW       0
0x09BC	0x5BE8      	SUBWFB      _num+1, 1, 1
;TCC_5.c,334 :: 		}
L_ler_bot34:
;TCC_5.c,335 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x09BE	0x0E00      	MOVLW       0
0x09C0	0x19DB      	XORWF       _prog+1, 0, 1
0x09C2	0xE102      	BNZ         L__ler_bot271
0x09C4	0x0E02      	MOVLW       2
0x09C6	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot271:
0x09C8	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,337 :: 		un = ~un;                                    //inverte un
0x09CA	0x7FE1      	BTG         _un, BitPos(_un+0), 1
;TCC_5.c,338 :: 		}
L_ler_bot35:
;TCC_5.c,339 :: 		}                                              //end if option==0
L_ler_bot33:
;TCC_5.c,341 :: 		if(option==1)                                  //dispenser n°2
0x09CC	0x0E00      	MOVLW       0
0x09CE	0x19DD      	XORWF       _option+1, 0, 1
0x09D0	0xE102      	BNZ         L__ler_bot272
0x09D2	0x0E01      	MOVLW       1
0x09D4	0x19DC      	XORWF       _option, 0, 1
L__ler_bot272:
0x09D6	0xE111      	BNZ         L_ler_bot36
;TCC_5.c,343 :: 		if(prog==1)                                   //programação do número
0x09D8	0x0E00      	MOVLW       0
0x09DA	0x19DB      	XORWF       _prog+1, 0, 1
0x09DC	0xE102      	BNZ         L__ler_bot273
0x09DE	0x0E01      	MOVLW       1
0x09E0	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot273:
0x09E2	0xE104      	BNZ         L_ler_bot37
;TCC_5.c,345 :: 		num2--;                                      //decrementa num2
0x09E4	0x0E01      	MOVLW       1
0x09E6	0x5FE2      	SUBWF       _num2, 1, 1
0x09E8	0x0E00      	MOVLW       0
0x09EA	0x5BE3      	SUBWFB      _num2+1, 1, 1
;TCC_5.c,347 :: 		}
L_ler_bot37:
;TCC_5.c,348 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x09EC	0x0E00      	MOVLW       0
0x09EE	0x19DB      	XORWF       _prog+1, 0, 1
0x09F0	0xE102      	BNZ         L__ler_bot274
0x09F2	0x0E02      	MOVLW       2
0x09F4	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot274:
0x09F6	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,350 :: 		un2 = ~un2;                                  //inverte un2
0x09F8	0x71E6      	BTG         _un2, BitPos(_un2+0), 1
;TCC_5.c,351 :: 		}
L_ler_bot38:
;TCC_5.c,352 :: 		}                                              //end if option==1
L_ler_bot36:
;TCC_5.c,354 :: 		if(option==2)                                  //dispenser n°3
0x09FA	0x0E00      	MOVLW       0
0x09FC	0x19DD      	XORWF       _option+1, 0, 1
0x09FE	0xE102      	BNZ         L__ler_bot275
0x0A00	0x0E02      	MOVLW       2
0x0A02	0x19DC      	XORWF       _option, 0, 1
L__ler_bot275:
0x0A04	0xE111      	BNZ         L_ler_bot39
;TCC_5.c,356 :: 		if(prog==1)                                   //programação do número
0x0A06	0x0E00      	MOVLW       0
0x0A08	0x19DB      	XORWF       _prog+1, 0, 1
0x0A0A	0xE102      	BNZ         L__ler_bot276
0x0A0C	0x0E01      	MOVLW       1
0x0A0E	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot276:
0x0A10	0xE104      	BNZ         L_ler_bot40
;TCC_5.c,358 :: 		num3--;                                      //decrementa num3
0x0A12	0x0E01      	MOVLW       1
0x0A14	0x5FE4      	SUBWF       _num3, 1, 1
0x0A16	0x0E00      	MOVLW       0
0x0A18	0x5BE5      	SUBWFB      _num3+1, 1, 1
;TCC_5.c,360 :: 		}
L_ler_bot40:
;TCC_5.c,361 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0A1A	0x0E00      	MOVLW       0
0x0A1C	0x19DB      	XORWF       _prog+1, 0, 1
0x0A1E	0xE102      	BNZ         L__ler_bot277
0x0A20	0x0E02      	MOVLW       2
0x0A22	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot277:
0x0A24	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,363 :: 		un3 = ~un3;                                  //inverte un3
0x0A26	0x77E6      	BTG         _un3, BitPos(_un3+0), 1
;TCC_5.c,364 :: 		}
L_ler_bot41:
;TCC_5.c,365 :: 		}                                              //end if option==2
L_ler_bot39:
;TCC_5.c,367 :: 		}                                               //end if botão3 e b3_flag
L_ler_bot32:
;TCC_5.c,370 :: 		if(!BOTAO4) b4_flag=0x01;                       //se botão4 for pressionado, flag do botão4 = 1
0x0A28	0xB882      	BTFSC       PORTC, 4 
0x0A2A	0xD002      	BRA         L_ler_bot42
0x0A2C	0x0100      	MOVLB       0
0x0A2E	0x89E6      	BSF         _b4_flag, BitPos(_b4_flag+0), 1
L_ler_bot42:
;TCC_5.c,372 :: 		if(BOTAO4 && b4_flag)                           //se botão4 for solto e flag do botão4 for 1
0x0A30	0xA882      	BTFSS       PORTC, 4 
0x0A32	0xD02A      	BRA         L_ler_bot45
0x0A34	0x0100      	MOVLB       0
0x0A36	0xA9E6      	BTFSS       _b4_flag, BitPos(_b4_flag+0), 1
0x0A38	0xD027      	BRA         L_ler_bot45
L__ler_bot222:
;TCC_5.c,374 :: 		LCD_Cmd(_LCD_CLEAR);                          //limpa LCD
0x0A3A	0x0E01      	MOVLW       1
0x0A3C	0x6FF3      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x0A3E	0xF000EC4E  	CALL        _Lcd_Cmd, 0
;TCC_5.c,375 :: 		b4_flag    =  0x00;                           //limpa flag do botão4
0x0A42	0x99E6      	BCF         _b4_flag, BitPos(_b4_flag+0), 1
;TCC_5.c,376 :: 		if(num!=0 || num2!=0 || num3)                  //se num, num2 ou num3 for diferente 0
0x0A44	0x0E00      	MOVLW       0
0x0A46	0x19E8      	XORWF       _num+1, 0, 1
0x0A48	0xE102      	BNZ         L__ler_bot278
0x0A4A	0x0E00      	MOVLW       0
0x0A4C	0x19E7      	XORWF       _num, 0, 1
L__ler_bot278:
0x0A4E	0xE10A      	BNZ         L__ler_bot221
0x0A50	0x0E00      	MOVLW       0
0x0A52	0x19E3      	XORWF       _num2+1, 0, 1
0x0A54	0xE102      	BNZ         L__ler_bot279
0x0A56	0x0E00      	MOVLW       0
0x0A58	0x19E2      	XORWF       _num2, 0, 1
L__ler_bot279:
0x0A5A	0xE104      	BNZ         L__ler_bot221
0x0A5C	0x51E4      	MOVF        _num3, 0, 1
0x0A5E	0x11E5      	IORWF       _num3+1, 0, 1
0x0A60	0xE101      	BNZ         L__ler_bot221
0x0A62	0xD012      	BRA         L_ler_bot48
L__ler_bot221:
;TCC_5.c,378 :: 		if(prog==0)                                   //se prog = 0
0x0A64	0x0E00      	MOVLW       0
0x0A66	0x19DB      	XORWF       _prog+1, 0, 1
0x0A68	0xE102      	BNZ         L__ler_bot280
0x0A6A	0x0E00      	MOVLW       0
0x0A6C	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot280:
0x0A6E	0xE10C      	BNZ         L_ler_bot49
;TCC_5.c,380 :: 		if(!ligar)                                   //se bit de ligar = 0 (desligado)
0x0A70	0xB5E6      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x0A72	0xD006      	BRA         L_ler_bot50
;TCC_5.c,382 :: 		temp =0x00;                                 //zera temp
0x0A74	0x6BDE      	CLRF        _temp, 1
0x0A76	0x6BDF      	CLRF        _temp+1, 1
;TCC_5.c,383 :: 		temp2=0x00;                                 //zera temp2
0x0A78	0x6BD8      	CLRF        _temp2, 1
0x0A7A	0x6BD9      	CLRF        _temp2+1, 1
;TCC_5.c,384 :: 		temp3=0x00;                                 //zera temp3
0x0A7C	0x6A56      	CLRF        _temp3 
0x0A7E	0x6A57      	CLRF        _temp3+1 
;TCC_5.c,386 :: 		}                                            //end if !ligar
L_ler_bot50:
;TCC_5.c,387 :: 		ligar = ~ligar;                              //inverte ligar
0x0A80	0x75E6      	BTG         _ligar, BitPos(_ligar+0), 1
;TCC_5.c,388 :: 		if(!ligar) display2 = 0x01;                  //se ligar for 0, bit display2 = 1
0x0A82	0xB5E6      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x0A84	0xD001      	BRA         L_ler_bot51
0x0A86	0x8FE0      	BSF         _display2, BitPos(_display2+0), 1
L_ler_bot51:
;TCC_5.c,390 :: 		}                                             //end if prog==0
L_ler_bot49:
;TCC_5.c,392 :: 		}                                              //end if num!=0 || num2!=0
L_ler_bot48:
;TCC_5.c,394 :: 		}                                               //end if BOTAO4 && b4_flag
L_ler_bot45:
0x0A88	0x0100      	MOVLB       0
;TCC_5.c,396 :: 		if(!un)                                         //se un = 0
0x0A8A	0xBFE1      	BTFSC       _un, BitPos(_un+0), 1
0x0A8C	0xD004      	BRA         L_ler_bot52
;TCC_5.c,398 :: 		mult = num * 1;                                //mult é num * 3600 (hora)
0x0A8E	0xF058C0E7  	MOVFF       _num, _mult
0x0A92	0xF059C0E8  	MOVFF       _num+1, _mult+1
;TCC_5.c,399 :: 		}
L_ler_bot52:
;TCC_5.c,400 :: 		if(un)                                          //se un = 1
0x0A96	0xAFE1      	BTFSS       _un, BitPos(_un+0), 1
0x0A98	0xD00D      	BRA         L_ler_bot53
;TCC_5.c,402 :: 		mult = num * 5;                                //mult é num * 86400 (dia)
0x0A9A	0xF000C0E7  	MOVFF       _num, R0
0x0A9E	0xF001C0E8  	MOVFF       _num+1, R1
0x0AA2	0x0E05      	MOVLW       5
0x0AA4	0x6E04      	MOVWF       R4 
0x0AA6	0x0E00      	MOVLW       0
0x0AA8	0x6E05      	MOVWF       R5 
0x0AAA	0xDD33      	RCALL       _Mul_16X16_U
0x0AAC	0xF058C000  	MOVFF       R0, _mult
0x0AB0	0xF059C001  	MOVFF       R1, _mult+1
;TCC_5.c,403 :: 		}
L_ler_bot53:
;TCC_5.c,405 :: 		if(!un2)                                        //se un2 = 0
0x0AB4	0xB1E6      	BTFSC       _un2, BitPos(_un2+0), 1
0x0AB6	0xD004      	BRA         L_ler_bot54
;TCC_5.c,407 :: 		mult2 = num2 * 1;                              //mult2 é num2 * 3600 (hora)
0x0AB8	0xF052C0E2  	MOVFF       _num2, _mult2
0x0ABC	0xF053C0E3  	MOVFF       _num2+1, _mult2+1
;TCC_5.c,408 :: 		}
L_ler_bot54:
;TCC_5.c,409 :: 		if(un2)                                         //se un2 = 1
0x0AC0	0xA1E6      	BTFSS       _un2, BitPos(_un2+0), 1
0x0AC2	0xD00D      	BRA         L_ler_bot55
;TCC_5.c,411 :: 		mult2 = num2 * 5;                              //mult2 é num2 * 86400 (dia)
0x0AC4	0xF000C0E2  	MOVFF       _num2, R0
0x0AC8	0xF001C0E3  	MOVFF       _num2+1, R1
0x0ACC	0x0E05      	MOVLW       5
0x0ACE	0x6E04      	MOVWF       R4 
0x0AD0	0x0E00      	MOVLW       0
0x0AD2	0x6E05      	MOVWF       R5 
0x0AD4	0xDD1E      	RCALL       _Mul_16X16_U
0x0AD6	0xF052C000  	MOVFF       R0, _mult2
0x0ADA	0xF053C001  	MOVFF       R1, _mult2+1
;TCC_5.c,412 :: 		}
L_ler_bot55:
;TCC_5.c,414 :: 		if(!un3)                                        //se un3 = 0
0x0ADE	0xB7E6      	BTFSC       _un3, BitPos(_un3+0), 1
0x0AE0	0xD004      	BRA         L_ler_bot56
;TCC_5.c,416 :: 		mult3 = num3 * 1;                              //mult3 é num3 * 3600 (hora)
0x0AE2	0xF054C0E4  	MOVFF       _num3, _mult3
0x0AE6	0xF055C0E5  	MOVFF       _num3+1, _mult3+1
;TCC_5.c,417 :: 		}
L_ler_bot56:
;TCC_5.c,418 :: 		if(un3)                                         //se un3 = 1
0x0AEA	0xA7E6      	BTFSS       _un3, BitPos(_un3+0), 1
0x0AEC	0xD00D      	BRA         L_ler_bot57
;TCC_5.c,420 :: 		mult3 = num3 * 5;                              //mult3 é num3 * 86400 (dia)
0x0AEE	0xF000C0E4  	MOVFF       _num3, R0
0x0AF2	0xF001C0E5  	MOVFF       _num3+1, R1
0x0AF6	0x0E05      	MOVLW       5
0x0AF8	0x6E04      	MOVWF       R4 
0x0AFA	0x0E00      	MOVLW       0
0x0AFC	0x6E05      	MOVWF       R5 
0x0AFE	0xDD09      	RCALL       _Mul_16X16_U
0x0B00	0xF054C000  	MOVFF       R0, _mult3
0x0B04	0xF055C001  	MOVFF       R1, _mult3+1
;TCC_5.c,421 :: 		}
L_ler_bot57:
;TCC_5.c,424 :: 		if(!BOTAO5) b5_flag = 0x01;                     //se botão5 for pressionado, flag do botão5 = 1
0x0B08	0xAA82      	BTFSS       PORTC, 5 
0x0B0A	0x81E1      	BSF         _b5_flag, BitPos(_b5_flag+0), 1
L_ler_bot58:
;TCC_5.c,426 :: 		if(BOTAO5 && b5_flag)                           //se botão5 for solto e flag do botão5 for 1
0x0B0C	0xAA82      	BTFSS       PORTC, 5 
0x0B0E	0xD017      	BRA         L_ler_bot61
0x0B10	0xA1E1      	BTFSS       _b5_flag, BitPos(_b5_flag+0), 1
0x0B12	0xD015      	BRA         L_ler_bot61
L__ler_bot220:
;TCC_5.c,428 :: 		LCD_Cmd(_LCD_CLEAR);                           //limpa LCD
0x0B14	0x0E01      	MOVLW       1
0x0B16	0x6FF3      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x0B18	0xF000EC4E  	CALL        _Lcd_Cmd, 0
;TCC_5.c,429 :: 		b5_flag = 0x00;                                //limpa flag do botão5
0x0B1C	0x91E1      	BCF         _b5_flag, BitPos(_b5_flag+0), 1
;TCC_5.c,430 :: 		if(prog != 0)                                  //se prog for diferente de 0
0x0B1E	0x0E00      	MOVLW       0
0x0B20	0x19DB      	XORWF       _prog+1, 0, 1
0x0B22	0xE102      	BNZ         L__ler_bot281
0x0B24	0x0E00      	MOVLW       0
0x0B26	0x19DA      	XORWF       _prog, 0, 1
L__ler_bot281:
0x0B28	0xE00A      	BZ          L_ler_bot62
;TCC_5.c,432 :: 		option++;                                     //incrementa option
0x0B2A	0x4BDC      	INFSNZ      _option, 1, 1
0x0B2C	0x2BDD      	INCF        _option+1, 1, 1
;TCC_5.c,433 :: 		if(option == 3) option=0x00;                  //se option for 3, option = 0
0x0B2E	0x0E00      	MOVLW       0
0x0B30	0x19DD      	XORWF       _option+1, 0, 1
0x0B32	0xE102      	BNZ         L__ler_bot282
0x0B34	0x0E03      	MOVLW       3
0x0B36	0x19DC      	XORWF       _option, 0, 1
L__ler_bot282:
0x0B38	0xE102      	BNZ         L_ler_bot63
0x0B3A	0x6BDC      	CLRF        _option, 1
0x0B3C	0x6BDD      	CLRF        _option+1, 1
L_ler_bot63:
;TCC_5.c,434 :: 		}
L_ler_bot62:
;TCC_5.c,435 :: 		}                                               //end if BOTAO5 && b5_flag
L_ler_bot61:
;TCC_5.c,437 :: 		}                                                 //end ler_bot()
L_end_ler_bot:
0x0B3E	0x0012      	RETURN      0
; end of _ler_bot
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0B40	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0B42	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0B46	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0B48	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0B4A	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0B4C	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0B4E	0x0012      	RETURN      0
; end of ___CC2DW
_EEPROM_Read:
;__Lib_EEPROM_256.c,7 :: 		
;__Lib_EEPROM_256.c,9 :: 		
0x0B50	0x9CA6      	BCF         EECON1, 6 
;__Lib_EEPROM_256.c,10 :: 		
0x0B52	0xFFA9C0E9  	MOVFF       FARG_EEPROM_Read_address, EEADR
;__Lib_EEPROM_256.c,11 :: 		
0x0B56	0x9EA6      	BCF         EECON1, 7 
;__Lib_EEPROM_256.c,12 :: 		
0x0B58	0x80A6      	BSF         EECON1, 0 
;__Lib_EEPROM_256.c,14 :: 		
0x0B5A	0xF000CFA8  	MOVFF       EEDATA, R0
;__Lib_EEPROM_256.c,16 :: 		
L_end_EEPROM_Read:
0x0B5E	0x0012      	RETURN      0
; end of _EEPROM_Read
_disp:
;TCC_5.c,442 :: 		void disp()
;TCC_5.c,444 :: 		if(!ligar && prog==0)                           //se ligar for 0 e prog for 0
0x0B60	0x0100      	MOVLB       0
0x0B62	0xB5E6      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x0B64	0xD06D      	BRA         L_disp66
0x0B66	0x0E00      	MOVLW       0
0x0B68	0x19DB      	XORWF       _prog+1, 0, 1
0x0B6A	0xE102      	BNZ         L__disp284
0x0B6C	0x0E00      	MOVLW       0
0x0B6E	0x19DA      	XORWF       _prog, 0, 1
L__disp284:
0x0B70	0xE167      	BNZ         L_disp66
L__disp229:
;TCC_5.c,446 :: 		if(!display && !display2)                      //se os bits diplay e display2 forem 0
0x0B72	0xBDE6      	BTFSC       _display, BitPos(_display+0), 1
0x0B74	0xD017      	BRA         L_disp69
0x0B76	0xBFE0      	BTFSC       _display2, BitPos(_display2+0), 1
0x0B78	0xD015      	BRA         L_disp69
L__disp228:
;TCC_5.c,448 :: 		LCD_Out(1,1,"  DISPENSER DE  ");             //exibe "DISPENSER DE"
0x0B7A	0x0E01      	MOVLW       1
0x0B7C	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0B7E	0x0E01      	MOVLW       1
0x0B80	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x0B82	0x0E8D      	MOVLW       ?lstr1_TCC_5
0x0B84	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x0B86	0x0E00      	MOVLW       hi_addr(?lstr1_TCC_5)
0x0B88	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0B8A	0xF001EC90  	CALL        _Lcd_Out, 0
;TCC_5.c,449 :: 		LCD_Out(2,1,"    REMEDIOS    ");             //      "  REMEDIOS  "
0x0B8E	0x0E02      	MOVLW       2
0x0B90	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0B92	0x0E01      	MOVLW       1
0x0B94	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x0B96	0x0E9E      	MOVLW       ?lstr2_TCC_5
0x0B98	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x0B9A	0x0E00      	MOVLW       hi_addr(?lstr2_TCC_5)
0x0B9C	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0B9E	0xF001EC90  	CALL        _Lcd_Out, 0
;TCC_5.c,450 :: 		}
0x0BA2	0xD04E      	BRA         L_disp70
L_disp69:
;TCC_5.c,453 :: 		if(display && !display2)                      //se bits display for 1 e display2 for 0
0x0BA4	0xADE6      	BTFSS       _display, BitPos(_display+0), 1
0x0BA6	0xD025      	BRA         L_disp73
0x0BA8	0xBFE0      	BTFSC       _display2, BitPos(_display2+0), 1
0x0BAA	0xD023      	BRA         L_disp73
L__disp227:
;TCC_5.c,455 :: 		display=0x00;                                //limpa bit display
0x0BAC	0x9DE6      	BCF         _display, BitPos(_display+0), 1
;TCC_5.c,456 :: 		LCD_Out(1,1,"ETEC LAURO GOMES");             //exibe "ETEC LAURO GOMES"
0x0BAE	0x0E01      	MOVLW       1
0x0BB0	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0BB2	0x0E01      	MOVLW       1
0x0BB4	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x0BB6	0x0EAF      	MOVLW       ?lstr3_TCC_5
0x0BB8	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x0BBA	0x0E00      	MOVLW       hi_addr(?lstr3_TCC_5)
0x0BBC	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0BBE	0xF001EC90  	CALL        _Lcd_Out, 0
;TCC_5.c,457 :: 		LCD_Out(2,1,"  3A MECA 2021  ");             //      "  3A MECA 2021  "
0x0BC2	0x0E02      	MOVLW       2
0x0BC4	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0BC6	0x0E01      	MOVLW       1
0x0BC8	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x0BCA	0x0E5A      	MOVLW       ?lstr4_TCC_5
0x0BCC	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x0BCE	0x0E00      	MOVLW       hi_addr(?lstr4_TCC_5)
0x0BD0	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0BD2	0xF001EC90  	CALL        _Lcd_Out, 0
;TCC_5.c,458 :: 		delay_ms(1000);                              //espera 1 segundo
0x0BD6	0x0E0B      	MOVLW       11
0x0BD8	0x6E0B      	MOVWF       R11, 0
0x0BDA	0x0E26      	MOVLW       38
0x0BDC	0x6E0C      	MOVWF       R12, 0
0x0BDE	0x0E5D      	MOVLW       93
0x0BE0	0x6E0D      	MOVWF       R13, 0
L_disp74:
0x0BE2	0x2E0D      	DECFSZ      R13, 1, 0
0x0BE4	0xD7FE      	BRA         L_disp74
0x0BE6	0x2E0C      	DECFSZ      R12, 1, 0
0x0BE8	0xD7FC      	BRA         L_disp74
0x0BEA	0x2E0B      	DECFSZ      R11, 1, 0
0x0BEC	0xD7FA      	BRA         L_disp74
0x0BEE	0x0000      	NOP
0x0BF0	0x0000      	NOP
;TCC_5.c,459 :: 		}
L_disp73:
;TCC_5.c,460 :: 		if(!display && display2)                      //se os bits display for 0 e display2 for 1
0x0BF2	0xBDE6      	BTFSC       _display, BitPos(_display+0), 1
0x0BF4	0xD025      	BRA         L_disp77
0x0BF6	0xAFE0      	BTFSS       _display2, BitPos(_display2+0), 1
0x0BF8	0xD023      	BRA         L_disp77
L__disp226:
;TCC_5.c,462 :: 		display2=0x00;                               //limpa bit display2
0x0BFA	0x9FE0      	BCF         _display2, BitPos(_display2+0), 1
;TCC_5.c,463 :: 		LCD_Out(1,1,"     PARANDO    ");             //exibe "     PARANDO    "
0x0BFC	0x0E01      	MOVLW       1
0x0BFE	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0C00	0x0E01      	MOVLW       1
0x0C02	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x0C04	0x0E6B      	MOVLW       ?lstr5_TCC_5
0x0C06	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x0C08	0x0E00      	MOVLW       hi_addr(?lstr5_TCC_5)
0x0C0A	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0C0C	0xF001EC90  	CALL        _Lcd_Out, 0
;TCC_5.c,464 :: 		LCD_Out(2,1,"     CONTAGEM   ");             //      "     CONTAGEM   "
0x0C10	0x0E02      	MOVLW       2
0x0C12	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0C14	0x0E01      	MOVLW       1
0x0C16	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x0C18	0x0E7C      	MOVLW       ?lstr6_TCC_5
0x0C1A	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x0C1C	0x0E00      	MOVLW       hi_addr(?lstr6_TCC_5)
0x0C1E	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0C20	0xF001EC90  	CALL        _Lcd_Out, 0
;TCC_5.c,465 :: 		delay_ms(1000);                              //espera 1 segundo
0x0C24	0x0E0B      	MOVLW       11
0x0C26	0x6E0B      	MOVWF       R11, 0
0x0C28	0x0E26      	MOVLW       38
0x0C2A	0x6E0C      	MOVWF       R12, 0
0x0C2C	0x0E5D      	MOVLW       93
0x0C2E	0x6E0D      	MOVWF       R13, 0
L_disp78:
0x0C30	0x2E0D      	DECFSZ      R13, 1, 0
0x0C32	0xD7FE      	BRA         L_disp78
0x0C34	0x2E0C      	DECFSZ      R12, 1, 0
0x0C36	0xD7FC      	BRA         L_disp78
0x0C38	0x2E0B      	DECFSZ      R11, 1, 0
0x0C3A	0xD7FA      	BRA         L_disp78
0x0C3C	0x0000      	NOP
0x0C3E	0x0000      	NOP
;TCC_5.c,466 :: 		}
L_disp77:
;TCC_5.c,467 :: 		}                                              //end else
L_disp70:
;TCC_5.c,468 :: 		}                                               //end if !ligar && prog==0
L_disp66:
;TCC_5.c,470 :: 		if(prog==1)                                     //programação de numeros
0x0C40	0x0E00      	MOVLW       0
0x0C42	0x19DB      	XORWF       _prog+1, 0, 1
0x0C44	0xE102      	BNZ         L__disp285
0x0C46	0x0E01      	MOVLW       1
0x0C48	0x19DA      	XORWF       _prog, 0, 1
L__disp285:
0x0C4A	0xE135      	BNZ         L_disp79
;TCC_5.c,472 :: 		LCD_Out(1,1,"PROGRAME NUMERO:");               //exibe "PROGRAME NUMERO:
0x0C4C	0x0E01      	MOVLW       1
0x0C4E	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0C50	0x0E01      	MOVLW       1
0x0C52	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x0C54	0x0E22      	MOVLW       ?lstr7_TCC_5
0x0C56	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x0C58	0x0E00      	MOVLW       hi_addr(?lstr7_TCC_5)
0x0C5A	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0C5C	0xF001EC90  	CALL        _Lcd_Out, 0
;TCC_5.c,473 :: 		num_un();                                      //executa num_un
0x0C60	0xDCAF      	RCALL       _num_un
;TCC_5.c,474 :: 		if(option==0) LCD_Chr(2,14,'1');               //se option for 0, exibe "1"
0x0C62	0x0E00      	MOVLW       0
0x0C64	0x19DD      	XORWF       _option+1, 0, 1
0x0C66	0xE102      	BNZ         L__disp286
0x0C68	0x0E00      	MOVLW       0
0x0C6A	0x19DC      	XORWF       _option, 0, 1
L__disp286:
0x0C6C	0xE108      	BNZ         L_disp80
0x0C6E	0x0E02      	MOVLW       2
0x0C70	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x0C72	0x0E0E      	MOVLW       14
0x0C74	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x0C76	0x0E31      	MOVLW       49
0x0C78	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0C7A	0xF001ECCF  	CALL        _Lcd_Chr, 0
L_disp80:
;TCC_5.c,475 :: 		if(option==1) LCD_Chr(2,14,'2');               //se option for 1, exibe "2"
0x0C7E	0x0E00      	MOVLW       0
0x0C80	0x19DD      	XORWF       _option+1, 0, 1
0x0C82	0xE102      	BNZ         L__disp287
0x0C84	0x0E01      	MOVLW       1
0x0C86	0x19DC      	XORWF       _option, 0, 1
L__disp287:
0x0C88	0xE108      	BNZ         L_disp81
0x0C8A	0x0E02      	MOVLW       2
0x0C8C	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x0C8E	0x0E0E      	MOVLW       14
0x0C90	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x0C92	0x0E32      	MOVLW       50
0x0C94	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0C96	0xF001ECCF  	CALL        _Lcd_Chr, 0
L_disp81:
;TCC_5.c,476 :: 		if(option==2) LCD_Chr(2,14,'3');              //se option for 2, exibe "3"
0x0C9A	0x0E00      	MOVLW       0
0x0C9C	0x19DD      	XORWF       _option+1, 0, 1
0x0C9E	0xE102      	BNZ         L__disp288
0x0CA0	0x0E02      	MOVLW       2
0x0CA2	0x19DC      	XORWF       _option, 0, 1
L__disp288:
0x0CA4	0xE108      	BNZ         L_disp82
0x0CA6	0x0E02      	MOVLW       2
0x0CA8	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x0CAA	0x0E0E      	MOVLW       14
0x0CAC	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x0CAE	0x0E33      	MOVLW       51
0x0CB0	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0CB2	0xF001ECCF  	CALL        _Lcd_Chr, 0
L_disp82:
;TCC_5.c,477 :: 		}
L_disp79:
;TCC_5.c,479 :: 		if(prog==2)                                     //se prog for 2
0x0CB6	0x0E00      	MOVLW       0
0x0CB8	0x19DB      	XORWF       _prog+1, 0, 1
0x0CBA	0xE102      	BNZ         L__disp289
0x0CBC	0x0E02      	MOVLW       2
0x0CBE	0x19DA      	XORWF       _prog, 0, 1
L__disp289:
0x0CC0	0xE135      	BNZ         L_disp83
;TCC_5.c,481 :: 		LCD_Out(1,1,"PROGRAME Un.:");                  //exibe "PROGRAME Un.:"
0x0CC2	0x0E01      	MOVLW       1
0x0CC4	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0CC6	0x0E01      	MOVLW       1
0x0CC8	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x0CCA	0x0E33      	MOVLW       ?lstr8_TCC_5
0x0CCC	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x0CCE	0x0E00      	MOVLW       hi_addr(?lstr8_TCC_5)
0x0CD0	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0CD2	0xF001EC90  	CALL        _Lcd_Out, 0
;TCC_5.c,482 :: 		num_un();                                      //executa num_un
0x0CD6	0xDC74      	RCALL       _num_un
;TCC_5.c,483 :: 		if(option==0) LCD_Chr(2,14,'1');               //se option for 0, exibe "1"
0x0CD8	0x0E00      	MOVLW       0
0x0CDA	0x19DD      	XORWF       _option+1, 0, 1
0x0CDC	0xE102      	BNZ         L__disp290
0x0CDE	0x0E00      	MOVLW       0
0x0CE0	0x19DC      	XORWF       _option, 0, 1
L__disp290:
0x0CE2	0xE108      	BNZ         L_disp84
0x0CE4	0x0E02      	MOVLW       2
0x0CE6	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x0CE8	0x0E0E      	MOVLW       14
0x0CEA	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x0CEC	0x0E31      	MOVLW       49
0x0CEE	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0CF0	0xF001ECCF  	CALL        _Lcd_Chr, 0
L_disp84:
;TCC_5.c,484 :: 		if(option==1) LCD_Chr(2,14,'2');               //se option for 1, exibe "2"
0x0CF4	0x0E00      	MOVLW       0
0x0CF6	0x19DD      	XORWF       _option+1, 0, 1
0x0CF8	0xE102      	BNZ         L__disp291
0x0CFA	0x0E01      	MOVLW       1
0x0CFC	0x19DC      	XORWF       _option, 0, 1
L__disp291:
0x0CFE	0xE108      	BNZ         L_disp85
0x0D00	0x0E02      	MOVLW       2
0x0D02	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x0D04	0x0E0E      	MOVLW       14
0x0D06	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x0D08	0x0E32      	MOVLW       50
0x0D0A	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0D0C	0xF001ECCF  	CALL        _Lcd_Chr, 0
L_disp85:
;TCC_5.c,485 :: 		if(option==2) LCD_Chr(2,14,'3');              //se option for 2, exibe "3"
0x0D10	0x0E00      	MOVLW       0
0x0D12	0x19DD      	XORWF       _option+1, 0, 1
0x0D14	0xE102      	BNZ         L__disp292
0x0D16	0x0E02      	MOVLW       2
0x0D18	0x19DC      	XORWF       _option, 0, 1
L__disp292:
0x0D1A	0xE108      	BNZ         L_disp86
0x0D1C	0x0E02      	MOVLW       2
0x0D1E	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x0D20	0x0E0E      	MOVLW       14
0x0D22	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x0D24	0x0E33      	MOVLW       51
0x0D26	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0D28	0xF001ECCF  	CALL        _Lcd_Chr, 0
L_disp86:
;TCC_5.c,486 :: 		}
L_disp83:
;TCC_5.c,488 :: 		if(ligar)                                       //se ligar for 1 (ligado)
0x0D2C	0xA5E6      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x0D2E	0xD052      	BRA         L_disp87
;TCC_5.c,490 :: 		LCD_Out(1,1,"CONTANDO:   DISP");               //exibe "CONTANDO:   DISP";
0x0D30	0x0E01      	MOVLW       1
0x0D32	0x6FED      	MOVWF       FARG_Lcd_Out_row, 1
0x0D34	0x0E01      	MOVLW       1
0x0D36	0x6FEE      	MOVWF       FARG_Lcd_Out_column, 1
0x0D38	0x0E41      	MOVLW       ?lstr9_TCC_5
0x0D3A	0x6FEF      	MOVWF       FARG_Lcd_Out_text, 1
0x0D3C	0x0E00      	MOVLW       hi_addr(?lstr9_TCC_5)
0x0D3E	0x6FF0      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0D40	0xF001EC90  	CALL        _Lcd_Out, 0
;TCC_5.c,491 :: 		if(temp_disp>20) temp_disp=0x00;               //se temp_disp for maior que 20, zera temp_disp
0x0D44	0x0E00      	MOVLW       0
0x0D46	0x6E00      	MOVWF       R0 
0x0D48	0x5019      	MOVF        _temp_disp+1, 0 
0x0D4A	0x5C00      	SUBWF       R0, 0 
0x0D4C	0xE102      	BNZ         L__disp293
0x0D4E	0x5018      	MOVF        _temp_disp, 0 
0x0D50	0x0814      	SUBLW       20
L__disp293:
0x0D52	0xE202      	BC          L_disp88
0x0D54	0x6A18      	CLRF        _temp_disp 
0x0D56	0x6A19      	CLRF        _temp_disp+1 
L_disp88:
;TCC_5.c,492 :: 		if(temp_disp == 20)                            //se temp_disp for 20 (2 segundos)
0x0D58	0x0E00      	MOVLW       0
0x0D5A	0x1819      	XORWF       _temp_disp+1, 0 
0x0D5C	0xE102      	BNZ         L__disp294
0x0D5E	0x0E14      	MOVLW       20
0x0D60	0x1818      	XORWF       _temp_disp, 0 
L__disp294:
0x0D62	0xE136      	BNZ         L_disp89
;TCC_5.c,494 :: 		temp_disp=0x00;                               //zera temp_disp
0x0D64	0x6A18      	CLRF        _temp_disp 
0x0D66	0x6A19      	CLRF        _temp_disp+1 
;TCC_5.c,495 :: 		option++;                                     //incrementa option
0x0D68	0x4BDC      	INFSNZ      _option, 1, 1
0x0D6A	0x2BDD      	INCF        _option+1, 1, 1
;TCC_5.c,496 :: 		if(option == 3) option=0x00;                  //se option for 3, option = 0
0x0D6C	0x0E00      	MOVLW       0
0x0D6E	0x19DD      	XORWF       _option+1, 0, 1
0x0D70	0xE102      	BNZ         L__disp295
0x0D72	0x0E03      	MOVLW       3
0x0D74	0x19DC      	XORWF       _option, 0, 1
L__disp295:
0x0D76	0xE102      	BNZ         L_disp90
0x0D78	0x6BDC      	CLRF        _option, 1
0x0D7A	0x6BDD      	CLRF        _option+1, 1
L_disp90:
;TCC_5.c,497 :: 		if(option==0) LCD_Chr(2,14,'1');              //se option for 0, exibe "1"
0x0D7C	0x0E00      	MOVLW       0
0x0D7E	0x19DD      	XORWF       _option+1, 0, 1
0x0D80	0xE102      	BNZ         L__disp296
0x0D82	0x0E00      	MOVLW       0
0x0D84	0x19DC      	XORWF       _option, 0, 1
L__disp296:
0x0D86	0xE108      	BNZ         L_disp91
0x0D88	0x0E02      	MOVLW       2
0x0D8A	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x0D8C	0x0E0E      	MOVLW       14
0x0D8E	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x0D90	0x0E31      	MOVLW       49
0x0D92	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0D94	0xF001ECCF  	CALL        _Lcd_Chr, 0
L_disp91:
;TCC_5.c,498 :: 		if(option==1) LCD_Chr(2,14,'2');              //se option for 1, exibe "2"
0x0D98	0x0E00      	MOVLW       0
0x0D9A	0x19DD      	XORWF       _option+1, 0, 1
0x0D9C	0xE102      	BNZ         L__disp297
0x0D9E	0x0E01      	MOVLW       1
0x0DA0	0x19DC      	XORWF       _option, 0, 1
L__disp297:
0x0DA2	0xE108      	BNZ         L_disp92
0x0DA4	0x0E02      	MOVLW       2
0x0DA6	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x0DA8	0x0E0E      	MOVLW       14
0x0DAA	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x0DAC	0x0E32      	MOVLW       50
0x0DAE	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0DB0	0xF001ECCF  	CALL        _Lcd_Chr, 0
L_disp92:
;TCC_5.c,499 :: 		if(option==2) LCD_Chr(2,14,'3');              //se option for 2, exibe "3"
0x0DB4	0x0E00      	MOVLW       0
0x0DB6	0x19DD      	XORWF       _option+1, 0, 1
0x0DB8	0xE102      	BNZ         L__disp298
0x0DBA	0x0E02      	MOVLW       2
0x0DBC	0x19DC      	XORWF       _option, 0, 1
L__disp298:
0x0DBE	0xE108      	BNZ         L_disp93
0x0DC0	0x0E02      	MOVLW       2
0x0DC2	0x6FED      	MOVWF       FARG_Lcd_Chr_row, 1
0x0DC4	0x0E0E      	MOVLW       14
0x0DC6	0x6FEE      	MOVWF       FARG_Lcd_Chr_column, 1
0x0DC8	0x0E33      	MOVLW       51
0x0DCA	0x6FEF      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0DCC	0xF001ECCF  	CALL        _Lcd_Chr, 0
L_disp93:
;TCC_5.c,500 :: 		}
L_disp89:
;TCC_5.c,501 :: 		num_un();                                      //executa num_un
0x0DD0	0xF002ECE0  	CALL        _num_un, 0
;TCC_5.c,502 :: 		}
L_disp87:
;TCC_5.c,504 :: 		}                                                 //end disp()
L_end_disp:
0x0DD4	0x0012      	RETURN      0
; end of _disp
_timebase2:
;TCC_5.c,705 :: 		void timebase2()
;TCC_5.c,707 :: 		if(!ligar)                                      //se ligar for 0
0x0DD6	0x0100      	MOVLB       0
0x0DD8	0xB5E6      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x0DDA	0xD002      	BRA         L_timebase2142
;TCC_5.c,709 :: 		temp_ligado2 = 0x00;                           //zera temp_ligado2
0x0DDC	0x6BD0      	CLRF        _temp_ligado2, 1
0x0DDE	0x6BD1      	CLRF        _temp_ligado2+1, 1
;TCC_5.c,710 :: 		}
L_timebase2142:
;TCC_5.c,712 :: 		if(ligar && num2!=0)                            //se ligar for 1 e num2 diferente de 0
0x0DE0	0xA5E6      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x0DE2	0xD021      	BRA         L_timebase2145
0x0DE4	0x0E00      	MOVLW       0
0x0DE6	0x19E3      	XORWF       _num2+1, 0, 1
0x0DE8	0xE102      	BNZ         L__timebase2319
0x0DEA	0x0E00      	MOVLW       0
0x0DEC	0x19E2      	XORWF       _num2, 0, 1
L__timebase2319:
0x0DEE	0xE01B      	BZ          L_timebase2145
L__timebase2237:
;TCC_5.c,714 :: 		if(temp2==10)                                  //conta 1 segundo
0x0DF0	0x0E00      	MOVLW       0
0x0DF2	0x19D9      	XORWF       _temp2+1, 0, 1
0x0DF4	0xE102      	BNZ         L__timebase2320
0x0DF6	0x0E0A      	MOVLW       10
0x0DF8	0x19D8      	XORWF       _temp2, 0, 1
L__timebase2320:
0x0DFA	0xE104      	BNZ         L_timebase2146
;TCC_5.c,716 :: 		temp2 = 0x00;                                 //zera temp2
0x0DFC	0x6BD8      	CLRF        _temp2, 1
0x0DFE	0x6BD9      	CLRF        _temp2+1, 1
;TCC_5.c,717 :: 		temp_ligado2++;                               //incrementa temp_ligado2 a cada 1 segundo
0x0E00	0x4BD0      	INFSNZ      _temp_ligado2, 1, 1
0x0E02	0x2BD1      	INCF        _temp_ligado2+1, 1, 1
;TCC_5.c,719 :: 		}                                              //end if temp2==10
L_timebase2146:
;TCC_5.c,721 :: 		if(temp_ligado2==mult2)                        //compara igualdade entre temp_ligado2 e mult2
0x0E04	0x51D1      	MOVF        _temp_ligado2+1, 0, 1
0x0E06	0x1853      	XORWF       _mult2+1, 0 
0x0E08	0xE102      	BNZ         L__timebase2321
0x0E0A	0x5052      	MOVF        _mult2, 0 
0x0E0C	0x19D0      	XORWF       _temp_ligado2, 0, 1
L__timebase2321:
0x0E0E	0xE104      	BNZ         L_timebase2147
;TCC_5.c,723 :: 		toque2 = 0x01;                                //liga o bit toque2
0x0E10	0x89E0      	BSF         _toque2, BitPos(_toque2+0), 1
;TCC_5.c,724 :: 		atv_mot2 = 0x01;                              //liga o bit de aativação do motor 2
0x0E12	0x83E1      	BSF         _atv_mot2, BitPos(_atv_mot2+0), 1
;TCC_5.c,725 :: 		abre_mot2();                                  //define os bits de controle do motor 2 para abrir
0x0E14	0xF002EC64  	CALL        _abre_mot2, 0
;TCC_5.c,727 :: 		}                                              //end if temp_ligado2==mult2
L_timebase2147:
;TCC_5.c,729 :: 		if(atv_mot2)                                   //se ativação do motor 2 ligada...
0x0E18	0xA3E1      	BTFSS       _atv_mot2, BitPos(_atv_mot2+0), 1
0x0E1A	0xD003      	BRA         L_timebase2148
;TCC_5.c,731 :: 		read_motbits();                               //executa a leitura dos bits de controle dos motores
0x0E1C	0xF002ECB1  	CALL        _read_motbits, 0
;TCC_5.c,733 :: 		}                                              //end if atv_mot2
0x0E20	0xD002      	BRA         L_timebase2149
L_timebase2148:
;TCC_5.c,737 :: 		alarme();                                     //aciona o alarme
0x0E22	0xF002EC41  	CALL        _alarme, 0
;TCC_5.c,739 :: 		}                                              //end else
L_timebase2149:
;TCC_5.c,741 :: 		}                                               //end if ligar && num2!=0
L_timebase2145:
;TCC_5.c,743 :: 		}                                                 //end timebase2()
L_end_timebase2:
0x0E26	0x0012      	RETURN      0
; end of _timebase2
_timebase3:
;TCC_5.c,750 :: 		void timebase3()
;TCC_5.c,752 :: 		if(!ligar)                                      //se ligar for 0
0x0E28	0x0100      	MOVLB       0
0x0E2A	0xB5E6      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x0E2C	0xD002      	BRA         L_timebase3150
;TCC_5.c,754 :: 		temp_ligado3 = 0x00;                           //zera temp_ligado3
0x0E2E	0x6BD2      	CLRF        _temp_ligado3, 1
0x0E30	0x6BD3      	CLRF        _temp_ligado3+1, 1
;TCC_5.c,755 :: 		}
L_timebase3150:
;TCC_5.c,757 :: 		if(ligar && num3!=0)                            //se ligar for 1 e num3 diferente de 0
0x0E32	0xA5E6      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x0E34	0xD021      	BRA         L_timebase3153
0x0E36	0x0E00      	MOVLW       0
0x0E38	0x19E5      	XORWF       _num3+1, 0, 1
0x0E3A	0xE102      	BNZ         L__timebase3323
0x0E3C	0x0E00      	MOVLW       0
0x0E3E	0x19E4      	XORWF       _num3, 0, 1
L__timebase3323:
0x0E40	0xE01B      	BZ          L_timebase3153
L__timebase3238:
;TCC_5.c,759 :: 		if(temp3==10)                                  //conta 1 segundo
0x0E42	0x0E00      	MOVLW       0
0x0E44	0x1857      	XORWF       _temp3+1, 0 
0x0E46	0xE102      	BNZ         L__timebase3324
0x0E48	0x0E0A      	MOVLW       10
0x0E4A	0x1856      	XORWF       _temp3, 0 
L__timebase3324:
0x0E4C	0xE104      	BNZ         L_timebase3154
;TCC_5.c,761 :: 		temp3 = 0x00;                                 //zera temp3
0x0E4E	0x6A56      	CLRF        _temp3 
0x0E50	0x6A57      	CLRF        _temp3+1 
;TCC_5.c,762 :: 		temp_ligado3++;                               //incrementa temp_ligado3 a cada 1 segundo
0x0E52	0x4BD2      	INFSNZ      _temp_ligado3, 1, 1
0x0E54	0x2BD3      	INCF        _temp_ligado3+1, 1, 1
;TCC_5.c,764 :: 		}                                              //end if temp3==10
L_timebase3154:
;TCC_5.c,766 :: 		if(temp_ligado3==mult3)                        //compara igualdade entre temp_ligado3 e mult3
0x0E56	0x51D3      	MOVF        _temp_ligado3+1, 0, 1
0x0E58	0x1855      	XORWF       _mult3+1, 0 
0x0E5A	0xE102      	BNZ         L__timebase3325
0x0E5C	0x5054      	MOVF        _mult3, 0 
0x0E5E	0x19D2      	XORWF       _temp_ligado3, 0, 1
L__timebase3325:
0x0E60	0xE104      	BNZ         L_timebase3155
;TCC_5.c,768 :: 		toque3 = 0x01;                                //liga o bit toque3
0x0E62	0x8BE0      	BSF         _toque3, BitPos(_toque3+0), 1
;TCC_5.c,769 :: 		atv_mot3 = 0x01;                              //liga o bit de aativação do motor 3
0x0E64	0x85E1      	BSF         _atv_mot3, BitPos(_atv_mot3+0), 1
;TCC_5.c,770 :: 		abre_mot3();                                  //define os bits de controle do motor 3 para abrir
0x0E66	0xF002EC3B  	CALL        _abre_mot3, 0
;TCC_5.c,772 :: 		}                                              //end if temp_ligado3==mult3
L_timebase3155:
;TCC_5.c,774 :: 		if(atv_mot3)                                   //se ativação do motor 3 ligada...
0x0E6A	0xA5E1      	BTFSS       _atv_mot3, BitPos(_atv_mot3+0), 1
0x0E6C	0xD003      	BRA         L_timebase3156
;TCC_5.c,776 :: 		read_motbits();                               //executa a leitura dos bits de controle dos motores
0x0E6E	0xF002ECB1  	CALL        _read_motbits, 0
;TCC_5.c,778 :: 		}                                              //end if atv_mot3
0x0E72	0xD002      	BRA         L_timebase3157
L_timebase3156:
;TCC_5.c,782 :: 		alarme();                                     //aciona o alarme
0x0E74	0xF002EC41  	CALL        _alarme, 0
;TCC_5.c,784 :: 		}                                              //end else
L_timebase3157:
;TCC_5.c,786 :: 		}                                               //end if ligar && num3!=0
L_timebase3153:
;TCC_5.c,788 :: 		}                                                 //end timebase3()
L_end_timebase3:
0x0E78	0x0012      	RETURN      0
; end of _timebase3
_timebase:
;TCC_5.c,663 :: 		void timebase()
;TCC_5.c,665 :: 		if(!ligar)                                      //se ligar for 0
0x0E7A	0x0100      	MOVLB       0
0x0E7C	0xB5E6      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x0E7E	0xD002      	BRA         L_timebase134
;TCC_5.c,667 :: 		temp_ligado = 0x00;                            //zera temp_ligado
0x0E80	0x6BCE      	CLRF        _temp_ligado, 1
0x0E82	0x6BCF      	CLRF        _temp_ligado+1, 1
;TCC_5.c,668 :: 		}
L_timebase134:
;TCC_5.c,669 :: 		if(ligar && num!=0)                             //se ligar for 1 e num diferente de 0...
0x0E84	0xA5E6      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x0E86	0xD021      	BRA         L_timebase137
0x0E88	0x0E00      	MOVLW       0
0x0E8A	0x19E8      	XORWF       _num+1, 0, 1
0x0E8C	0xE102      	BNZ         L__timebase315
0x0E8E	0x0E00      	MOVLW       0
0x0E90	0x19E7      	XORWF       _num, 0, 1
L__timebase315:
0x0E92	0xE01B      	BZ          L_timebase137
L__timebase236:
;TCC_5.c,671 :: 		if(temp==10)                                   //conta 1 segundo
0x0E94	0x0E00      	MOVLW       0
0x0E96	0x19DF      	XORWF       _temp+1, 0, 1
0x0E98	0xE102      	BNZ         L__timebase316
0x0E9A	0x0E0A      	MOVLW       10
0x0E9C	0x19DE      	XORWF       _temp, 0, 1
L__timebase316:
0x0E9E	0xE104      	BNZ         L_timebase138
;TCC_5.c,673 :: 		temp = 0x00;                                  //zera temp
0x0EA0	0x6BDE      	CLRF        _temp, 1
0x0EA2	0x6BDF      	CLRF        _temp+1, 1
;TCC_5.c,674 :: 		temp_ligado++;                                //incrementa temp_ligado a cada 1 segundo
0x0EA4	0x4BCE      	INFSNZ      _temp_ligado, 1, 1
0x0EA6	0x2BCF      	INCF        _temp_ligado+1, 1, 1
;TCC_5.c,676 :: 		}                                              //end if temp==10
L_timebase138:
;TCC_5.c,678 :: 		if(temp_ligado==mult)                          //compara a igualdade de temp_ligado com mult
0x0EA8	0x51CF      	MOVF        _temp_ligado+1, 0, 1
0x0EAA	0x1859      	XORWF       _mult+1, 0 
0x0EAC	0xE102      	BNZ         L__timebase317
0x0EAE	0x5058      	MOVF        _mult, 0 
0x0EB0	0x19CE      	XORWF       _temp_ligado, 0, 1
L__timebase317:
0x0EB2	0xE104      	BNZ         L_timebase139
;TCC_5.c,680 :: 		toque = 0x01;                                 //liga o bit toque
0x0EB4	0x81E0      	BSF         _toque, BitPos(_toque+0), 1
;TCC_5.c,681 :: 		atv_mot = 0x01;                               //liga o bit de ativação do motor
0x0EB6	0x8BE1      	BSF         _atv_mot, BitPos(_atv_mot+0), 1
;TCC_5.c,682 :: 		abre_mot();                                   //define os bits de controle do motor para abri-lo
0x0EB8	0xF002EC35  	CALL        _abre_mot, 0
;TCC_5.c,684 :: 		}                                              //end if temp_ligado==mult
L_timebase139:
;TCC_5.c,686 :: 		if(atv_mot)                                    //se ativação do motor for ligada...
0x0EBC	0xABE1      	BTFSS       _atv_mot, BitPos(_atv_mot+0), 1
0x0EBE	0xD003      	BRA         L_timebase140
;TCC_5.c,688 :: 		read_motbits();                               //executa a leitura dos bits de controle dos motores
0x0EC0	0xF002ECB1  	CALL        _read_motbits, 0
;TCC_5.c,690 :: 		}                                              //end if atv_mot
0x0EC4	0xD002      	BRA         L_timebase141
L_timebase140:
;TCC_5.c,694 :: 		alarme();                                     //executa o alarme
0x0EC6	0xF002EC41  	CALL        _alarme, 0
;TCC_5.c,695 :: 		}
L_timebase141:
;TCC_5.c,696 :: 		}                                               //end if ligar
L_timebase137:
;TCC_5.c,698 :: 		}                                                 //end timebase()
L_end_timebase:
0x0ECA	0x0012      	RETURN      0
; end of _timebase
_piscaLED:
;TCC_5.c,562 :: 		void piscaLED()
;TCC_5.c,565 :: 		if(ligar && !toque && num!=0)                   //se ligar for um(ligado), toque for zero e num diferente de zero...
0x0ECC	0x0100      	MOVLB       0
0x0ECE	0xA5E6      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x0ED0	0xD012      	BRA         L_piscaLED105
0x0ED2	0xB1E0      	BTFSC       _toque, BitPos(_toque+0), 1
0x0ED4	0xD010      	BRA         L_piscaLED105
0x0ED6	0x0E00      	MOVLW       0
0x0ED8	0x19E8      	XORWF       _num+1, 0, 1
0x0EDA	0xE102      	BNZ         L__piscaLED304
0x0EDC	0x0E00      	MOVLW       0
0x0EDE	0x19E7      	XORWF       _num, 0, 1
L__piscaLED304:
0x0EE0	0xE00A      	BZ          L_piscaLED105
L__piscaLED235:
;TCC_5.c,567 :: 		if(temp_led>=10)                               //conta 1 segundo
0x0EE2	0x0E00      	MOVLW       0
0x0EE4	0x5DC5      	SUBWF       _temp_led+1, 0, 1
0x0EE6	0xE102      	BNZ         L__piscaLED305
0x0EE8	0x0E0A      	MOVLW       10
0x0EEA	0x5DC4      	SUBWF       _temp_led, 0, 1
L__piscaLED305:
0x0EEC	0xE303      	BNC         L_piscaLED106
;TCC_5.c,569 :: 		temp_led = 0x00;                      //zera temp_led
0x0EEE	0x6BC4      	CLRF        _temp_led, 1
0x0EF0	0x6BC5      	CLRF        _temp_led+1, 1
;TCC_5.c,570 :: 		LED  = ~LED;                          //inverte LED de indicação do dispenser n°1
0x0EF2	0x7080      	BTG         PORTA, 0 
;TCC_5.c,571 :: 		}                                              //end if temp_led>=10
L_piscaLED106:
;TCC_5.c,573 :: 		}                                               //end if ligar && !toque && num!=0
0x0EF4	0xD00F      	BRA         L_piscaLED107
L_piscaLED105:
;TCC_5.c,577 :: 		if(ligar && toque)                             //se ligar for 1 e toque for 1
0x0EF6	0xA5E6      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x0EF8	0xD00C      	BRA         L_piscaLED110
0x0EFA	0xA1E0      	BTFSS       _toque, BitPos(_toque+0), 1
0x0EFC	0xD00A      	BRA         L_piscaLED110
L__piscaLED234:
;TCC_5.c,579 :: 		if(temp_led>=2)                               //conta 200ms
0x0EFE	0x0E00      	MOVLW       0
0x0F00	0x5DC5      	SUBWF       _temp_led+1, 0, 1
0x0F02	0xE102      	BNZ         L__piscaLED306
0x0F04	0x0E02      	MOVLW       2
0x0F06	0x5DC4      	SUBWF       _temp_led, 0, 1
L__piscaLED306:
0x0F08	0xE303      	BNC         L_piscaLED111
;TCC_5.c,581 :: 		temp_led=0x00;                               //zera temp_led
0x0F0A	0x6BC4      	CLRF        _temp_led, 1
0x0F0C	0x6BC5      	CLRF        _temp_led+1, 1
;TCC_5.c,582 :: 		LED = ~LED;                                  //inverte LED de indicação do dispenser n°1
0x0F0E	0x7080      	BTG         PORTA, 0 
;TCC_5.c,584 :: 		}                                             //end if temp_led>=2
L_piscaLED111:
;TCC_5.c,586 :: 		}                                              //end if ligar && toque
0x0F10	0xD001      	BRA         L_piscaLED112
L_piscaLED110:
;TCC_5.c,587 :: 		else LED = 0x00;                               //senão, LED do dispenser n°1 desligado
0x0F12	0x9080      	BCF         PORTA, 0 
L_piscaLED112:
;TCC_5.c,589 :: 		}                                               //end else
L_piscaLED107:
;TCC_5.c,593 :: 		if(temp_led2 ==5)                                //conta 500ms
0x0F14	0x0E00      	MOVLW       0
0x0F16	0x19C9      	XORWF       _temp_led2+1, 0, 1
0x0F18	0xE102      	BNZ         L__piscaLED307
0x0F1A	0x0E05      	MOVLW       5
0x0F1C	0x19C8      	XORWF       _temp_led2, 0, 1
L__piscaLED307:
0x0F1E	0xE103      	BNZ         L_piscaLED113
;TCC_5.c,595 :: 		temp_led2=0x00;                                 //zera temp_led2
0x0F20	0x6BC8      	CLRF        _temp_led2, 1
0x0F22	0x6BC9      	CLRF        _temp_led2+1, 1
;TCC_5.c,596 :: 		LED2 = ~LED2;                                   //inverte estado do LED de indicação geral
0x0F24	0x7680      	BTG         PORTA, 3 
;TCC_5.c,598 :: 		}                                                //end if temp_led==5
L_piscaLED113:
;TCC_5.c,600 :: 		if(ligar && !toque2 && num2!=0)                  //se ligar for 1, toque 2 for 0 e num2 diferente de 0...
0x0F26	0xA5E6      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x0F28	0xD012      	BRA         L_piscaLED116
0x0F2A	0xB9E0      	BTFSC       _toque2, BitPos(_toque2+0), 1
0x0F2C	0xD010      	BRA         L_piscaLED116
0x0F2E	0x0E00      	MOVLW       0
0x0F30	0x19E3      	XORWF       _num2+1, 0, 1
0x0F32	0xE102      	BNZ         L__piscaLED308
0x0F34	0x0E00      	MOVLW       0
0x0F36	0x19E2      	XORWF       _num2, 0, 1
L__piscaLED308:
0x0F38	0xE00A      	BZ          L_piscaLED116
L__piscaLED233:
;TCC_5.c,602 :: 		if(temp_led3>=10)                               //conta 1 segundo
0x0F3A	0x0E00      	MOVLW       0
0x0F3C	0x5DCB      	SUBWF       _temp_led3+1, 0, 1
0x0F3E	0xE102      	BNZ         L__piscaLED309
0x0F40	0x0E0A      	MOVLW       10
0x0F42	0x5DCA      	SUBWF       _temp_led3, 0, 1
L__piscaLED309:
0x0F44	0xE303      	BNC         L_piscaLED117
;TCC_5.c,604 :: 		temp_led3 = 0x00;                              //zera temp_led3
0x0F46	0x6BCA      	CLRF        _temp_led3, 1
0x0F48	0x6BCB      	CLRF        _temp_led3+1, 1
;TCC_5.c,605 :: 		LED3 = ~LED3;                                  //inverte estado do LED de indicação do dispenser n°2
0x0F4A	0x7081      	BTG         PORTB, 0 
;TCC_5.c,607 :: 		}                                               //end if temp_led3>=10
L_piscaLED117:
;TCC_5.c,609 :: 		}                                                //end if ligar && !toque2 && num2!=0
0x0F4C	0xD00F      	BRA         L_piscaLED118
L_piscaLED116:
;TCC_5.c,613 :: 		if(ligar && toque2)                             //se ligar e toque2 for 1
0x0F4E	0xA5E6      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x0F50	0xD00C      	BRA         L_piscaLED121
0x0F52	0xA9E0      	BTFSS       _toque2, BitPos(_toque2+0), 1
0x0F54	0xD00A      	BRA         L_piscaLED121
L__piscaLED232:
;TCC_5.c,615 :: 		if(temp_led3>=2)                               //conta 200 milisegundos
0x0F56	0x0E00      	MOVLW       0
0x0F58	0x5DCB      	SUBWF       _temp_led3+1, 0, 1
0x0F5A	0xE102      	BNZ         L__piscaLED310
0x0F5C	0x0E02      	MOVLW       2
0x0F5E	0x5DCA      	SUBWF       _temp_led3, 0, 1
L__piscaLED310:
0x0F60	0xE303      	BNC         L_piscaLED122
;TCC_5.c,617 :: 		temp_led3=0x00;                               //zera temp_led3
0x0F62	0x6BCA      	CLRF        _temp_led3, 1
0x0F64	0x6BCB      	CLRF        _temp_led3+1, 1
;TCC_5.c,618 :: 		LED3 = ~LED3;                                 //inverte estado do LED de indicação do dispenser n°2
0x0F66	0x7081      	BTG         PORTB, 0 
;TCC_5.c,620 :: 		}                                              //end if temp_led3>=2
L_piscaLED122:
;TCC_5.c,622 :: 		}                                               //end if ligar && toque2
0x0F68	0xD001      	BRA         L_piscaLED123
L_piscaLED121:
;TCC_5.c,624 :: 		else LED3 = 0x00;                               //senão, LED de indicação do dispenser n°2 desligado
0x0F6A	0x9081      	BCF         PORTB, 0 
L_piscaLED123:
;TCC_5.c,626 :: 		}                                                //end else
L_piscaLED118:
;TCC_5.c,628 :: 		if(ligar && !toque3 && num3!=0)                  //se ligar for 1, toque3 for 0 e num3 diferente de 0...
0x0F6C	0xA5E6      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x0F6E	0xD012      	BRA         L_piscaLED126
0x0F70	0xBBE0      	BTFSC       _toque3, BitPos(_toque3+0), 1
0x0F72	0xD010      	BRA         L_piscaLED126
0x0F74	0x0E00      	MOVLW       0
0x0F76	0x19E5      	XORWF       _num3+1, 0, 1
0x0F78	0xE102      	BNZ         L__piscaLED311
0x0F7A	0x0E00      	MOVLW       0
0x0F7C	0x19E4      	XORWF       _num3, 0, 1
L__piscaLED311:
0x0F7E	0xE00A      	BZ          L_piscaLED126
L__piscaLED231:
;TCC_5.c,630 :: 		if(temp_led4>=10)                               //conta 1 segundo
0x0F80	0x0E00      	MOVLW       0
0x0F82	0x5DCD      	SUBWF       _temp_led4+1, 0, 1
0x0F84	0xE102      	BNZ         L__piscaLED312
0x0F86	0x0E0A      	MOVLW       10
0x0F88	0x5DCC      	SUBWF       _temp_led4, 0, 1
L__piscaLED312:
0x0F8A	0xE303      	BNC         L_piscaLED127
;TCC_5.c,632 :: 		temp_led4 = 0x00;                              //zera temp_led4
0x0F8C	0x6BCC      	CLRF        _temp_led4, 1
0x0F8E	0x6BCD      	CLRF        _temp_led4+1, 1
;TCC_5.c,633 :: 		LED4 = ~LED4;                                  //inverte estado do LED de indicação do dispenser n°3
0x0F90	0x7281      	BTG         PORTB, 1 
;TCC_5.c,635 :: 		}                                               //end if temp_led4>=10
L_piscaLED127:
;TCC_5.c,637 :: 		}                                                //end if ligar && !toque3 && num3!=0
0x0F92	0xD00F      	BRA         L_piscaLED128
L_piscaLED126:
;TCC_5.c,641 :: 		if(ligar && toque3)                             //se ligar e toque3 for 1
0x0F94	0xA5E6      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x0F96	0xD00C      	BRA         L_piscaLED131
0x0F98	0xABE0      	BTFSS       _toque3, BitPos(_toque3+0), 1
0x0F9A	0xD00A      	BRA         L_piscaLED131
L__piscaLED230:
;TCC_5.c,643 :: 		if(temp_led4>=2)                               //conta 200 milisegundos
0x0F9C	0x0E00      	MOVLW       0
0x0F9E	0x5DCD      	SUBWF       _temp_led4+1, 0, 1
0x0FA0	0xE102      	BNZ         L__piscaLED313
0x0FA2	0x0E02      	MOVLW       2
0x0FA4	0x5DCC      	SUBWF       _temp_led4, 0, 1
L__piscaLED313:
0x0FA6	0xE303      	BNC         L_piscaLED132
;TCC_5.c,645 :: 		temp_led4=0x00;                               //zera temp_led4
0x0FA8	0x6BCC      	CLRF        _temp_led4, 1
0x0FAA	0x6BCD      	CLRF        _temp_led4+1, 1
;TCC_5.c,646 :: 		LED4 = ~LED4;                                 //inverte estado do LED de indicação do dispenser n°3
0x0FAC	0x7281      	BTG         PORTB, 1 
;TCC_5.c,648 :: 		}                                              //end if temp_led4>=2
L_piscaLED132:
;TCC_5.c,650 :: 		}                                               //end if ligar && toque3
0x0FAE	0xD001      	BRA         L_piscaLED133
L_piscaLED131:
;TCC_5.c,652 :: 		else LED4 = 0x00;                               //senão, LED de indicação do dispenser n°3 desligado
0x0FB0	0x9281      	BCF         PORTB, 1 
L_piscaLED133:
;TCC_5.c,654 :: 		}                                                //end else
L_piscaLED128:
;TCC_5.c,656 :: 		}                                                 //end piscaLED()
L_end_piscaLED:
0x0FB2	0x0012      	RETURN      0
; end of _piscaLED
_main:
0x0FB4	0xF008ECAB  	CALL        4438, 0
;TCC_5.c,163 :: 		void main (void)
;TCC_5.c,168 :: 		ADCON1        =   0x0F;                   //Define os pinos como digital
0x0FB8	0x0E0F      	MOVLW       15
0x0FBA	0x6EC1      	MOVWF       ADCON1 
;TCC_5.c,169 :: 		CMCON         =   0x07;                   //Desativa os comparadores
0x0FBC	0x0E07      	MOVLW       7
0x0FBE	0x6EB4      	MOVWF       CMCON 
;TCC_5.c,171 :: 		TMR0H         =   0x3C;
0x0FC0	0x0E3C      	MOVLW       60
0x0FC2	0x6ED7      	MOVWF       TMR0H 
;TCC_5.c,172 :: 		TMR0L         =   0xB0;                   //Inicia timer0 em 15536
0x0FC4	0x0EB0      	MOVLW       176
0x0FC6	0x6ED6      	MOVWF       TMR0L 
;TCC_5.c,173 :: 		TMR1H         =   0x3C;
0x0FC8	0x0E3C      	MOVLW       60
0x0FCA	0x6ECF      	MOVWF       TMR1H 
;TCC_5.c,174 :: 		TMR1L         =   0xB0;                   //Inicia TMR1 em 15536
0x0FCC	0x0EB0      	MOVLW       176
0x0FCE	0x6ECE      	MOVWF       TMR1L 
;TCC_5.c,177 :: 		INTCON.GIE    =   0x01;                   //Ativa interrupção global
0x0FD0	0x8EF2      	BSF         INTCON, 7 
;TCC_5.c,178 :: 		INTCON.PEIE   =   0x01;                   //Ativa interrupção por periféricos
0x0FD2	0x8CF2      	BSF         INTCON, 6 
;TCC_5.c,179 :: 		INTCON.TMR0IE =   0x01;                   //Ativa interrupção por overflow
0x0FD4	0x8AF2      	BSF         INTCON, 5 
;TCC_5.c,181 :: 		TMR0IF_bit    =   0x00;                   //zera a flag do timer0
0x0FD6	0x94F2      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0) 
;TCC_5.c,182 :: 		TMR1IF_bit    =   0x00;                   //zera a flag do timer1
0x0FD8	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;TCC_5.c,185 :: 		INTCON2.RBPU  =   0x01;                   //Desliga os resistores de pull-ups do portB
0x0FDA	0x8EF1      	BSF         INTCON2, 7 
;TCC_5.c,186 :: 		T0CON         =   0x81;                   //TMR0 16 bits, prescaler 1:4
0x0FDC	0x0E81      	MOVLW       129
0x0FDE	0x6ED5      	MOVWF       T0CON 
;TCC_5.c,187 :: 		T1CON         =   0xA1;                   //TMR1 16 bits, prescaler 1:4
0x0FE0	0x0EA1      	MOVLW       161
0x0FE2	0x6ECD      	MOVWF       T1CON 
;TCC_5.c,190 :: 		ligar         =   0x00;                   //     |
0x0FE4	0x0100      	MOVLB       0
0x0FE6	0x95E6      	BCF         _ligar, BitPos(_ligar+0), 1
;TCC_5.c,191 :: 		b1_flag       =   0x00;                   //     |
0x0FE8	0x93E6      	BCF         _b1_flag, BitPos(_b1_flag+0), 1
;TCC_5.c,192 :: 		b2_flag       =   0x00;                   //     |
0x0FEA	0x9FE6      	BCF         _b2_flag, BitPos(_b2_flag+0), 1
;TCC_5.c,193 :: 		b3_flag       =   0x00;                   //     |
0x0FEC	0x9BE6      	BCF         _b3_flag, BitPos(_b3_flag+0), 1
;TCC_5.c,194 :: 		b4_flag       =   0x00;                   //     |
0x0FEE	0x99E6      	BCF         _b4_flag, BitPos(_b4_flag+0), 1
;TCC_5.c,195 :: 		b5_flag       =   0x00;                   //     |
0x0FF0	0x91E1      	BCF         _b5_flag, BitPos(_b5_flag+0), 1
;TCC_5.c,196 :: 		display       =   0x00;                   //     |
0x0FF2	0x9DE6      	BCF         _display, BitPos(_display+0), 1
;TCC_5.c,197 :: 		toque         =   0x00;                   //     |
0x0FF4	0x91E0      	BCF         _toque, BitPos(_toque+0), 1
;TCC_5.c,198 :: 		toque2        =   0x00;                   //     |
0x0FF6	0x99E0      	BCF         _toque2, BitPos(_toque2+0), 1
;TCC_5.c,199 :: 		toque3        =   0x00;                   //     |
0x0FF8	0x9BE0      	BCF         _toque3, BitPos(_toque3+0), 1
;TCC_5.c,200 :: 		open_bit      =   0x00;                   //     |
0x0FFA	0x9DE0      	BCF         _open_bit, BitPos(_open_bit+0), 1
;TCC_5.c,201 :: 		open_bit2     =   0x00;                   //     |
0x0FFC	0x93E0      	BCF         _open_bit2, BitPos(_open_bit2+0), 1
;TCC_5.c,202 :: 		open_bit3     =   0x00;                   //     |
0x0FFE	0x95E0      	BCF         _open_bit3, BitPos(_open_bit3+0), 1
;TCC_5.c,203 :: 		close_bit     =   0x00;                   //     |
0x1000	0x97E0      	BCF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,204 :: 		close_bit2    =   0x00;                   //     |
0x1002	0x97E1      	BCF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,205 :: 		close_bit3    =   0x00;                   //     |
0x1004	0x99E1      	BCF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,206 :: 		atv_mot       =   0x00;                   //     |
0x1006	0x9BE1      	BCF         _atv_mot, BitPos(_atv_mot+0), 1
;TCC_5.c,207 :: 		atv_mot2      =   0x00;                   //     |
0x1008	0x93E1      	BCF         _atv_mot2, BitPos(_atv_mot2+0), 1
;TCC_5.c,208 :: 		atv_mot3      =   0x00;                   //    \ /
0x100A	0x95E1      	BCF         _atv_mot3, BitPos(_atv_mot3+0), 1
;TCC_5.c,210 :: 		SM            =   0x00;                   //zerando todos os bits
0x100C	0x9280      	BCF         PORTA, 1 
;TCC_5.c,212 :: 		num           =   EEPROM_Read(0x01);      //lê os dados da EEPROM para variável num
0x100E	0x0E01      	MOVLW       1
0x1010	0x6FE9      	MOVWF       FARG_EEPROM_Read_address, 1
0x1012	0xDD9E      	RCALL       _EEPROM_Read
0x1014	0xF0E7C000  	MOVFF       R0, _num
0x1018	0x0E00      	MOVLW       0
0x101A	0x6FE8      	MOVWF       _num+1, 1
;TCC_5.c,213 :: 		un            =   EEPROM_Read(0x03);      //lê os dados da EEPROM para variável un
0x101C	0x0E03      	MOVLW       3
0x101E	0x6FE9      	MOVWF       FARG_EEPROM_Read_address, 1
0x1020	0xDD97      	RCALL       _EEPROM_Read
0x1022	0xB000      	BTFSC       R0, 0 
0x1024	0xD002      	BRA         L__main252
0x1026	0x9FE1      	BCF         _un, BitPos(_un+0), 1
0x1028	0xD001      	BRA         L__main253
L__main252:
0x102A	0x8FE1      	BSF         _un, BitPos(_un+0), 1
L__main253:
;TCC_5.c,214 :: 		num2          =   EEPROM_Read(0x02);      //lê os dados da EEPROM para variável num2
0x102C	0x0E02      	MOVLW       2
0x102E	0x6FE9      	MOVWF       FARG_EEPROM_Read_address, 1
0x1030	0xDD8F      	RCALL       _EEPROM_Read
0x1032	0xF0E2C000  	MOVFF       R0, _num2
0x1036	0x0E00      	MOVLW       0
0x1038	0x6FE3      	MOVWF       _num2+1, 1
;TCC_5.c,215 :: 		un2           =   EEPROM_Read(0x04);      //lê os dados da EEPROM para variável un2
0x103A	0x0E04      	MOVLW       4
0x103C	0x6FE9      	MOVWF       FARG_EEPROM_Read_address, 1
0x103E	0xDD88      	RCALL       _EEPROM_Read
0x1040	0xB000      	BTFSC       R0, 0 
0x1042	0xD002      	BRA         L__main254
0x1044	0x91E6      	BCF         _un2, BitPos(_un2+0), 1
0x1046	0xD001      	BRA         L__main255
L__main254:
0x1048	0x81E6      	BSF         _un2, BitPos(_un2+0), 1
L__main255:
;TCC_5.c,216 :: 		num3          =   EEPROM_Read(0x05);      //lê os dados da EEPROM para variável num3
0x104A	0x0E05      	MOVLW       5
0x104C	0x6FE9      	MOVWF       FARG_EEPROM_Read_address, 1
0x104E	0xDD80      	RCALL       _EEPROM_Read
0x1050	0xF0E4C000  	MOVFF       R0, _num3
0x1054	0x0E00      	MOVLW       0
0x1056	0x6FE5      	MOVWF       _num3+1, 1
;TCC_5.c,217 :: 		un3           =   EEPROM_Read(0x06);      //lê os dados da EEPROM para variável un3
0x1058	0x0E06      	MOVLW       6
0x105A	0x6FE9      	MOVWF       FARG_EEPROM_Read_address, 1
0x105C	0xDD79      	RCALL       _EEPROM_Read
0x105E	0xB000      	BTFSC       R0, 0 
0x1060	0xD002      	BRA         L__main256
0x1062	0x97E6      	BCF         _un3, BitPos(_un3+0), 1
0x1064	0xD001      	BRA         L__main257
L__main256:
0x1066	0x87E6      	BSF         _un3, BitPos(_un3+0), 1
L__main257:
;TCC_5.c,219 :: 		TRISA = 0x00;                             //seta todos os bits do TRISA como saída
0x1068	0x6A92      	CLRF        TRISA 
;TCC_5.c,220 :: 		TRISC = 0x3F;                             //seta os bits 0,1,2,3,5 como entrada
0x106A	0x0E3F      	MOVLW       63
0x106C	0x6E94      	MOVWF       TRISC 
;TCC_5.c,221 :: 		TRISB = 0x00;                             //seta todos os bits do TRISB como saída
0x106E	0x6A93      	CLRF        TRISB 
;TCC_5.c,223 :: 		LCD_Init();                               //inicia o LCD
0x1070	0xF003ECAE  	CALL        _Lcd_Init, 0
;TCC_5.c,224 :: 		LCD_Cmd(_LCD_CLEAR);                      //limpa o LCD
0x1074	0x0E01      	MOVLW       1
0x1076	0x6FF3      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x1078	0xF000EC4E  	CALL        _Lcd_Cmd, 0
;TCC_5.c,225 :: 		LCD_Cmd(_LCD_CURSOR_OFF);                 //desliga cursor do LCD
0x107C	0x0E0C      	MOVLW       12
0x107E	0x6FF3      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x1080	0xF000EC4E  	CALL        _Lcd_Cmd, 0
;TCC_5.c,227 :: 		while(1)                                         //loop infinito
L_main2:
;TCC_5.c,229 :: 		ler_bot();                                     //executa ler_bot
0x1084	0xF003ECFA  	CALL        _ler_bot, 0
;TCC_5.c,231 :: 		disp();                                        //executa disp
0x1088	0xDD6B      	RCALL       _disp
;TCC_5.c,232 :: 		}                                                //end while
0x108A	0xD7FC      	BRA         L_main2
;TCC_5.c,234 :: 		}                                                 //end main
L_end_main:
0x108C	0xD7FF      	BRA         $+0
; end of _main
0x1156	0xF018EE10  	LFSR        1, 24
0x115A	0x0EC8      	MOVLW       200
0x115C	0x6E00      	MOVWF       R0 
0x115E	0x0E01      	MOVLW       1
0x1160	0x6E01      	MOVWF       R1 
0x1162	0x0E8E      	MOVLW       142
0x1164	0x6EF6      	MOVWF       4086 
0x1166	0x0E10      	MOVLW       16
0x1168	0x6EF7      	MOVWF       TBLPTRH 
0x116A	0x0E00      	MOVLW       0
0x116C	0x6EF8      	MOVWF       TBLPTRU 
0x116E	0xF005ECA0  	CALL        2880, 0
0x1172	0x0012      	RETURN      0
;TCC_5.c,0 :: ?ICS_temp_disp
0x108E	0x0000 ;?ICS_temp_disp+0
; end of ?ICS_temp_disp
;TCC_5.c,0 :: ?ICS_hora
0x1090	0x2068 ;?ICS_hora+0
0x1092	0x0020 ;?ICS_hora+2
; end of ?ICS_hora
;TCC_5.c,0 :: ?ICS_dia
0x1094	0x6964 ;?ICS_dia+0
0x1096	0x0061 ;?ICS_dia+2
; end of ?ICS_dia
;TCC_5.c,0 :: ?ICS?lstr7_TCC_5
0x1098	0x5250 ;?ICS?lstr7_TCC_5+0
0x109A	0x474F ;?ICS?lstr7_TCC_5+2
0x109C	0x4152 ;?ICS?lstr7_TCC_5+4
0x109E	0x454D ;?ICS?lstr7_TCC_5+6
0x10A0	0x4E20 ;?ICS?lstr7_TCC_5+8
0x10A2	0x4D55 ;?ICS?lstr7_TCC_5+10
0x10A4	0x5245 ;?ICS?lstr7_TCC_5+12
0x10A6	0x3A4F ;?ICS?lstr7_TCC_5+14
0x10A8	0x00 ;?ICS?lstr7_TCC_5+16
; end of ?ICS?lstr7_TCC_5
;TCC_5.c,0 :: ?ICS?lstr8_TCC_5
0x10A9	0x5250 ;?ICS?lstr8_TCC_5+0
0x10AB	0x474F ;?ICS?lstr8_TCC_5+2
0x10AD	0x4152 ;?ICS?lstr8_TCC_5+4
0x10AF	0x454D ;?ICS?lstr8_TCC_5+6
0x10B1	0x5520 ;?ICS?lstr8_TCC_5+8
0x10B3	0x2E6E ;?ICS?lstr8_TCC_5+10
0x10B5	0x003A ;?ICS?lstr8_TCC_5+12
; end of ?ICS?lstr8_TCC_5
;TCC_5.c,0 :: ?ICS?lstr9_TCC_5
0x10B7	0x4F43 ;?ICS?lstr9_TCC_5+0
0x10B9	0x544E ;?ICS?lstr9_TCC_5+2
0x10BB	0x4E41 ;?ICS?lstr9_TCC_5+4
0x10BD	0x4F44 ;?ICS?lstr9_TCC_5+6
0x10BF	0x203A ;?ICS?lstr9_TCC_5+8
0x10C1	0x2020 ;?ICS?lstr9_TCC_5+10
0x10C3	0x4944 ;?ICS?lstr9_TCC_5+12
0x10C5	0x5053 ;?ICS?lstr9_TCC_5+14
0x10C7	0x00 ;?ICS?lstr9_TCC_5+16
; end of ?ICS?lstr9_TCC_5
;TCC_5.c,0 :: ?ICS_mult2
0x10C8	0x0000 ;?ICS_mult2+0
; end of ?ICS_mult2
;TCC_5.c,0 :: ?ICS_mult3
0x10CA	0x0000 ;?ICS_mult3+0
; end of ?ICS_mult3
;TCC_5.c,0 :: ?ICS_temp3
0x10CC	0x0000 ;?ICS_temp3+0
; end of ?ICS_temp3
;TCC_5.c,0 :: ?ICS_mult
0x10CE	0x0000 ;?ICS_mult+0
; end of ?ICS_mult
;TCC_5.c,0 :: ?ICS?lstr4_TCC_5
0x10D0	0x2020 ;?ICS?lstr4_TCC_5+0
0x10D2	0x4133 ;?ICS?lstr4_TCC_5+2
0x10D4	0x4D20 ;?ICS?lstr4_TCC_5+4
0x10D6	0x4345 ;?ICS?lstr4_TCC_5+6
0x10D8	0x2041 ;?ICS?lstr4_TCC_5+8
0x10DA	0x3032 ;?ICS?lstr4_TCC_5+10
0x10DC	0x3132 ;?ICS?lstr4_TCC_5+12
0x10DE	0x2020 ;?ICS?lstr4_TCC_5+14
0x10E0	0x00 ;?ICS?lstr4_TCC_5+16
; end of ?ICS?lstr4_TCC_5
;TCC_5.c,0 :: ?ICS?lstr5_TCC_5
0x10E1	0x2020 ;?ICS?lstr5_TCC_5+0
0x10E3	0x2020 ;?ICS?lstr5_TCC_5+2
0x10E5	0x5020 ;?ICS?lstr5_TCC_5+4
0x10E7	0x5241 ;?ICS?lstr5_TCC_5+6
0x10E9	0x4E41 ;?ICS?lstr5_TCC_5+8
0x10EB	0x4F44 ;?ICS?lstr5_TCC_5+10
0x10ED	0x2020 ;?ICS?lstr5_TCC_5+12
0x10EF	0x2020 ;?ICS?lstr5_TCC_5+14
0x10F1	0x00 ;?ICS?lstr5_TCC_5+16
; end of ?ICS?lstr5_TCC_5
;TCC_5.c,0 :: ?ICS?lstr6_TCC_5
0x10F2	0x2020 ;?ICS?lstr6_TCC_5+0
0x10F4	0x2020 ;?ICS?lstr6_TCC_5+2
0x10F6	0x4320 ;?ICS?lstr6_TCC_5+4
0x10F8	0x4E4F ;?ICS?lstr6_TCC_5+6
0x10FA	0x4154 ;?ICS?lstr6_TCC_5+8
0x10FC	0x4547 ;?ICS?lstr6_TCC_5+10
0x10FE	0x204D ;?ICS?lstr6_TCC_5+12
0x1100	0x2020 ;?ICS?lstr6_TCC_5+14
0x1102	0x00 ;?ICS?lstr6_TCC_5+16
; end of ?ICS?lstr6_TCC_5
;TCC_5.c,0 :: ?ICS?lstr1_TCC_5
0x1103	0x2020 ;?ICS?lstr1_TCC_5+0
0x1105	0x4944 ;?ICS?lstr1_TCC_5+2
0x1107	0x5053 ;?ICS?lstr1_TCC_5+4
0x1109	0x4E45 ;?ICS?lstr1_TCC_5+6
0x110B	0x4553 ;?ICS?lstr1_TCC_5+8
0x110D	0x2052 ;?ICS?lstr1_TCC_5+10
0x110F	0x4544 ;?ICS?lstr1_TCC_5+12
0x1111	0x2020 ;?ICS?lstr1_TCC_5+14
0x1113	0x00 ;?ICS?lstr1_TCC_5+16
; end of ?ICS?lstr1_TCC_5
;TCC_5.c,0 :: ?ICS?lstr2_TCC_5
0x1114	0x2020 ;?ICS?lstr2_TCC_5+0
0x1116	0x2020 ;?ICS?lstr2_TCC_5+2
0x1118	0x4552 ;?ICS?lstr2_TCC_5+4
0x111A	0x454D ;?ICS?lstr2_TCC_5+6
0x111C	0x4944 ;?ICS?lstr2_TCC_5+8
0x111E	0x534F ;?ICS?lstr2_TCC_5+10
0x1120	0x2020 ;?ICS?lstr2_TCC_5+12
0x1122	0x2020 ;?ICS?lstr2_TCC_5+14
0x1124	0x00 ;?ICS?lstr2_TCC_5+16
; end of ?ICS?lstr2_TCC_5
;TCC_5.c,0 :: ?ICS?lstr3_TCC_5
0x1125	0x5445 ;?ICS?lstr3_TCC_5+0
0x1127	0x4345 ;?ICS?lstr3_TCC_5+2
0x1129	0x4C20 ;?ICS?lstr3_TCC_5+4
0x112B	0x5541 ;?ICS?lstr3_TCC_5+6
0x112D	0x4F52 ;?ICS?lstr3_TCC_5+8
0x112F	0x4720 ;?ICS?lstr3_TCC_5+10
0x1131	0x4D4F ;?ICS?lstr3_TCC_5+12
0x1133	0x5345 ;?ICS?lstr3_TCC_5+14
0x1135	0x00 ;?ICS?lstr3_TCC_5+16
; end of ?ICS?lstr3_TCC_5
;TCC_5.c,0 :: ?ICS_temp_som
0x1136	0x0000 ;?ICS_temp_som+0
; end of ?ICS_temp_som
;TCC_5.c,0 :: ?ICS_x_mot
0x1138	0x0000 ;?ICS_x_mot+0
; end of ?ICS_x_mot
;TCC_5.c,0 :: ?ICS_temp_led
0x113A	0x0000 ;?ICS_temp_led+0
; end of ?ICS_temp_led
;TCC_5.c,0 :: ?ICS_x_mot2
0x113C	0x0000 ;?ICS_x_mot2+0
; end of ?ICS_x_mot2
;TCC_5.c,0 :: ?ICS_temp_led2
0x113E	0x0000 ;?ICS_temp_led2+0
; end of ?ICS_temp_led2
;TCC_5.c,0 :: ?ICS_temp_led3
0x1140	0x0000 ;?ICS_temp_led3+0
; end of ?ICS_temp_led3
;TCC_5.c,0 :: ?ICS_temp_led4
0x1142	0x0000 ;?ICS_temp_led4+0
; end of ?ICS_temp_led4
;TCC_5.c,0 :: ?ICS_temp_ligado
0x1144	0x0000 ;?ICS_temp_ligado+0
; end of ?ICS_temp_ligado
;TCC_5.c,0 :: ?ICS_temp_ligado2
0x1146	0x0000 ;?ICS_temp_ligado2+0
; end of ?ICS_temp_ligado2
;TCC_5.c,0 :: ?ICS_temp_ligado3
0x1148	0x0000 ;?ICS_temp_ligado3+0
; end of ?ICS_temp_ligado3
;TCC_5.c,0 :: ?ICS_x_mot3
0x114A	0x0000 ;?ICS_x_mot3+0
; end of ?ICS_x_mot3
;TCC_5.c,0 :: ?ICS_vezes
0x114C	0x0000 ;?ICS_vezes+0
; end of ?ICS_vezes
;TCC_5.c,0 :: ?ICS_temp2
0x114E	0x0000 ;?ICS_temp2+0
; end of ?ICS_temp2
;TCC_5.c,0 :: ?ICS_prog
0x1150	0x0000 ;?ICS_prog+0
; end of ?ICS_prog
;TCC_5.c,0 :: ?ICS_option
0x1152	0x0000 ;?ICS_option+0
; end of ?ICS_option
;TCC_5.c,0 :: ?ICS_temp
0x1154	0x0000 ;?ICS_temp+0
; end of ?ICS_temp
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [110]    _interrupt
0x0076       [6]    _Delay_1us
0x007C      [22]    _Delay_5500us
0x0092      [10]    _Delay_50us
0x009C     [126]    _Lcd_Cmd
0x011A      [14]    _Lcd_Chr_CP
0x0128      [12]    _fecha_mot3
0x0134      [12]    _fecha_mot2
0x0140      [12]    _fecha_mot
0x014C      [78]    _mot_aberto
0x019A      [78]    _mot_fechado3
0x01E8      [78]    _mot_fechado2
0x0236      [78]    _mot_aberto2
0x0284      [78]    _mot_aberto3
0x02D2      [78]    _mot_fechado
0x0320     [126]    _Lcd_Out
0x039E      [94]    _Lcd_Chr
0x03FC      [54]    _Div_16X16_U
0x0432      [56]    _toca_som
0x046A      [12]    _abre_mot
0x0476      [12]    _abre_mot3
0x0482      [70]    _alarme
0x04C8      [12]    _abre_mot2
0x04D4      [62]    _EEPROM_Write
0x0512      [80]    _Mul_16X16_U
0x0562      [94]    _read_motbits
0x05C0     [412]    _num_un
0x075C     [152]    _Lcd_Init
0x07F4     [844]    _ler_bot
0x0B40      [16]    ___CC2DW
0x0B50      [16]    _EEPROM_Read
0x0B60     [630]    _disp
0x0DD6      [82]    _timebase2
0x0E28      [82]    _timebase3
0x0E7A      [82]    _timebase
0x0ECC     [232]    _piscaLED
0x0FB4     [218]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0018       [2]    _temp_disp
0x001A       [4]    _hora
0x001E       [4]    _dia
0x0022      [17]    ?lstr7_TCC_5
0x0033      [14]    ?lstr8_TCC_5
0x0041      [17]    ?lstr9_TCC_5
0x0052       [2]    _mult2
0x0054       [2]    _mult3
0x0056       [2]    _temp3
0x0058       [2]    _mult
0x005A      [17]    ?lstr4_TCC_5
0x006B      [17]    ?lstr5_TCC_5
0x007C      [17]    ?lstr6_TCC_5
0x008D      [17]    ?lstr1_TCC_5
0x009E      [17]    ?lstr2_TCC_5
0x00AF      [17]    ?lstr3_TCC_5
0x00C0       [2]    _temp_som
0x00C2       [2]    _x_mot
0x00C4       [2]    _temp_led
0x00C6       [2]    _x_mot2
0x00C8       [2]    _temp_led2
0x00CA       [2]    _temp_led3
0x00CC       [2]    _temp_led4
0x00CE       [2]    _temp_ligado
0x00D0       [2]    _temp_ligado2
0x00D2       [2]    _temp_ligado3
0x00D4       [2]    _x_mot3
0x00D6       [2]    _vezes
0x00D8       [2]    _temp2
0x00DA       [2]    _prog
0x00DC       [2]    _option
0x00DE       [2]    _temp
0x00E0       [0]    _toque
0x00E0       [0]    _toque2
0x00E0       [0]    _close_bit
0x00E0       [0]    _display2
0x00E0       [0]    _toque3
0x00E0       [0]    _open_bit2
0x00E0       [0]    _open_bit
0x00E0       [0]    _open_bit3
0x00E1       [0]    _atv_mot2
0x00E1       [0]    _b5_flag
0x00E1       [0]    _atv_mot
0x00E1       [0]    _atv_mot3
0x00E1       [0]    _un
0x00E1       [0]    __Lib_Lcd_cmd_status
0x00E1       [0]    _close_bit3
0x00E1       [0]    _close_bit2
0x00E2       [2]    _num2
0x00E4       [2]    _num3
0x00E6       [0]    _un2
0x00E6       [0]    _ligar
0x00E6       [0]    _un3
0x00E6       [0]    _b3_flag
0x00E6       [0]    _b4_flag
0x00E6       [0]    _b2_flag
0x00E6       [0]    _display
0x00E6       [0]    _b1_flag
0x00E7       [2]    _num
0x00E9       [1]    FARG_EEPROM_Read_address
0x00EA       [1]    num_un_dig1_L0
0x00EA       [1]    FARG_EEPROM_Write_address
0x00EB       [1]    FARG_EEPROM_Write_data_
0x00EB       [2]    FLOC__num_un
0x00ED       [1]    FARG_Lcd_Out_row
0x00ED       [1]    FARG_Lcd_Chr_row
0x00EE       [1]    FARG_Lcd_Out_column
0x00EE       [1]    FARG_Lcd_Chr_column
0x00EF       [2]    FARG_Lcd_Out_text
0x00EF       [1]    FARG_Lcd_Chr_out_char
0x00F1       [1]    Lcd_Out_i_L0
0x00F2       [1]    FARG_Lcd_Chr_CP_out_char
0x00F3       [1]    FARG_Lcd_Cmd_out_char
0x0F80       [0]    SOM
0x0F80       [0]    LED2
0x0F80       [0]    LED
0x0F80       [0]    SM3
0x0F80       [0]    SM2
0x0F80       [1]    PORTA
0x0F80       [0]    SM
0x0F81       [1]    PORTB
0x0F81       [0]    LED4
0x0F81       [0]    LED3
0x0F82       [0]    BOTAO4
0x0F82       [0]    BOTAO3
0x0F82       [0]    BOTAO5
0x0F82       [1]    PORTC
0x0F82       [0]    BOTAO2
0x0F82       [0]    BOTAO1
0x0F83       [0]    LCD_D6
0x0F83       [0]    LCD_D5
0x0F83       [0]    LCD_EN
0x0F83       [0]    LCD_RS
0x0F83       [0]    LCD_D7
0x0F83       [1]    PORTD
0x0F83       [0]    LCD_D4
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [0]    TRISD5_bit
0x0F95       [0]    TRISD6_bit
0x0F95       [0]    TRISD4_bit
0x0F95       [0]    TRISD3_bit
0x0F95       [0]    TRISD2_bit
0x0F95       [0]    LCD_D4_Direction
0x0F95       [0]    LCD_D7_Direction
0x0F95       [0]    LCD_D6_Direction
0x0F95       [0]    LCD_RS_Direction
0x0F95       [0]    LCD_EN_Direction
0x0F95       [0]    TRISD7_bit
0x0F95       [0]    LCD_D5_Direction
0x0F9E       [0]    TMR1IF_bit
0x0FA1       [1]    PIR2
0x0FA6       [1]    EECON1
0x0FA7       [1]    EECON2
0x0FA8       [1]    EEDATA
0x0FA9       [1]    EEADR
0x0FB4       [1]    CMCON
0x0FC1       [1]    ADCON1
0x0FCD       [1]    T1CON
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD5       [1]    T0CON
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF1       [1]    INTCON2
0x0FF2       [0]    TMR0IF_bit
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x108E       [2]    ?ICS_temp_disp
0x1090       [4]    ?ICS_hora
0x1094       [4]    ?ICS_dia
0x1098      [17]    ?ICS?lstr7_TCC_5
0x10A9      [14]    ?ICS?lstr8_TCC_5
0x10B7      [17]    ?ICS?lstr9_TCC_5
0x10C8       [2]    ?ICS_mult2
0x10CA       [2]    ?ICS_mult3
0x10CC       [2]    ?ICS_temp3
0x10CE       [2]    ?ICS_mult
0x10D0      [17]    ?ICS?lstr4_TCC_5
0x10E1      [17]    ?ICS?lstr5_TCC_5
0x10F2      [17]    ?ICS?lstr6_TCC_5
0x1103      [17]    ?ICS?lstr1_TCC_5
0x1114      [17]    ?ICS?lstr2_TCC_5
0x1125      [17]    ?ICS?lstr3_TCC_5
0x1136       [2]    ?ICS_temp_som
0x1138       [2]    ?ICS_x_mot
0x113A       [2]    ?ICS_temp_led
0x113C       [2]    ?ICS_x_mot2
0x113E       [2]    ?ICS_temp_led2
0x1140       [2]    ?ICS_temp_led3
0x1142       [2]    ?ICS_temp_led4
0x1144       [2]    ?ICS_temp_ligado
0x1146       [2]    ?ICS_temp_ligado2
0x1148       [2]    ?ICS_temp_ligado3
0x114A       [2]    ?ICS_x_mot3
0x114C       [2]    ?ICS_vezes
0x114E       [2]    ?ICS_temp2
0x1150       [2]    ?ICS_prog
0x1152       [2]    ?ICS_option
0x1154       [2]    ?ICS_temp
