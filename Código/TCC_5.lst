;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 07/07/2021 22:49:49
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF00DEF98  	GOTO        6960
_interrupt:
;TCC_5.c,179 :: 		void interrupt()                          //interrupção
0x0008	0xF018C000  	MOVFF       R0, 24
0x000C	0xF017C00B  	MOVFF       R11, 23
0x0010	0xF016C00C  	MOVFF       R12, 22
0x0014	0xF015C00D  	MOVFF       R13, 21
;TCC_5.c,182 :: 		if(TMR0IF_bit)                        //overflow em 100ms overflow
0x0018	0xA4F2      	BTFSS       TMR0IF_bit, BitPos(TMR0IF_bit+0) 
0x001A	0xD025      	BRA         L_interrupt0
;TCC_5.c,184 :: 		TMR0IF_bit =  0x00;                  //zera flag do timer0
0x001C	0x94F2      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0) 
;TCC_5.c,185 :: 		TMR0H      =  0xED;
0x001E	0x0EED      	MOVLW       237
0x0020	0x6ED7      	MOVWF       TMR0H 
;TCC_5.c,186 :: 		TMR0L      =  0xB1;                  //seta timer0 em 60849
0x0022	0x0EB1      	MOVLW       177
0x0024	0x6ED6      	MOVWF       TMR0L 
;TCC_5.c,187 :: 		temp++;                              //incrementa temp
0x0026	0x0100      	MOVLB       0
0x0028	0x4BDC      	INFSNZ      _temp, 1, 1
0x002A	0x2BDD      	INCF        _temp+1, 1, 1
;TCC_5.c,188 :: 		temp2++;                             //incrementa temp2
0x002C	0x4BDE      	INFSNZ      _temp2, 1, 1
0x002E	0x2BDF      	INCF        _temp2+1, 1, 1
;TCC_5.c,189 :: 		temp3++;                             //incrementa temp3
0x0030	0x4BE0      	INFSNZ      _temp3, 1, 1
0x0032	0x2BE1      	INCF        _temp3+1, 1, 1
;TCC_5.c,190 :: 		temp4++;                             //incrementa temp4
0x0034	0x4BD6      	INFSNZ      _temp4, 1, 1
0x0036	0x2BD7      	INCF        _temp4+1, 1, 1
;TCC_5.c,192 :: 		temp_led++;                         //incrementa temp_led
0x0038	0x4BEE      	INFSNZ      _temp_led, 1, 1
0x003A	0x2BEF      	INCF        _temp_led+1, 1, 1
;TCC_5.c,193 :: 		temp_led2++;                        //incrementa temp_led2
0x003C	0x4BF8      	INFSNZ      _temp_led2, 1, 1
0x003E	0x2BF9      	INCF        _temp_led2+1, 1, 1
;TCC_5.c,194 :: 		temp_led3++;                        //incrementa temp_led3
0x0040	0x4BF6      	INFSNZ      _temp_led3, 1, 1
0x0042	0x2BF7      	INCF        _temp_led3+1, 1, 1
;TCC_5.c,195 :: 		temp_led4++;                        //incrementa temp_led4
0x0044	0x4BF4      	INFSNZ      _temp_led4, 1, 1
0x0046	0x2BF5      	INCF        _temp_led4+1, 1, 1
;TCC_5.c,196 :: 		temp_led5++;                        //incrementa temp_led5
0x0048	0x4BEA      	INFSNZ      _temp_led5, 1, 1
0x004A	0x2BEB      	INCF        _temp_led5+1, 1, 1
;TCC_5.c,197 :: 		temp_disp++;                        //incrementa temp_disp
0x004C	0x4A3B      	INFSNZ      _temp_disp, 1 
0x004E	0x2A3C      	INCF        _temp_disp+1, 1 
;TCC_5.c,198 :: 		temp_som++;                         //incrementa temp_som
0x0050	0x4BF2      	INFSNZ      _temp_som, 1, 1
0x0052	0x2BF3      	INCF        _temp_som+1, 1, 1
;TCC_5.c,199 :: 		temp_inc++;                         //incrementa temp_inc
0x0054	0x0101      	MOVLB       1
0x0056	0x4B08      	INFSNZ      _temp_inc, 1, 1
0x0058	0x2B09      	INCF        _temp_inc+1, 1, 1
;TCC_5.c,200 :: 		temp_lcd++;                         //incrementa temp_lcd
0x005A	0x0100      	MOVLB       0
0x005C	0x4BE8      	INFSNZ      _temp_lcd, 1, 1
0x005E	0x2BE9      	INCF        _temp_lcd+1, 1, 1
;TCC_5.c,201 :: 		temp_num++;                         //icrementa temp_num
0x0060	0x0101      	MOVLB       1
0x0062	0x4B04      	INFSNZ      _temp_num, 1, 1
0x0064	0x2B05      	INCF        _temp_num+1, 1, 1
;TCC_5.c,203 :: 		}                                     //end if TMR0IF
L_interrupt0:
;TCC_5.c,207 :: 		piscaLED();                           //executa piscaLED
0x0066	0xF00CEC7B  	CALL        _piscaLED, 0
;TCC_5.c,208 :: 		timebase();                           //executa timebase
0x006A	0xF00DEC66  	CALL        _timebase, 0
;TCC_5.c,209 :: 		timebase2();                          //executa timebase2
0x006E	0xF00CEC49  	CALL        _timebase2, 0
;TCC_5.c,210 :: 		timebase3();                          //executa timebase3
0x0072	0xF00CEC17  	CALL        _timebase3, 0
;TCC_5.c,211 :: 		timebase4();                          //executa timebase4
0x0076	0xF00BECE5  	CALL        _timebase4, 0
;TCC_5.c,214 :: 		}                                          //end interrupt()
L_end_interrupt:
L__interrupt430:
0x007A	0xF000C018  	MOVFF       24, R0
0x007E	0xF00BC017  	MOVFF       23, R11
0x0082	0xF00CC016  	MOVFF       22, R12
0x0086	0xF00DC015  	MOVFF       21, R13
0x008A	0x0011      	RETFIE      1
; end of _interrupt
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x008C	0x0E03      	MOVLW       3
0x008E	0x6E0D      	MOVWF       R13, 0
L_Delay_1us0:
0x0090	0x2E0D      	DECFSZ      R13, 1, 0
0x0092	0xD7FE      	BRA         L_Delay_1us0
0x0094	0x0000      	NOP
0x0096	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x0098	0x0012      	RETURN      0
; end of _Delay_1us
_Delay_5500us:
;__Lib_Delays.c,31 :: 		void Delay_5500us() {
;__Lib_Delays.c,32 :: 		Delay_us(5500);
0x009A	0x0E56      	MOVLW       86
0x009C	0x6E0C      	MOVWF       R12, 0
0x009E	0x0EB5      	MOVLW       181
0x00A0	0x6E0D      	MOVWF       R13, 0
L_Delay_5500us6:
0x00A2	0x2E0D      	DECFSZ      R13, 1, 0
0x00A4	0xD7FE      	BRA         L_Delay_5500us6
0x00A6	0x2E0C      	DECFSZ      R12, 1, 0
0x00A8	0xD7FC      	BRA         L_Delay_5500us6
0x00AA	0x0000      	NOP
0x00AC	0x0000      	NOP
;__Lib_Delays.c,33 :: 		}
L_end_Delay_5500us:
0x00AE	0x0012      	RETURN      0
; end of _Delay_5500us
_Delay_50us:
;__Lib_Delays.c,19 :: 		void Delay_50us() {
;__Lib_Delays.c,20 :: 		Delay_us(50);
0x00B0	0x0EC7      	MOVLW       199
0x00B2	0x6E0D      	MOVWF       R13, 0
L_Delay_50us3:
0x00B4	0x2E0D      	DECFSZ      R13, 1, 0
0x00B6	0xD7FE      	BRA         L_Delay_50us3
0x00B8	0x0000      	NOP
0x00BA	0x0000      	NOP
;__Lib_Delays.c,21 :: 		}
L_end_Delay_50us:
0x00BC	0x0012      	RETURN      0
; end of _Delay_50us
_Lcd_Cmd:
;__Lib_Lcd.c,18 :: 		
;__Lib_Lcd.c,20 :: 		
0x00BE	0x0101      	MOVLB       1
0x00C0	0xBF2A      	BTFSC       FARG_Lcd_Cmd_out_char, 7, 1
0x00C2	0xD002      	BRA         L__Lcd_Cmd21
0x00C4	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x00C6	0xD001      	BRA         L__Lcd_Cmd22
L__Lcd_Cmd21:
0x00C8	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd22:
;__Lib_Lcd.c,21 :: 		
0x00CA	0xBD2A      	BTFSC       FARG_Lcd_Cmd_out_char, 6, 1
0x00CC	0xD002      	BRA         L__Lcd_Cmd23
0x00CE	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x00D0	0xD001      	BRA         L__Lcd_Cmd24
L__Lcd_Cmd23:
0x00D2	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd24:
;__Lib_Lcd.c,22 :: 		
0x00D4	0xBB2A      	BTFSC       FARG_Lcd_Cmd_out_char, 5, 1
0x00D6	0xD002      	BRA         L__Lcd_Cmd25
0x00D8	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x00DA	0xD001      	BRA         L__Lcd_Cmd26
L__Lcd_Cmd25:
0x00DC	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd26:
;__Lib_Lcd.c,23 :: 		
0x00DE	0xB92A      	BTFSC       FARG_Lcd_Cmd_out_char, 4, 1
0x00E0	0xD002      	BRA         L__Lcd_Cmd27
0x00E2	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x00E4	0xD001      	BRA         L__Lcd_Cmd28
L__Lcd_Cmd27:
0x00E6	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd28:
;__Lib_Lcd.c,25 :: 		
0x00E8	0xB50C      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x00EA	0xD002      	BRA         L__Lcd_Cmd29
0x00EC	0x8483      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x00EE	0xD001      	BRA         L__Lcd_Cmd30
L__Lcd_Cmd29:
0x00F0	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd30:
;__Lib_Lcd.c,28 :: 		
0x00F2	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,29 :: 		
0x00F4	0xDFCB      	RCALL       _Delay_1us
;__Lib_Lcd.c,30 :: 		
0x00F6	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,33 :: 		
0x00F8	0xB72A      	BTFSC       FARG_Lcd_Cmd_out_char, 3, 1
0x00FA	0xD002      	BRA         L__Lcd_Cmd31
0x00FC	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x00FE	0xD001      	BRA         L__Lcd_Cmd32
L__Lcd_Cmd31:
0x0100	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd32:
;__Lib_Lcd.c,34 :: 		
0x0102	0xB52A      	BTFSC       FARG_Lcd_Cmd_out_char, 2, 1
0x0104	0xD002      	BRA         L__Lcd_Cmd33
0x0106	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x0108	0xD001      	BRA         L__Lcd_Cmd34
L__Lcd_Cmd33:
0x010A	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd34:
;__Lib_Lcd.c,35 :: 		
0x010C	0xB32A      	BTFSC       FARG_Lcd_Cmd_out_char, 1, 1
0x010E	0xD002      	BRA         L__Lcd_Cmd35
0x0110	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x0112	0xD001      	BRA         L__Lcd_Cmd36
L__Lcd_Cmd35:
0x0114	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd36:
;__Lib_Lcd.c,36 :: 		
0x0116	0xB12A      	BTFSC       FARG_Lcd_Cmd_out_char, 0, 1
0x0118	0xD002      	BRA         L__Lcd_Cmd37
0x011A	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x011C	0xD001      	BRA         L__Lcd_Cmd38
L__Lcd_Cmd37:
0x011E	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd38:
;__Lib_Lcd.c,38 :: 		
0x0120	0xB50C      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x0122	0xD002      	BRA         L__Lcd_Cmd39
0x0124	0x8483      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x0126	0xD001      	BRA         L__Lcd_Cmd40
L__Lcd_Cmd39:
0x0128	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd40:
;__Lib_Lcd.c,40 :: 		
0x012A	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,41 :: 		
0x012C	0xDFAF      	RCALL       _Delay_1us
;__Lib_Lcd.c,42 :: 		
0x012E	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,44 :: 		
0x0130	0xA50C      	BTFSS       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x0132	0xD002      	BRA         L_Lcd_Cmd0
;__Lib_Lcd.c,45 :: 		
0x0134	0xDFB2      	RCALL       _Delay_5500us
0x0136	0xD001      	BRA         L_Lcd_Cmd1
L_Lcd_Cmd0:
;__Lib_Lcd.c,47 :: 		
0x0138	0xDFBB      	RCALL       _Delay_50us
L_Lcd_Cmd1:
;__Lib_Lcd.c,48 :: 		
L_end_Lcd_Cmd:
0x013A	0x0012      	RETURN      0
; end of _Lcd_Cmd
_abre_mot:
;TCC_5.c,1375 :: 		void abre_mot()
;TCC_5.c,1377 :: 		open_bit  = 0x01;                                //seta bit de abertura
0x013C	0x0101      	MOVLB       1
0x013E	0x830B      	BSF         _open_bit, BitPos(_open_bit+0), 1
;TCC_5.c,1378 :: 		close_bit = 0x00;                                //limpa bit de fechamento
0x0140	0x950B      	BCF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,1379 :: 		x_mot     = 0x00;                                //zera x_mot
0x0142	0x0100      	MOVLB       0
0x0144	0x6BF0      	CLRF        _x_mot, 1
0x0146	0x6BF1      	CLRF        _x_mot+1, 1
;TCC_5.c,1381 :: 		}                                                 //end abre_mot()
L_end_abre_mot:
0x0148	0x0012      	RETURN      0
; end of _abre_mot
_fecha_mot:
;TCC_5.c,1561 :: 		void fecha_mot()
;TCC_5.c,1563 :: 		open_bit  = 0x00;                                //limpa o bit de abertura
0x014A	0x0101      	MOVLB       1
0x014C	0x930B      	BCF         _open_bit, BitPos(_open_bit+0), 1
;TCC_5.c,1564 :: 		close_bit = 0x01;                                //seta o bit de fechamento
0x014E	0x850B      	BSF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,1565 :: 		x_mot     = 0x00;                                //zera x_mot
0x0150	0x0100      	MOVLB       0
0x0152	0x6BF0      	CLRF        _x_mot, 1
0x0154	0x6BF1      	CLRF        _x_mot+1, 1
;TCC_5.c,1567 :: 		}                                                 //end fecha_mot()
L_end_fecha_mot:
0x0156	0x0012      	RETURN      0
; end of _fecha_mot
_Lcd_Chr_CP:
;__Lib_Lcd.c,50 :: 		
;__Lib_Lcd.c,52 :: 		
0x0158	0x0101      	MOVLB       1
0x015A	0x950C      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,53 :: 		
0x015C	0xF12AC129  	MOVFF       FARG_Lcd_Chr_CP_out_char, FARG_Lcd_Cmd_out_char
0x0160	0xDFAE      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,54 :: 		
0x0162	0x850C      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,55 :: 		
L_end_Lcd_Chr_CP:
0x0164	0x0012      	RETURN      0
; end of _Lcd_Chr_CP
_abre_mot2:
;TCC_5.c,1388 :: 		void abre_mot2()
;TCC_5.c,1390 :: 		open_bit2  = 0x01;                               //seta bit de abertura
0x0166	0x0101      	MOVLB       1
0x0168	0x810B      	BSF         _open_bit2, BitPos(_open_bit2+0), 1
;TCC_5.c,1391 :: 		close_bit2 = 0x00;                               //limpa bit de fechamento
0x016A	0x950A      	BCF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,1392 :: 		x_mot2     = 0x00;                               //zera x_mot
0x016C	0x0100      	MOVLB       0
0x016E	0x6BEC      	CLRF        _x_mot2, 1
0x0170	0x6BED      	CLRF        _x_mot2+1, 1
;TCC_5.c,1394 :: 		}                                                 //end abre_mot2()
L_end_abre_mot2:
0x0172	0x0012      	RETURN      0
; end of _abre_mot2
_abre_mot3:
;TCC_5.c,1401 :: 		void abre_mot3()
;TCC_5.c,1403 :: 		open_bit3  = 0x01;                               //seta bit de abertura
0x0174	0x0101      	MOVLB       1
0x0176	0x8F0A      	BSF         _open_bit3, BitPos(_open_bit3+0), 1
;TCC_5.c,1404 :: 		close_bit3 = 0x00;                               //limpa bit de fechamento
0x0178	0x9B0A      	BCF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,1405 :: 		x_mot3     = 0x00;                               //zera x_mot
0x017A	0x0100      	MOVLB       0
0x017C	0x6BE4      	CLRF        _x_mot3, 1
0x017E	0x6BE5      	CLRF        _x_mot3+1, 1
;TCC_5.c,1407 :: 		}                                                 //end abre_mot3()
L_end_abre_mot3:
0x0180	0x0012      	RETURN      0
; end of _abre_mot3
_fecha_mot3:
;TCC_5.c,1587 :: 		void fecha_mot3()
;TCC_5.c,1589 :: 		open_bit3  = 0x00;                               //limpa o bit de abertura
0x0182	0x0101      	MOVLB       1
0x0184	0x9F0A      	BCF         _open_bit3, BitPos(_open_bit3+0), 1
;TCC_5.c,1590 :: 		close_bit3 = 0x01;                               //seta o bit de fechamento
0x0186	0x8B0A      	BSF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,1591 :: 		x_mot3     = 0x00;                               //zera x_mot3
0x0188	0x0100      	MOVLB       0
0x018A	0x6BE4      	CLRF        _x_mot3, 1
0x018C	0x6BE5      	CLRF        _x_mot3+1, 1
;TCC_5.c,1593 :: 		}                                                 //end fecha_mot3()
L_end_fecha_mot3:
0x018E	0x0012      	RETURN      0
; end of _fecha_mot3
_abre_mot4:
;TCC_5.c,1414 :: 		void abre_mot4()
;TCC_5.c,1416 :: 		open_bit4  = 0x01;                               //seta bit de abertura
0x0190	0x0101      	MOVLB       1
0x0192	0x870B      	BSF         _open_bit4, BitPos(_open_bit4+0), 1
;TCC_5.c,1417 :: 		close_bit4 = 0x00;                               //limpa bit de fechamento
0x0194	0x990C      	BCF         _close_bit4, BitPos(_close_bit4+0), 1
;TCC_5.c,1418 :: 		x_mot4     = 0x00;                               //zera x_mot
0x0196	0x0100      	MOVLB       0
0x0198	0x6BE6      	CLRF        _x_mot4, 1
0x019A	0x6BE7      	CLRF        _x_mot4+1, 1
;TCC_5.c,1420 :: 		}                                                 //end abre_mot4()
L_end_abre_mot4:
0x019C	0x0012      	RETURN      0
; end of _abre_mot4
_fecha_mot4:
;TCC_5.c,1600 :: 		void fecha_mot4()
;TCC_5.c,1602 :: 		open_bit4  = 0x00;                               //limpa o bit de abertura
0x019E	0x0101      	MOVLB       1
0x01A0	0x970B      	BCF         _open_bit4, BitPos(_open_bit4+0), 1
;TCC_5.c,1603 :: 		close_bit4 = 0x01;                               //seta o bit de fechamento
0x01A2	0x890C      	BSF         _close_bit4, BitPos(_close_bit4+0), 1
;TCC_5.c,1604 :: 		x_mot4     = 0x00;                               //zera x_mot4
0x01A4	0x0100      	MOVLB       0
0x01A6	0x6BE6      	CLRF        _x_mot4, 1
0x01A8	0x6BE7      	CLRF        _x_mot4+1, 1
;TCC_5.c,1606 :: 		}                                                 //end fecha_mot4()
L_end_fecha_mot4:
0x01AA	0x0012      	RETURN      0
; end of _fecha_mot4
_fecha_mot2:
;TCC_5.c,1574 :: 		void fecha_mot2()
;TCC_5.c,1576 :: 		open_bit2  = 0x00;                               //limpa o bit de abertura
0x01AC	0x0101      	MOVLB       1
0x01AE	0x910B      	BCF         _open_bit2, BitPos(_open_bit2+0), 1
;TCC_5.c,1577 :: 		close_bit2 = 0x01;                               //seta o bit de fechamento
0x01B0	0x850A      	BSF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,1578 :: 		x_mot2     = 0x00;                               //zera x_mot2
0x01B2	0x0100      	MOVLB       0
0x01B4	0x6BEC      	CLRF        _x_mot2, 1
0x01B6	0x6BED      	CLRF        _x_mot2+1, 1
;TCC_5.c,1580 :: 		}                                                 //end fecha_mot2()
L_end_fecha_mot2:
0x01B8	0x0012      	RETURN      0
; end of _fecha_mot2
_mot_aberto2:
;TCC_5.c,1461 :: 		void mot_aberto2()
;TCC_5.c,1463 :: 		if(comp2!=0)                                      //se a quantidade de comprimidos a serem despejados
0x01BA	0x0E00      	MOVLW       0
0x01BC	0x1842      	XORWF       _comp2+1, 0 
0x01BE	0xE102      	BNZ         L__mot_aberto2612
0x01C0	0x0E00      	MOVLW       0
0x01C2	0x1841      	XORWF       _comp2, 0 
L__mot_aberto2612:
0x01C4	0xE02C      	BZ          L_mot_aberto2310
;TCC_5.c,1465 :: 		if(x_mot2<20)                                    //se x_mot2 for menor que 10...
0x01C6	0x0E00      	MOVLW       0
0x01C8	0x0100      	MOVLB       0
0x01CA	0x5DED      	SUBWF       _x_mot2+1, 0, 1
0x01CC	0xE102      	BNZ         L__mot_aberto2613
0x01CE	0x0E14      	MOVLW       20
0x01D0	0x5DEC      	SUBWF       _x_mot2, 0, 1
L__mot_aberto2613:
0x01D2	0xE21D      	BC          L_mot_aberto2311
;TCC_5.c,1467 :: 		SM2=0;                                        //  ||
0x01D4	0x9281      	BCF         PORTB, 1 
;TCC_5.c,1468 :: 		delay_us(18000);                              //  ||
0x01D6	0x0E02      	MOVLW       2
0x01D8	0x6E0B      	MOVWF       R11, 0
0x01DA	0x0E19      	MOVLW       25
0x01DC	0x6E0C      	MOVWF       R12, 0
0x01DE	0x0E81      	MOVLW       129
0x01E0	0x6E0D      	MOVWF       R13, 0
L_mot_aberto2312:
0x01E2	0x2E0D      	DECFSZ      R13, 1, 0
0x01E4	0xD7FE      	BRA         L_mot_aberto2312
0x01E6	0x2E0C      	DECFSZ      R12, 1, 0
0x01E8	0xD7FC      	BRA         L_mot_aberto2312
0x01EA	0x2E0B      	DECFSZ      R11, 1, 0
0x01EC	0xD7FA      	BRA         L_mot_aberto2312
0x01EE	0x0000      	NOP
0x01F0	0x0000      	NOP
;TCC_5.c,1469 :: 		SM2=1;                                        //  ||
0x01F2	0x8281      	BSF         PORTB, 1 
;TCC_5.c,1470 :: 		delay_us(2000);                               //  \/
0x01F4	0x0E20      	MOVLW       32
0x01F6	0x6E0C      	MOVWF       R12, 0
0x01F8	0x0E29      	MOVLW       41
0x01FA	0x6E0D      	MOVWF       R13, 0
L_mot_aberto2313:
0x01FC	0x2E0D      	DECFSZ      R13, 1, 0
0x01FE	0xD7FE      	BRA         L_mot_aberto2313
0x0200	0x2E0C      	DECFSZ      R12, 1, 0
0x0202	0xD7FC      	BRA         L_mot_aberto2313
0x0204	0x0000      	NOP
0x0206	0x0000      	NOP
;TCC_5.c,1471 :: 		SM2=0;                                        //liga motor 2 no sentido horário
0x0208	0x9281      	BCF         PORTB, 1 
;TCC_5.c,1472 :: 		x_mot2 ++;                                    //incrementa x_mot2
0x020A	0x4BEC      	INFSNZ      _x_mot2, 1, 1
0x020C	0x2BED      	INCF        _x_mot2+1, 1, 1
;TCC_5.c,1474 :: 		}                                               //end if x_mot2<10
L_mot_aberto2311:
;TCC_5.c,1476 :: 		if(x_mot2 == 20)                                //se x_mot2 for 10...
0x020E	0x0E00      	MOVLW       0
0x0210	0x19ED      	XORWF       _x_mot2+1, 0, 1
0x0212	0xE102      	BNZ         L__mot_aberto2614
0x0214	0x0E14      	MOVLW       20
0x0216	0x19EC      	XORWF       _x_mot2, 0, 1
L__mot_aberto2614:
0x0218	0xE101      	BNZ         L_mot_aberto2314
;TCC_5.c,1478 :: 		fecha_mot2();                                 //executa a configuração dos bits de controle do motor 2 para fechar
0x021A	0xDFC8      	RCALL       _fecha_mot2
;TCC_5.c,1480 :: 		}                                              //end if x_mot2==10
L_mot_aberto2314:
;TCC_5.c,1481 :: 		}                                                //end if comp!=0
0x021C	0xD003      	BRA         L_mot_aberto2315
L_mot_aberto2310:
;TCC_5.c,1484 :: 		open_bit2 = 0x00;                                //limpa bit de abertura
0x021E	0x0101      	MOVLB       1
0x0220	0x910B      	BCF         _open_bit2, BitPos(_open_bit2+0), 1
;TCC_5.c,1485 :: 		close_bit2= 0x00;                                //limpa bit de fechamento
0x0222	0x950A      	BCF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,1486 :: 		}
L_mot_aberto2315:
;TCC_5.c,1488 :: 		}                                                 //end mot_aberto2()
L_end_mot_aberto2:
0x0224	0x0012      	RETURN      0
; end of _mot_aberto2
_mot_aberto4:
;TCC_5.c,1527 :: 		void mot_aberto4()
;TCC_5.c,1529 :: 		if(comp4!=0)                                      //se a quantidade de comprimidos a serem despejados
0x0226	0x0E00      	MOVLW       0
0x0228	0x183E      	XORWF       _comp4+1, 0 
0x022A	0xE102      	BNZ         L__mot_aberto4620
0x022C	0x0E00      	MOVLW       0
0x022E	0x183D      	XORWF       _comp4, 0 
L__mot_aberto4620:
0x0230	0xE02C      	BZ          L_mot_aberto4322
;TCC_5.c,1531 :: 		if(x_mot4<20)                                    //se x_mot4 for menor que 10...
0x0232	0x0E00      	MOVLW       0
0x0234	0x0100      	MOVLB       0
0x0236	0x5DE7      	SUBWF       _x_mot4+1, 0, 1
0x0238	0xE102      	BNZ         L__mot_aberto4621
0x023A	0x0E14      	MOVLW       20
0x023C	0x5DE6      	SUBWF       _x_mot4, 0, 1
L__mot_aberto4621:
0x023E	0xE21D      	BC          L_mot_aberto4323
;TCC_5.c,1533 :: 		SM4=0;                                        //  ||
0x0240	0x9481      	BCF         PORTB, 2 
;TCC_5.c,1534 :: 		delay_us(18000);                              //  ||
0x0242	0x0E02      	MOVLW       2
0x0244	0x6E0B      	MOVWF       R11, 0
0x0246	0x0E19      	MOVLW       25
0x0248	0x6E0C      	MOVWF       R12, 0
0x024A	0x0E81      	MOVLW       129
0x024C	0x6E0D      	MOVWF       R13, 0
L_mot_aberto4324:
0x024E	0x2E0D      	DECFSZ      R13, 1, 0
0x0250	0xD7FE      	BRA         L_mot_aberto4324
0x0252	0x2E0C      	DECFSZ      R12, 1, 0
0x0254	0xD7FC      	BRA         L_mot_aberto4324
0x0256	0x2E0B      	DECFSZ      R11, 1, 0
0x0258	0xD7FA      	BRA         L_mot_aberto4324
0x025A	0x0000      	NOP
0x025C	0x0000      	NOP
;TCC_5.c,1535 :: 		SM4=1;                                        //  ||
0x025E	0x8481      	BSF         PORTB, 2 
;TCC_5.c,1536 :: 		delay_us(2000);                               //  \/
0x0260	0x0E20      	MOVLW       32
0x0262	0x6E0C      	MOVWF       R12, 0
0x0264	0x0E29      	MOVLW       41
0x0266	0x6E0D      	MOVWF       R13, 0
L_mot_aberto4325:
0x0268	0x2E0D      	DECFSZ      R13, 1, 0
0x026A	0xD7FE      	BRA         L_mot_aberto4325
0x026C	0x2E0C      	DECFSZ      R12, 1, 0
0x026E	0xD7FC      	BRA         L_mot_aberto4325
0x0270	0x0000      	NOP
0x0272	0x0000      	NOP
;TCC_5.c,1537 :: 		SM4=0;                                        // liga motor 1 no sentido horário
0x0274	0x9481      	BCF         PORTB, 2 
;TCC_5.c,1538 :: 		x_mot4 ++;                                    //incrementa x_mot4
0x0276	0x4BE6      	INFSNZ      _x_mot4, 1, 1
0x0278	0x2BE7      	INCF        _x_mot4+1, 1, 1
;TCC_5.c,1540 :: 		}                                               //end if x_mot4<10
L_mot_aberto4323:
;TCC_5.c,1542 :: 		if(x_mot4 == 20)                                //se x_mot4 for 10...
0x027A	0x0E00      	MOVLW       0
0x027C	0x19E7      	XORWF       _x_mot4+1, 0, 1
0x027E	0xE102      	BNZ         L__mot_aberto4622
0x0280	0x0E14      	MOVLW       20
0x0282	0x19E6      	XORWF       _x_mot4, 0, 1
L__mot_aberto4622:
0x0284	0xE101      	BNZ         L_mot_aberto4326
;TCC_5.c,1544 :: 		fecha_mot4();                                 //executa a configuração dos bits de controle do motor 4 para fechar
0x0286	0xDF8B      	RCALL       _fecha_mot4
;TCC_5.c,1546 :: 		}                                              //end if x_mot4==10
L_mot_aberto4326:
;TCC_5.c,1547 :: 		}                                                //end if comp!=0
0x0288	0xD003      	BRA         L_mot_aberto4327
L_mot_aberto4322:
;TCC_5.c,1550 :: 		open_bit4 = 0x00;                                //limpa bit de abertura
0x028A	0x0101      	MOVLB       1
0x028C	0x970B      	BCF         _open_bit4, BitPos(_open_bit4+0), 1
;TCC_5.c,1551 :: 		close_bit4= 0x00;                                //limpa bit de fechamento
0x028E	0x990C      	BCF         _close_bit4, BitPos(_close_bit4+0), 1
;TCC_5.c,1552 :: 		}
L_mot_aberto4327:
;TCC_5.c,1554 :: 		}                                                 //end mot_aberto4()
L_end_mot_aberto4:
0x0290	0x0012      	RETURN      0
; end of _mot_aberto4
_mot_fechado4:
;TCC_5.c,1702 :: 		void mot_fechado4()
;TCC_5.c,1704 :: 		if(comp4!=0)                                      //se a quantidade de comprimidos à despejar
0x0292	0x0E00      	MOVLW       0
0x0294	0x183E      	XORWF       _comp4+1, 0 
0x0296	0xE102      	BNZ         L__mot_fechado4640
0x0298	0x0E00      	MOVLW       0
0x029A	0x183D      	XORWF       _comp4, 0 
L__mot_fechado4640:
0x029C	0xE02C      	BZ          L_mot_fechado4343
;TCC_5.c,1706 :: 		if(x_mot4<20)                                   //se x_mot4 for menor que 10
0x029E	0x0E00      	MOVLW       0
0x02A0	0x0100      	MOVLB       0
0x02A2	0x5DE7      	SUBWF       _x_mot4+1, 0, 1
0x02A4	0xE102      	BNZ         L__mot_fechado4641
0x02A6	0x0E14      	MOVLW       20
0x02A8	0x5DE6      	SUBWF       _x_mot4, 0, 1
L__mot_fechado4641:
0x02AA	0xE21A      	BC          L_mot_fechado4344
;TCC_5.c,1708 :: 		SM4=0;                                        //  ||
0x02AC	0x9481      	BCF         PORTB, 2 
;TCC_5.c,1709 :: 		delay_us(18500);                              //  ||
0x02AE	0x0E02      	MOVLW       2
0x02B0	0x6E0B      	MOVWF       R11, 0
0x02B2	0x0E21      	MOVLW       33
0x02B4	0x6E0C      	MOVWF       R12, 0
0x02B6	0x0E4C      	MOVLW       76
0x02B8	0x6E0D      	MOVWF       R13, 0
L_mot_fechado4345:
0x02BA	0x2E0D      	DECFSZ      R13, 1, 0
0x02BC	0xD7FE      	BRA         L_mot_fechado4345
0x02BE	0x2E0C      	DECFSZ      R12, 1, 0
0x02C0	0xD7FC      	BRA         L_mot_fechado4345
0x02C2	0x2E0B      	DECFSZ      R11, 1, 0
0x02C4	0xD7FA      	BRA         L_mot_fechado4345
0x02C6	0x0000      	NOP
;TCC_5.c,1710 :: 		SM4=1;                                        //  ||
0x02C8	0x8481      	BSF         PORTB, 2 
;TCC_5.c,1711 :: 		delay_us(1500);                               //  \/
0x02CA	0x0E18      	MOVLW       24
0x02CC	0x6E0C      	MOVWF       R12, 0
0x02CE	0x0E5F      	MOVLW       95
0x02D0	0x6E0D      	MOVWF       R13, 0
L_mot_fechado4346:
0x02D2	0x2E0D      	DECFSZ      R13, 1, 0
0x02D4	0xD7FE      	BRA         L_mot_fechado4346
0x02D6	0x2E0C      	DECFSZ      R12, 1, 0
0x02D8	0xD7FC      	BRA         L_mot_fechado4346
;TCC_5.c,1712 :: 		SM4=0;                                        //leva o motor 4 para a posição inicial
0x02DA	0x9481      	BCF         PORTB, 2 
;TCC_5.c,1713 :: 		x_mot4++;                                     //incrementa x_mot4
0x02DC	0x4BE6      	INFSNZ      _x_mot4, 1, 1
0x02DE	0x2BE7      	INCF        _x_mot4+1, 1, 1
;TCC_5.c,1715 :: 		}                                               //end if x_mot4<10
L_mot_fechado4344:
;TCC_5.c,1717 :: 		if(x_mot4==20)                                  //se x_mot4 for 10
0x02E0	0x0E00      	MOVLW       0
0x02E2	0x19E7      	XORWF       _x_mot4+1, 0, 1
0x02E4	0xE102      	BNZ         L__mot_fechado4642
0x02E6	0x0E14      	MOVLW       20
0x02E8	0x19E6      	XORWF       _x_mot4, 0, 1
L__mot_fechado4642:
0x02EA	0xE105      	BNZ         L_mot_fechado4347
;TCC_5.c,1719 :: 		abre_mot4();                                 //define os bit de controle do motor para abrir
0x02EC	0xDF51      	RCALL       _abre_mot4
;TCC_5.c,1720 :: 		comp4--;                                     //decrementa comp4
0x02EE	0x0E01      	MOVLW       1
0x02F0	0x5E3D      	SUBWF       _comp4, 1 
0x02F2	0x0E00      	MOVLW       0
0x02F4	0x5A3E      	SUBWFB      _comp4+1, 1 
;TCC_5.c,1722 :: 		}                                             //end if x_mot4==10
L_mot_fechado4347:
;TCC_5.c,1724 :: 		}                                                //end if comp4!=0
L_mot_fechado4343:
;TCC_5.c,1726 :: 		}                                                 //end mot_fechado4()
L_end_mot_fechado4:
0x02F6	0x0012      	RETURN      0
; end of _mot_fechado4
_mot_aberto3:
;TCC_5.c,1494 :: 		void mot_aberto3()
;TCC_5.c,1496 :: 		if(comp3!=0)                                     //se a quantidade de comprimidos a serem despejados
0x02F8	0x0E00      	MOVLW       0
0x02FA	0x1844      	XORWF       _comp3+1, 0 
0x02FC	0xE102      	BNZ         L__mot_aberto3616
0x02FE	0x0E00      	MOVLW       0
0x0300	0x1843      	XORWF       _comp3, 0 
L__mot_aberto3616:
0x0302	0xE02C      	BZ          L_mot_aberto3316
;TCC_5.c,1498 :: 		if(x_mot3<20)                                    //se x_mot3 for menor que 10...
0x0304	0x0E00      	MOVLW       0
0x0306	0x0100      	MOVLB       0
0x0308	0x5DE5      	SUBWF       _x_mot3+1, 0, 1
0x030A	0xE102      	BNZ         L__mot_aberto3617
0x030C	0x0E14      	MOVLW       20
0x030E	0x5DE4      	SUBWF       _x_mot3, 0, 1
L__mot_aberto3617:
0x0310	0xE21D      	BC          L_mot_aberto3317
;TCC_5.c,1500 :: 		SM3=0;                                        //  ||
0x0312	0x9681      	BCF         PORTB, 3 
;TCC_5.c,1501 :: 		delay_us(18000);                              //  ||
0x0314	0x0E02      	MOVLW       2
0x0316	0x6E0B      	MOVWF       R11, 0
0x0318	0x0E19      	MOVLW       25
0x031A	0x6E0C      	MOVWF       R12, 0
0x031C	0x0E81      	MOVLW       129
0x031E	0x6E0D      	MOVWF       R13, 0
L_mot_aberto3318:
0x0320	0x2E0D      	DECFSZ      R13, 1, 0
0x0322	0xD7FE      	BRA         L_mot_aberto3318
0x0324	0x2E0C      	DECFSZ      R12, 1, 0
0x0326	0xD7FC      	BRA         L_mot_aberto3318
0x0328	0x2E0B      	DECFSZ      R11, 1, 0
0x032A	0xD7FA      	BRA         L_mot_aberto3318
0x032C	0x0000      	NOP
0x032E	0x0000      	NOP
;TCC_5.c,1502 :: 		SM3=1;                                        //  ||
0x0330	0x8681      	BSF         PORTB, 3 
;TCC_5.c,1503 :: 		delay_us(2000);                               //  \/
0x0332	0x0E20      	MOVLW       32
0x0334	0x6E0C      	MOVWF       R12, 0
0x0336	0x0E29      	MOVLW       41
0x0338	0x6E0D      	MOVWF       R13, 0
L_mot_aberto3319:
0x033A	0x2E0D      	DECFSZ      R13, 1, 0
0x033C	0xD7FE      	BRA         L_mot_aberto3319
0x033E	0x2E0C      	DECFSZ      R12, 1, 0
0x0340	0xD7FC      	BRA         L_mot_aberto3319
0x0342	0x0000      	NOP
0x0344	0x0000      	NOP
;TCC_5.c,1504 :: 		SM3=0;                                        // liga motor 1 no sentido horário
0x0346	0x9681      	BCF         PORTB, 3 
;TCC_5.c,1505 :: 		x_mot3 ++;                                    //incrementa x_mot3
0x0348	0x4BE4      	INFSNZ      _x_mot3, 1, 1
0x034A	0x2BE5      	INCF        _x_mot3+1, 1, 1
;TCC_5.c,1507 :: 		}                                               //end if x_mot3<10
L_mot_aberto3317:
;TCC_5.c,1509 :: 		if(x_mot3 == 20)                                //se x_mot3 for 10...
0x034C	0x0E00      	MOVLW       0
0x034E	0x19E5      	XORWF       _x_mot3+1, 0, 1
0x0350	0xE102      	BNZ         L__mot_aberto3618
0x0352	0x0E14      	MOVLW       20
0x0354	0x19E4      	XORWF       _x_mot3, 0, 1
L__mot_aberto3618:
0x0356	0xE101      	BNZ         L_mot_aberto3320
;TCC_5.c,1511 :: 		fecha_mot3();                                 //executa a configuração dos bits de controle do motor 3 para fechar
0x0358	0xDF14      	RCALL       _fecha_mot3
;TCC_5.c,1513 :: 		}                                              //end if x_mot3==10
L_mot_aberto3320:
;TCC_5.c,1514 :: 		}                                                //end if comp!=0
0x035A	0xD003      	BRA         L_mot_aberto3321
L_mot_aberto3316:
;TCC_5.c,1517 :: 		open_bit3 = 0x00;                               //limpa bit de abertura
0x035C	0x0101      	MOVLB       1
0x035E	0x9F0A      	BCF         _open_bit3, BitPos(_open_bit3+0), 1
;TCC_5.c,1518 :: 		close_bit3= 0x00;                               //limpa bit de fechamento
0x0360	0x9B0A      	BCF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,1519 :: 		}
L_mot_aberto3321:
;TCC_5.c,1521 :: 		}                                                 //end mot_aberto3()
L_end_mot_aberto3:
0x0362	0x0012      	RETURN      0
; end of _mot_aberto3
_mot_fechado3:
;TCC_5.c,1672 :: 		void mot_fechado3()
;TCC_5.c,1674 :: 		if(comp3!=0)                                      //se a quantidade de comprimidos à despejar
0x0364	0x0E00      	MOVLW       0
0x0366	0x1844      	XORWF       _comp3+1, 0 
0x0368	0xE102      	BNZ         L__mot_fechado3636
0x036A	0x0E00      	MOVLW       0
0x036C	0x1843      	XORWF       _comp3, 0 
L__mot_fechado3636:
0x036E	0xE02C      	BZ          L_mot_fechado3338
;TCC_5.c,1676 :: 		if(x_mot3<20)                                   //se x_mot3 for menor que 10
0x0370	0x0E00      	MOVLW       0
0x0372	0x0100      	MOVLB       0
0x0374	0x5DE5      	SUBWF       _x_mot3+1, 0, 1
0x0376	0xE102      	BNZ         L__mot_fechado3637
0x0378	0x0E14      	MOVLW       20
0x037A	0x5DE4      	SUBWF       _x_mot3, 0, 1
L__mot_fechado3637:
0x037C	0xE21A      	BC          L_mot_fechado3339
;TCC_5.c,1678 :: 		SM3=0;                                        //  ||
0x037E	0x9681      	BCF         PORTB, 3 
;TCC_5.c,1679 :: 		delay_us(18500);                              //  ||
0x0380	0x0E02      	MOVLW       2
0x0382	0x6E0B      	MOVWF       R11, 0
0x0384	0x0E21      	MOVLW       33
0x0386	0x6E0C      	MOVWF       R12, 0
0x0388	0x0E4C      	MOVLW       76
0x038A	0x6E0D      	MOVWF       R13, 0
L_mot_fechado3340:
0x038C	0x2E0D      	DECFSZ      R13, 1, 0
0x038E	0xD7FE      	BRA         L_mot_fechado3340
0x0390	0x2E0C      	DECFSZ      R12, 1, 0
0x0392	0xD7FC      	BRA         L_mot_fechado3340
0x0394	0x2E0B      	DECFSZ      R11, 1, 0
0x0396	0xD7FA      	BRA         L_mot_fechado3340
0x0398	0x0000      	NOP
;TCC_5.c,1680 :: 		SM3=1;                                        //  ||
0x039A	0x8681      	BSF         PORTB, 3 
;TCC_5.c,1681 :: 		delay_us(1500);                               //  \/
0x039C	0x0E18      	MOVLW       24
0x039E	0x6E0C      	MOVWF       R12, 0
0x03A0	0x0E5F      	MOVLW       95
0x03A2	0x6E0D      	MOVWF       R13, 0
L_mot_fechado3341:
0x03A4	0x2E0D      	DECFSZ      R13, 1, 0
0x03A6	0xD7FE      	BRA         L_mot_fechado3341
0x03A8	0x2E0C      	DECFSZ      R12, 1, 0
0x03AA	0xD7FC      	BRA         L_mot_fechado3341
;TCC_5.c,1682 :: 		SM3=0;                                        //leva o motor 3 para a posição inicial
0x03AC	0x9681      	BCF         PORTB, 3 
;TCC_5.c,1683 :: 		x_mot3++;                                     //incrementa x_mot3
0x03AE	0x4BE4      	INFSNZ      _x_mot3, 1, 1
0x03B0	0x2BE5      	INCF        _x_mot3+1, 1, 1
;TCC_5.c,1685 :: 		}                                               //end if x_mot2<10
L_mot_fechado3339:
;TCC_5.c,1687 :: 		if(x_mot3==20)                                  //se x_mot3 for 10
0x03B2	0x0E00      	MOVLW       0
0x03B4	0x19E5      	XORWF       _x_mot3+1, 0, 1
0x03B6	0xE102      	BNZ         L__mot_fechado3638
0x03B8	0x0E14      	MOVLW       20
0x03BA	0x19E4      	XORWF       _x_mot3, 0, 1
L__mot_fechado3638:
0x03BC	0xE105      	BNZ         L_mot_fechado3342
;TCC_5.c,1689 :: 		abre_mot3();                                 //define os bit de controle do motor para abrir
0x03BE	0xDEDA      	RCALL       _abre_mot3
;TCC_5.c,1690 :: 		comp3--;                                     //decrementa comp3
0x03C0	0x0E01      	MOVLW       1
0x03C2	0x5E43      	SUBWF       _comp3, 1 
0x03C4	0x0E00      	MOVLW       0
0x03C6	0x5A44      	SUBWFB      _comp3+1, 1 
;TCC_5.c,1692 :: 		}                                             //end if x_mot3==10
L_mot_fechado3342:
;TCC_5.c,1694 :: 		}                                                //end if comp3!=0
L_mot_fechado3338:
;TCC_5.c,1696 :: 		}                                                 //end mot_fechado3()
L_end_mot_fechado3:
0x03C8	0x0012      	RETURN      0
; end of _mot_fechado3
_mot_fechado:
;TCC_5.c,1612 :: 		void mot_fechado()
;TCC_5.c,1614 :: 		if(comp!=0)                                      //se a quantidade de comprimidos à despejar
0x03CA	0x0E00      	MOVLW       0
0x03CC	0x1840      	XORWF       _comp+1, 0 
0x03CE	0xE102      	BNZ         L__mot_fechado628
0x03D0	0x0E00      	MOVLW       0
0x03D2	0x183F      	XORWF       _comp, 0 
L__mot_fechado628:
0x03D4	0xE02C      	BZ          L_mot_fechado328
;TCC_5.c,1616 :: 		if(x_mot<20)                                     //se x_mot for menor que 10
0x03D6	0x0E00      	MOVLW       0
0x03D8	0x0100      	MOVLB       0
0x03DA	0x5DF1      	SUBWF       _x_mot+1, 0, 1
0x03DC	0xE102      	BNZ         L__mot_fechado629
0x03DE	0x0E14      	MOVLW       20
0x03E0	0x5DF0      	SUBWF       _x_mot, 0, 1
L__mot_fechado629:
0x03E2	0xE21A      	BC          L_mot_fechado329
;TCC_5.c,1618 :: 		SM=0;                                         //  ||
0x03E4	0x9081      	BCF         PORTB, 0 
;TCC_5.c,1619 :: 		delay_us(18500);                              //  ||
0x03E6	0x0E02      	MOVLW       2
0x03E8	0x6E0B      	MOVWF       R11, 0
0x03EA	0x0E21      	MOVLW       33
0x03EC	0x6E0C      	MOVWF       R12, 0
0x03EE	0x0E4C      	MOVLW       76
0x03F0	0x6E0D      	MOVWF       R13, 0
L_mot_fechado330:
0x03F2	0x2E0D      	DECFSZ      R13, 1, 0
0x03F4	0xD7FE      	BRA         L_mot_fechado330
0x03F6	0x2E0C      	DECFSZ      R12, 1, 0
0x03F8	0xD7FC      	BRA         L_mot_fechado330
0x03FA	0x2E0B      	DECFSZ      R11, 1, 0
0x03FC	0xD7FA      	BRA         L_mot_fechado330
0x03FE	0x0000      	NOP
;TCC_5.c,1620 :: 		SM=1;                                         //  ||
0x0400	0x8081      	BSF         PORTB, 0 
;TCC_5.c,1621 :: 		delay_us(1500);                               //  \/
0x0402	0x0E18      	MOVLW       24
0x0404	0x6E0C      	MOVWF       R12, 0
0x0406	0x0E5F      	MOVLW       95
0x0408	0x6E0D      	MOVWF       R13, 0
L_mot_fechado331:
0x040A	0x2E0D      	DECFSZ      R13, 1, 0
0x040C	0xD7FE      	BRA         L_mot_fechado331
0x040E	0x2E0C      	DECFSZ      R12, 1, 0
0x0410	0xD7FC      	BRA         L_mot_fechado331
;TCC_5.c,1622 :: 		SM=0;                                         //leva o motor para a posição inicial
0x0412	0x9081      	BCF         PORTB, 0 
;TCC_5.c,1623 :: 		x_mot++;                                      //incrementa x_mot
0x0414	0x4BF0      	INFSNZ      _x_mot, 1, 1
0x0416	0x2BF1      	INCF        _x_mot+1, 1, 1
;TCC_5.c,1625 :: 		}                                               //end if x_mot<10
L_mot_fechado329:
;TCC_5.c,1627 :: 		if(x_mot==20)                                   //se x_mot for 10
0x0418	0x0E00      	MOVLW       0
0x041A	0x19F1      	XORWF       _x_mot+1, 0, 1
0x041C	0xE102      	BNZ         L__mot_fechado630
0x041E	0x0E14      	MOVLW       20
0x0420	0x19F0      	XORWF       _x_mot, 0, 1
L__mot_fechado630:
0x0422	0xE105      	BNZ         L_mot_fechado332
;TCC_5.c,1629 :: 		abre_mot();                                  //define os bit de controle do motor para abrir
0x0424	0xDE8B      	RCALL       _abre_mot
;TCC_5.c,1630 :: 		comp--;                                      //decrementa comp
0x0426	0x0E01      	MOVLW       1
0x0428	0x5E3F      	SUBWF       _comp, 1 
0x042A	0x0E00      	MOVLW       0
0x042C	0x5A40      	SUBWFB      _comp+1, 1 
;TCC_5.c,1632 :: 		}                                             //end if x_mot==10
L_mot_fechado332:
;TCC_5.c,1634 :: 		}                                                //end if comp!=0
L_mot_fechado328:
;TCC_5.c,1636 :: 		}                                                 //end mot_fechado
L_end_mot_fechado:
0x042E	0x0012      	RETURN      0
; end of _mot_fechado
_mot_fechado2:
;TCC_5.c,1642 :: 		void mot_fechado2()
;TCC_5.c,1644 :: 		if(comp2!=0)                                      //se a quantidade de comprimidos à despejar
0x0430	0x0E00      	MOVLW       0
0x0432	0x1842      	XORWF       _comp2+1, 0 
0x0434	0xE102      	BNZ         L__mot_fechado2632
0x0436	0x0E00      	MOVLW       0
0x0438	0x1841      	XORWF       _comp2, 0 
L__mot_fechado2632:
0x043A	0xE02C      	BZ          L_mot_fechado2333
;TCC_5.c,1646 :: 		if(x_mot2<20)                                   //se x_mot2 for menor que 10
0x043C	0x0E00      	MOVLW       0
0x043E	0x0100      	MOVLB       0
0x0440	0x5DED      	SUBWF       _x_mot2+1, 0, 1
0x0442	0xE102      	BNZ         L__mot_fechado2633
0x0444	0x0E14      	MOVLW       20
0x0446	0x5DEC      	SUBWF       _x_mot2, 0, 1
L__mot_fechado2633:
0x0448	0xE21A      	BC          L_mot_fechado2334
;TCC_5.c,1648 :: 		SM2=0;                                        //  ||
0x044A	0x9281      	BCF         PORTB, 1 
;TCC_5.c,1649 :: 		delay_us(18500);                              //  ||
0x044C	0x0E02      	MOVLW       2
0x044E	0x6E0B      	MOVWF       R11, 0
0x0450	0x0E21      	MOVLW       33
0x0452	0x6E0C      	MOVWF       R12, 0
0x0454	0x0E4C      	MOVLW       76
0x0456	0x6E0D      	MOVWF       R13, 0
L_mot_fechado2335:
0x0458	0x2E0D      	DECFSZ      R13, 1, 0
0x045A	0xD7FE      	BRA         L_mot_fechado2335
0x045C	0x2E0C      	DECFSZ      R12, 1, 0
0x045E	0xD7FC      	BRA         L_mot_fechado2335
0x0460	0x2E0B      	DECFSZ      R11, 1, 0
0x0462	0xD7FA      	BRA         L_mot_fechado2335
0x0464	0x0000      	NOP
;TCC_5.c,1650 :: 		SM2=1;                                        //  ||
0x0466	0x8281      	BSF         PORTB, 1 
;TCC_5.c,1651 :: 		delay_us(1500);                               //  \/
0x0468	0x0E18      	MOVLW       24
0x046A	0x6E0C      	MOVWF       R12, 0
0x046C	0x0E5F      	MOVLW       95
0x046E	0x6E0D      	MOVWF       R13, 0
L_mot_fechado2336:
0x0470	0x2E0D      	DECFSZ      R13, 1, 0
0x0472	0xD7FE      	BRA         L_mot_fechado2336
0x0474	0x2E0C      	DECFSZ      R12, 1, 0
0x0476	0xD7FC      	BRA         L_mot_fechado2336
;TCC_5.c,1652 :: 		SM2=0;                                        //leva o motor 2 para a posição inicial
0x0478	0x9281      	BCF         PORTB, 1 
;TCC_5.c,1653 :: 		x_mot2++;                                     //incrementa x_mot2
0x047A	0x4BEC      	INFSNZ      _x_mot2, 1, 1
0x047C	0x2BED      	INCF        _x_mot2+1, 1, 1
;TCC_5.c,1655 :: 		}                                               //end if x_mot2<10
L_mot_fechado2334:
;TCC_5.c,1657 :: 		if(x_mot2==20)                                  //se x_mot2 for 10
0x047E	0x0E00      	MOVLW       0
0x0480	0x19ED      	XORWF       _x_mot2+1, 0, 1
0x0482	0xE102      	BNZ         L__mot_fechado2634
0x0484	0x0E14      	MOVLW       20
0x0486	0x19EC      	XORWF       _x_mot2, 0, 1
L__mot_fechado2634:
0x0488	0xE105      	BNZ         L_mot_fechado2337
;TCC_5.c,1659 :: 		abre_mot2();                                 //define os bit de controle do motor para abrir
0x048A	0xDE6D      	RCALL       _abre_mot2
;TCC_5.c,1660 :: 		comp2--;                                     //decrementa comp2
0x048C	0x0E01      	MOVLW       1
0x048E	0x5E41      	SUBWF       _comp2, 1 
0x0490	0x0E00      	MOVLW       0
0x0492	0x5A42      	SUBWFB      _comp2+1, 1 
;TCC_5.c,1662 :: 		}                                             //end if x_mot2==10
L_mot_fechado2337:
;TCC_5.c,1664 :: 		}                                               //end if comp!=0
L_mot_fechado2333:
;TCC_5.c,1666 :: 		}                                                 //end mot_fechado2()
L_end_mot_fechado2:
0x0494	0x0012      	RETURN      0
; end of _mot_fechado2
_mot_aberto:
;TCC_5.c,1426 :: 		void mot_aberto()
;TCC_5.c,1428 :: 		if(comp!=0)                                      //se a quantidade de comprimidos a serem despejados
0x0496	0x0E00      	MOVLW       0
0x0498	0x1840      	XORWF       _comp+1, 0 
0x049A	0xE102      	BNZ         L__mot_aberto608
0x049C	0x0E00      	MOVLW       0
0x049E	0x183F      	XORWF       _comp, 0 
L__mot_aberto608:
0x04A0	0xE02C      	BZ          L_mot_aberto304
;TCC_5.c,1431 :: 		if(x_mot<20)                                     //se x_mot for menor que 10...
0x04A2	0x0E00      	MOVLW       0
0x04A4	0x0100      	MOVLB       0
0x04A6	0x5DF1      	SUBWF       _x_mot+1, 0, 1
0x04A8	0xE102      	BNZ         L__mot_aberto609
0x04AA	0x0E14      	MOVLW       20
0x04AC	0x5DF0      	SUBWF       _x_mot, 0, 1
L__mot_aberto609:
0x04AE	0xE21D      	BC          L_mot_aberto305
;TCC_5.c,1433 :: 		SM=0;                                         //  ||
0x04B0	0x9081      	BCF         PORTB, 0 
;TCC_5.c,1434 :: 		delay_us(18000);                              //  ||
0x04B2	0x0E02      	MOVLW       2
0x04B4	0x6E0B      	MOVWF       R11, 0
0x04B6	0x0E19      	MOVLW       25
0x04B8	0x6E0C      	MOVWF       R12, 0
0x04BA	0x0E81      	MOVLW       129
0x04BC	0x6E0D      	MOVWF       R13, 0
L_mot_aberto306:
0x04BE	0x2E0D      	DECFSZ      R13, 1, 0
0x04C0	0xD7FE      	BRA         L_mot_aberto306
0x04C2	0x2E0C      	DECFSZ      R12, 1, 0
0x04C4	0xD7FC      	BRA         L_mot_aberto306
0x04C6	0x2E0B      	DECFSZ      R11, 1, 0
0x04C8	0xD7FA      	BRA         L_mot_aberto306
0x04CA	0x0000      	NOP
0x04CC	0x0000      	NOP
;TCC_5.c,1435 :: 		SM=1;                                         //  ||
0x04CE	0x8081      	BSF         PORTB, 0 
;TCC_5.c,1436 :: 		delay_us(2000);                               //  \/
0x04D0	0x0E20      	MOVLW       32
0x04D2	0x6E0C      	MOVWF       R12, 0
0x04D4	0x0E29      	MOVLW       41
0x04D6	0x6E0D      	MOVWF       R13, 0
L_mot_aberto307:
0x04D8	0x2E0D      	DECFSZ      R13, 1, 0
0x04DA	0xD7FE      	BRA         L_mot_aberto307
0x04DC	0x2E0C      	DECFSZ      R12, 1, 0
0x04DE	0xD7FC      	BRA         L_mot_aberto307
0x04E0	0x0000      	NOP
0x04E2	0x0000      	NOP
;TCC_5.c,1437 :: 		SM=0;                                         // liga motor 1 no sentido horário
0x04E4	0x9081      	BCF         PORTB, 0 
;TCC_5.c,1438 :: 		x_mot ++;                                     //incrementa x_mot
0x04E6	0x4BF0      	INFSNZ      _x_mot, 1, 1
0x04E8	0x2BF1      	INCF        _x_mot+1, 1, 1
;TCC_5.c,1440 :: 		}                                               //end if x_mot<10
L_mot_aberto305:
;TCC_5.c,1442 :: 		if(x_mot == 20)                                 //se x_mot for 10...
0x04EA	0x0E00      	MOVLW       0
0x04EC	0x19F1      	XORWF       _x_mot+1, 0, 1
0x04EE	0xE102      	BNZ         L__mot_aberto610
0x04F0	0x0E14      	MOVLW       20
0x04F2	0x19F0      	XORWF       _x_mot, 0, 1
L__mot_aberto610:
0x04F4	0xE101      	BNZ         L_mot_aberto308
;TCC_5.c,1444 :: 		fecha_mot();                                  //executa a configuração dos bits de controle do motor 1 para fechar
0x04F6	0xDE29      	RCALL       _fecha_mot
;TCC_5.c,1446 :: 		}                                              //end if x_mot==10
L_mot_aberto308:
;TCC_5.c,1448 :: 		}                                                //end if comp!=0
0x04F8	0xD003      	BRA         L_mot_aberto309
L_mot_aberto304:
;TCC_5.c,1451 :: 		open_bit = 0x00;                                //limpa bit de abertura
0x04FA	0x0101      	MOVLB       1
0x04FC	0x930B      	BCF         _open_bit, BitPos(_open_bit+0), 1
;TCC_5.c,1452 :: 		close_bit= 0x00;                                //limpa bit de fechamento
0x04FE	0x950B      	BCF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,1453 :: 		}
L_mot_aberto309:
;TCC_5.c,1455 :: 		}                                                 //end mot_aberto()
L_end_mot_aberto:
0x0500	0x0012      	RETURN      0
; end of _mot_aberto
_toca_som:
;TCC_5.c,1350 :: 		void toca_som()
;TCC_5.c,1352 :: 		if(temp_som>3) temp_som=0x00;                    //se temp_som for maior que 3, zera temp_som
0x0502	0x0E00      	MOVLW       0
0x0504	0x6E00      	MOVWF       R0 
0x0506	0x0100      	MOVLB       0
0x0508	0x51F3      	MOVF        _temp_som+1, 0, 1
0x050A	0x5C00      	SUBWF       R0, 0 
0x050C	0xE102      	BNZ         L__toca_som601
0x050E	0x51F2      	MOVF        _temp_som, 0, 1
0x0510	0x0803      	SUBLW       3
L__toca_som601:
0x0512	0xE202      	BC          L_toca_som301
0x0514	0x6BF2      	CLRF        _temp_som, 1
0x0516	0x6BF3      	CLRF        _temp_som+1, 1
L_toca_som301:
;TCC_5.c,1353 :: 		if(temp_som==3)                               //conta 300 milisegundos...
0x0518	0x0E00      	MOVLW       0
0x051A	0x19F3      	XORWF       _temp_som+1, 0, 1
0x051C	0xE102      	BNZ         L__toca_som602
0x051E	0x0E03      	MOVLW       3
0x0520	0x19F2      	XORWF       _temp_som, 0, 1
L__toca_som602:
0x0522	0xE10C      	BNZ         L_toca_som302
;TCC_5.c,1355 :: 		temp_som = 0x00;                             //zera temp_som
0x0524	0x6BF2      	CLRF        _temp_som, 1
0x0526	0x6BF3      	CLRF        _temp_som+1, 1
;TCC_5.c,1356 :: 		SOM = ~SOM;                                  //inverte o estado do buzzer
0x0528	0x7881      	BTG         PORTB, 4 
;TCC_5.c,1357 :: 		vezes++;                                     //incrementa vezes
0x052A	0x4BE2      	INFSNZ      _vezes, 1, 1
0x052C	0x2BE3      	INCF        _vezes+1, 1, 1
;TCC_5.c,1359 :: 		if(!ligar)                                   //se ligar for 0 (desligado)
0x052E	0x0101      	MOVLB       1
0x0530	0xBB0D      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x0532	0xD004      	BRA         L_toca_som303
;TCC_5.c,1361 :: 		vezes = 0x00;                               //zera vezes
0x0534	0x0100      	MOVLB       0
0x0536	0x6BE2      	CLRF        _vezes, 1
0x0538	0x6BE3      	CLRF        _vezes+1, 1
;TCC_5.c,1362 :: 		SOM   = 0x00;                               //desliga o buzzer
0x053A	0x9881      	BCF         PORTB, 4 
;TCC_5.c,1364 :: 		}                                            //end if !ligar
L_toca_som303:
;TCC_5.c,1366 :: 		}                                             //end if temp_som==3
L_toca_som302:
;TCC_5.c,1368 :: 		}                                                 //end toca_som()
L_end_toca_som:
0x053C	0x0012      	RETURN      0
; end of _toca_som
_Lcd_Out:
;__Lib_Lcd.c,184 :: 		
;__Lib_Lcd.c,187 :: 		
0x053E	0xD010      	BRA         L_Lcd_Out11
;__Lib_Lcd.c,188 :: 		
L_Lcd_Out13:
0x0540	0x0E80      	MOVLW       128
0x0542	0x0101      	MOVLB       1
0x0544	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x0546	0xD01A      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,189 :: 		
L_Lcd_Out14:
0x0548	0x0EC0      	MOVLW       192
0x054A	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x054C	0xD017      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,190 :: 		
L_Lcd_Out15:
0x054E	0x0E94      	MOVLW       148
0x0550	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x0552	0xD014      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,191 :: 		
L_Lcd_Out16:
0x0554	0x0ED4      	MOVLW       212
0x0556	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x0558	0xD011      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,192 :: 		
L_Lcd_Out17:
0x055A	0x0E80      	MOVLW       128
0x055C	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
;__Lib_Lcd.c,193 :: 		
0x055E	0xD00E      	BRA         L_Lcd_Out12
L_Lcd_Out11:
0x0560	0x0101      	MOVLB       1
0x0562	0x5124      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0564	0x0A01      	XORLW       1
0x0566	0xE0EC      	BZ          L_Lcd_Out13
0x0568	0x5124      	MOVF        FARG_Lcd_Out_row, 0, 1
0x056A	0x0A02      	XORLW       2
0x056C	0xE0ED      	BZ          L_Lcd_Out14
0x056E	0x5124      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0570	0x0A03      	XORLW       3
0x0572	0xE0ED      	BZ          L_Lcd_Out15
0x0574	0x5124      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0576	0x0A04      	XORLW       4
0x0578	0xE0ED      	BZ          L_Lcd_Out16
0x057A	0xD7EF      	BRA         L_Lcd_Out17
L_Lcd_Out12:
;__Lib_Lcd.c,194 :: 		
0x057C	0x0525      	DECF        FARG_Lcd_Out_column, 0, 1
0x057E	0x6E00      	MOVWF       R0 
0x0580	0x5124      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0582	0x2600      	ADDWF       R0, 1 
0x0584	0xF124C000  	MOVFF       R0, FARG_Lcd_Out_row
;__Lib_Lcd.c,196 :: 		
0x0588	0xF12AC000  	MOVFF       R0, FARG_Lcd_Cmd_out_char
0x058C	0xDD98      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,197 :: 		
0x058E	0x950C      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,198 :: 		
0x0590	0x6B28      	CLRF        Lcd_Out_i_L0, 1
;__Lib_Lcd.c,199 :: 		
L_Lcd_Out18:
0x0592	0x5128      	MOVF        Lcd_Out_i_L0, 0, 1
0x0594	0x2526      	ADDWF       FARG_Lcd_Out_text, 0, 1
0x0596	0x6EE9      	MOVWF       FSR0L 
0x0598	0x0E00      	MOVLW       0
0x059A	0x2127      	ADDWFC      FARG_Lcd_Out_text+1, 0, 1
0x059C	0x6EEA      	MOVWF       FSR0L+1 
0x059E	0x52EE      	MOVF        POSTINC0, 1 
0x05A0	0xE00B      	BZ          L_Lcd_Out19
;__Lib_Lcd.c,200 :: 		
0x05A2	0x5128      	MOVF        Lcd_Out_i_L0, 0, 1
0x05A4	0x2526      	ADDWF       FARG_Lcd_Out_text, 0, 1
0x05A6	0x6EE9      	MOVWF       FSR0L 
0x05A8	0x0E00      	MOVLW       0
0x05AA	0x2127      	ADDWFC      FARG_Lcd_Out_text+1, 0, 1
0x05AC	0x6EEA      	MOVWF       FSR0L+1 
0x05AE	0xF129CFEE  	MOVFF       POSTINC0, FARG_Lcd_Chr_CP_out_char
0x05B2	0xDDD2      	RCALL       _Lcd_Chr_CP
0x05B4	0x2B28      	INCF        Lcd_Out_i_L0, 1, 1
0x05B6	0xD7ED      	BRA         L_Lcd_Out18
L_Lcd_Out19:
;__Lib_Lcd.c,201 :: 		
0x05B8	0x850C      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,202 :: 		
L_end_Lcd_Out:
0x05BA	0x0012      	RETURN      0
; end of _Lcd_Out
_Lcd_Chr:
;__Lib_Lcd.c,65 :: 		
;__Lib_Lcd.c,66 :: 		
0x05BC	0xD010      	BRA         L_Lcd_Chr4
;__Lib_Lcd.c,67 :: 		
L_Lcd_Chr6:
0x05BE	0x0E80      	MOVLW       128
0x05C0	0x0101      	MOVLB       1
0x05C2	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x05C4	0xD01A      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,68 :: 		
L_Lcd_Chr7:
0x05C6	0x0EC0      	MOVLW       192
0x05C8	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x05CA	0xD017      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,69 :: 		
L_Lcd_Chr8:
0x05CC	0x0E94      	MOVLW       148
0x05CE	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x05D0	0xD014      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,70 :: 		
L_Lcd_Chr9:
0x05D2	0x0ED4      	MOVLW       212
0x05D4	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x05D6	0xD011      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,71 :: 		
L_Lcd_Chr10:
0x05D8	0x0E80      	MOVLW       128
0x05DA	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
;__Lib_Lcd.c,72 :: 		
0x05DC	0xD00E      	BRA         L_Lcd_Chr5
L_Lcd_Chr4:
0x05DE	0x0101      	MOVLB       1
0x05E0	0x5124      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x05E2	0x0A01      	XORLW       1
0x05E4	0xE0EC      	BZ          L_Lcd_Chr6
0x05E6	0x5124      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x05E8	0x0A02      	XORLW       2
0x05EA	0xE0ED      	BZ          L_Lcd_Chr7
0x05EC	0x5124      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x05EE	0x0A03      	XORLW       3
0x05F0	0xE0ED      	BZ          L_Lcd_Chr8
0x05F2	0x5124      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x05F4	0x0A04      	XORLW       4
0x05F6	0xE0ED      	BZ          L_Lcd_Chr9
0x05F8	0xD7EF      	BRA         L_Lcd_Chr10
L_Lcd_Chr5:
;__Lib_Lcd.c,74 :: 		
0x05FA	0x0525      	DECF        FARG_Lcd_Chr_column, 0, 1
0x05FC	0x6E00      	MOVWF       R0 
0x05FE	0x5124      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x0600	0x2600      	ADDWF       R0, 1 
0x0602	0xF124C000  	MOVFF       R0, FARG_Lcd_Chr_row
;__Lib_Lcd.c,76 :: 		
0x0606	0x850C      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,77 :: 		
0x0608	0xF12AC000  	MOVFF       R0, FARG_Lcd_Cmd_out_char
0x060C	0xDD58      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,79 :: 		
0x060E	0x950C      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,80 :: 		
0x0610	0xF12AC126  	MOVFF       FARG_Lcd_Chr_out_char, FARG_Lcd_Cmd_out_char
0x0614	0xDD54      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,81 :: 		
0x0616	0x850C      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,82 :: 		
L_end_Lcd_Chr:
0x0618	0x0012      	RETURN      0
; end of _Lcd_Chr
_Div_16X16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x061A	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x061C	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x061E	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x0620	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x0622	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x0624	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x0626	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x0628	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x062A	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x062C	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x062E	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x0630	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x0632	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x0634	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x0636	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x0638	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x063A	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x063C	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x063E	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x0640	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x0642	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x0644	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x0646	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x0648	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x064A	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x064C	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16X16_U:
0x064E	0x0012      	RETURN      0
; end of _Div_16X16_U
_luz_lcd:
;TCC_5.c,757 :: 		void luz_lcd()
;TCC_5.c,759 :: 		if(temp_lcd > 15)  temp_lcd = 0x00;
0x0650	0x0E00      	MOVLW       0
0x0652	0x6E00      	MOVWF       R0 
0x0654	0x0100      	MOVLB       0
0x0656	0x51E9      	MOVF        _temp_lcd+1, 0, 1
0x0658	0x5C00      	SUBWF       R0, 0 
0x065A	0xE102      	BNZ         L__luz_lcd525
0x065C	0x51E8      	MOVF        _temp_lcd, 0, 1
0x065E	0x080F      	SUBLW       15
L__luz_lcd525:
0x0660	0xE202      	BC          L_luz_lcd143
0x0662	0x6BE8      	CLRF        _temp_lcd, 1
0x0664	0x6BE9      	CLRF        _temp_lcd+1, 1
L_luz_lcd143:
;TCC_5.c,760 :: 		if(temp_lcd == 15)                               //se o botão for segurado por ~= 1500ms
0x0666	0x0E00      	MOVLW       0
0x0668	0x19E9      	XORWF       _temp_lcd+1, 0, 1
0x066A	0xE102      	BNZ         L__luz_lcd526
0x066C	0x0E0F      	MOVLW       15
0x066E	0x19E8      	XORWF       _temp_lcd, 0, 1
L__luz_lcd526:
0x0670	0xE105      	BNZ         L_luz_lcd144
;TCC_5.c,762 :: 		LCD_LED  = ~LCD_LED;                            //inverte a saída do LED do LCD
0x0672	0x7482      	BTG         PORTC, 2 
;TCC_5.c,763 :: 		temp_lcd = 0x00;                                //zera o temp_lcd
0x0674	0x6BE8      	CLRF        _temp_lcd, 1
0x0676	0x6BE9      	CLRF        _temp_lcd+1, 1
;TCC_5.c,764 :: 		block_cmd = 0x01;                               //bloqueia a ação do botão
0x0678	0x0101      	MOVLB       1
0x067A	0x890D      	BSF         _block_cmd, BitPos(_block_cmd+0), 1
;TCC_5.c,766 :: 		}                                                //end if temp_lcd
L_luz_lcd144:
;TCC_5.c,768 :: 		}                                                 //end void luz_lcd
L_end_luz_lcd:
0x067C	0x0012      	RETURN      0
; end of _luz_lcd
_num_un:
;TCC_5.c,859 :: 		void num_un()
;TCC_5.c,863 :: 		if(option==0)                                    //se option for 0 (dispenser n° 1 selecionado)
0x067E	0x0E00      	MOVLW       0
0x0680	0x0101      	MOVLB       1
0x0682	0x1907      	XORWF       _option+1, 0, 1
0x0684	0xE102      	BNZ         L__num_un552
0x0686	0x0E00      	MOVLW       0
0x0688	0x1906      	XORWF       _option, 0, 1
L__num_un552:
0x068A	0xE13E      	BNZ         L_num_un187
;TCC_5.c,865 :: 		dig2 = num/10;                                  //dígito 2 é igual a num dividido por 10
0x068C	0x0E0A      	MOVLW       10
0x068E	0x6E04      	MOVWF       R4 
0x0690	0x0E00      	MOVLW       0
0x0692	0x6E05      	MOVWF       R5 
0x0694	0xF000C118  	MOVFF       _num, R0
0x0698	0xF001C119  	MOVFF       _num+1, R1
0x069C	0xDFBE      	RCALL       _Div_16X16_U
0x069E	0xF122C000  	MOVFF       R0, FLOC__num_un
0x06A2	0xF123C001  	MOVFF       R1, FLOC__num_un+1
0x06A6	0x0E0A      	MOVLW       10
0x06A8	0x6E04      	MOVWF       R4 
0x06AA	0x0E00      	MOVLW       0
0x06AC	0x6E05      	MOVWF       R5 
0x06AE	0xF000C118  	MOVFF       _num, R0
0x06B2	0xF001C119  	MOVFF       _num+1, R1
0x06B6	0xDFB1      	RCALL       _Div_16X16_U
0x06B8	0xF000C008  	MOVFF       R8, R0
0x06BC	0xF001C009  	MOVFF       R9, R1
;TCC_5.c,866 :: 		dig1 = num%10;                                  //digito 1 é igual a sobra da divisão de num por 10
0x06C0	0xF121C000  	MOVFF       R0, num_un_dig1_L0
;TCC_5.c,868 :: 		LCD_Chr(2,7,dig2+0x30);                         //soma digito 2 com 30 hexa para exibição no display
0x06C4	0x0E02      	MOVLW       2
0x06C6	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x06C8	0x0E07      	MOVLW       7
0x06CA	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x06CC	0x0E30      	MOVLW       48
0x06CE	0x2522      	ADDWF       FLOC__num_un, 0, 1
0x06D0	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x06D2	0xDF74      	RCALL       _Lcd_Chr
;TCC_5.c,869 :: 		LCD_Chr_Cp (dig1+0x30);                         //soma digito 1 com 30 hexa para exibição no display
0x06D4	0x0E30      	MOVLW       48
0x06D6	0x2521      	ADDWF       num_un_dig1_L0, 0, 1
0x06D8	0x6F29      	MOVWF       FARG_Lcd_Chr_CP_out_char, 1
0x06DA	0xDD3E      	RCALL       _Lcd_Chr_CP
;TCC_5.c,871 :: 		if(!un) LCD_Out(2,10,hora);                      //se un for zero, exibe "hora"
0x06DC	0xB10D      	BTFSC       _un, BitPos(_un+0), 1
0x06DE	0xD009      	BRA         L_num_un188
0x06E0	0x0E02      	MOVLW       2
0x06E2	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x06E4	0x0E0A      	MOVLW       10
0x06E6	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x06E8	0x0EFE      	MOVLW       _hora
0x06EA	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x06EC	0x0E00      	MOVLW       hi_addr(_hora)
0x06EE	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x06F0	0xDF26      	RCALL       _Lcd_Out
L_num_un188:
;TCC_5.c,873 :: 		if(un) LCD_Out(2,10,dia);                        //se un for um, exibe "dia"
0x06F2	0xA10D      	BTFSS       _un, BitPos(_un+0), 1
0x06F4	0xD009      	BRA         L_num_un189
0x06F6	0x0E02      	MOVLW       2
0x06F8	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x06FA	0x0E0A      	MOVLW       10
0x06FC	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x06FE	0x0EFA      	MOVLW       _dia
0x0700	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x0702	0x0E00      	MOVLW       hi_addr(_dia)
0x0704	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0706	0xDF1B      	RCALL       _Lcd_Out
L_num_un189:
;TCC_5.c,875 :: 		}                                                //end if option==0
L_num_un187:
;TCC_5.c,878 :: 		if(option==1)                                    //se option for 1 (dispenser n°2 selecionado)
0x0708	0x0E00      	MOVLW       0
0x070A	0x1907      	XORWF       _option+1, 0, 1
0x070C	0xE102      	BNZ         L__num_un553
0x070E	0x0E01      	MOVLW       1
0x0710	0x1906      	XORWF       _option, 0, 1
L__num_un553:
0x0712	0xE13E      	BNZ         L_num_un190
;TCC_5.c,880 :: 		dig2 = num2/10;                                 //digito 2 é igual a num2 dividido por 10
0x0714	0x0E0A      	MOVLW       10
0x0716	0x6E04      	MOVWF       R4 
0x0718	0x0E00      	MOVLW       0
0x071A	0x6E05      	MOVWF       R5 
0x071C	0xF000C11C  	MOVFF       _num2, R0
0x0720	0xF001C11D  	MOVFF       _num2+1, R1
0x0724	0xDF7A      	RCALL       _Div_16X16_U
0x0726	0xF122C000  	MOVFF       R0, FLOC__num_un
0x072A	0xF123C001  	MOVFF       R1, FLOC__num_un+1
0x072E	0x0E0A      	MOVLW       10
0x0730	0x6E04      	MOVWF       R4 
0x0732	0x0E00      	MOVLW       0
0x0734	0x6E05      	MOVWF       R5 
0x0736	0xF000C11C  	MOVFF       _num2, R0
0x073A	0xF001C11D  	MOVFF       _num2+1, R1
0x073E	0xDF6D      	RCALL       _Div_16X16_U
0x0740	0xF000C008  	MOVFF       R8, R0
0x0744	0xF001C009  	MOVFF       R9, R1
;TCC_5.c,881 :: 		dig1 = num2%10;                                 //digito 1 é igual a sobra da divisão de num2 por 10
0x0748	0xF121C000  	MOVFF       R0, num_un_dig1_L0
;TCC_5.c,883 :: 		LCD_Chr(2,7,dig2+0x30);                         //soma digito 2 com 30 hexa para exibição no display
0x074C	0x0E02      	MOVLW       2
0x074E	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x0750	0x0E07      	MOVLW       7
0x0752	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x0754	0x0E30      	MOVLW       48
0x0756	0x2522      	ADDWF       FLOC__num_un, 0, 1
0x0758	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x075A	0xDF30      	RCALL       _Lcd_Chr
;TCC_5.c,884 :: 		LCD_Chr_Cp (dig1+0x30);                         //soma digito 1 com 30 hexa para exibição no display
0x075C	0x0E30      	MOVLW       48
0x075E	0x2521      	ADDWF       num_un_dig1_L0, 0, 1
0x0760	0x6F29      	MOVWF       FARG_Lcd_Chr_CP_out_char, 1
0x0762	0xDCFA      	RCALL       _Lcd_Chr_CP
;TCC_5.c,886 :: 		if(!un2) LCD_Out(2,10,hora);                     //se un2 for zero, exibe "hora"
0x0764	0xB30D      	BTFSC       _un2, BitPos(_un2+0), 1
0x0766	0xD009      	BRA         L_num_un191
0x0768	0x0E02      	MOVLW       2
0x076A	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x076C	0x0E0A      	MOVLW       10
0x076E	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x0770	0x0EFE      	MOVLW       _hora
0x0772	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x0774	0x0E00      	MOVLW       hi_addr(_hora)
0x0776	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0778	0xDEE2      	RCALL       _Lcd_Out
L_num_un191:
;TCC_5.c,888 :: 		if(un2) LCD_Out(2,10,dia);                       //se un2 for um, exibe "dia"
0x077A	0xA30D      	BTFSS       _un2, BitPos(_un2+0), 1
0x077C	0xD009      	BRA         L_num_un192
0x077E	0x0E02      	MOVLW       2
0x0780	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x0782	0x0E0A      	MOVLW       10
0x0784	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x0786	0x0EFA      	MOVLW       _dia
0x0788	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x078A	0x0E00      	MOVLW       hi_addr(_dia)
0x078C	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x078E	0xDED7      	RCALL       _Lcd_Out
L_num_un192:
;TCC_5.c,890 :: 		}                                                //end if option==1
L_num_un190:
;TCC_5.c,892 :: 		if(option==2)                                    //se option for 2 (dispenser n°3 selecionado)
0x0790	0x0E00      	MOVLW       0
0x0792	0x1907      	XORWF       _option+1, 0, 1
0x0794	0xE102      	BNZ         L__num_un554
0x0796	0x0E02      	MOVLW       2
0x0798	0x1906      	XORWF       _option, 0, 1
L__num_un554:
0x079A	0xE13E      	BNZ         L_num_un193
;TCC_5.c,894 :: 		dig2 = num3/10;                                 //digito 2 é igual a num3 dividido por 10
0x079C	0x0E0A      	MOVLW       10
0x079E	0x6E04      	MOVWF       R4 
0x07A0	0x0E00      	MOVLW       0
0x07A2	0x6E05      	MOVWF       R5 
0x07A4	0xF000C11E  	MOVFF       _num3, R0
0x07A8	0xF001C11F  	MOVFF       _num3+1, R1
0x07AC	0xDF36      	RCALL       _Div_16X16_U
0x07AE	0xF122C000  	MOVFF       R0, FLOC__num_un
0x07B2	0xF123C001  	MOVFF       R1, FLOC__num_un+1
0x07B6	0x0E0A      	MOVLW       10
0x07B8	0x6E04      	MOVWF       R4 
0x07BA	0x0E00      	MOVLW       0
0x07BC	0x6E05      	MOVWF       R5 
0x07BE	0xF000C11E  	MOVFF       _num3, R0
0x07C2	0xF001C11F  	MOVFF       _num3+1, R1
0x07C6	0xDF29      	RCALL       _Div_16X16_U
0x07C8	0xF000C008  	MOVFF       R8, R0
0x07CC	0xF001C009  	MOVFF       R9, R1
;TCC_5.c,895 :: 		dig1 = num3%10;                                 //digito 1 é igual a sobra da divisão de num3 por 10
0x07D0	0xF121C000  	MOVFF       R0, num_un_dig1_L0
;TCC_5.c,897 :: 		LCD_Chr(2,7,dig2+0x30);                         //soma digito 2 com 30 hexa para exibição no display
0x07D4	0x0E02      	MOVLW       2
0x07D6	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x07D8	0x0E07      	MOVLW       7
0x07DA	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x07DC	0x0E30      	MOVLW       48
0x07DE	0x2522      	ADDWF       FLOC__num_un, 0, 1
0x07E0	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x07E2	0xDEEC      	RCALL       _Lcd_Chr
;TCC_5.c,898 :: 		LCD_Chr_Cp (dig1+0x30);                         //soma digito 1 com 30 hexa para exibição no display
0x07E4	0x0E30      	MOVLW       48
0x07E6	0x2521      	ADDWF       num_un_dig1_L0, 0, 1
0x07E8	0x6F29      	MOVWF       FARG_Lcd_Chr_CP_out_char, 1
0x07EA	0xDCB6      	RCALL       _Lcd_Chr_CP
;TCC_5.c,900 :: 		if(!un3) LCD_Out(2,10,hora);                     //se un3 for zero, exibe "hora"
0x07EC	0xB70D      	BTFSC       _un3, BitPos(_un3+0), 1
0x07EE	0xD009      	BRA         L_num_un194
0x07F0	0x0E02      	MOVLW       2
0x07F2	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x07F4	0x0E0A      	MOVLW       10
0x07F6	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x07F8	0x0EFE      	MOVLW       _hora
0x07FA	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x07FC	0x0E00      	MOVLW       hi_addr(_hora)
0x07FE	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0800	0xDE9E      	RCALL       _Lcd_Out
L_num_un194:
;TCC_5.c,902 :: 		if(un3) LCD_Out(2,10,dia);                       //se un3 for um, exibe "dia"
0x0802	0xA70D      	BTFSS       _un3, BitPos(_un3+0), 1
0x0804	0xD009      	BRA         L_num_un195
0x0806	0x0E02      	MOVLW       2
0x0808	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x080A	0x0E0A      	MOVLW       10
0x080C	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x080E	0x0EFA      	MOVLW       _dia
0x0810	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x0812	0x0E00      	MOVLW       hi_addr(_dia)
0x0814	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0816	0xDE93      	RCALL       _Lcd_Out
L_num_un195:
;TCC_5.c,904 :: 		}                                                //end if option==2
L_num_un193:
;TCC_5.c,906 :: 		if(option==3)                                    //se option for 3 (dispenser n°4 selecionado)
0x0818	0x0E00      	MOVLW       0
0x081A	0x1907      	XORWF       _option+1, 0, 1
0x081C	0xE102      	BNZ         L__num_un555
0x081E	0x0E03      	MOVLW       3
0x0820	0x1906      	XORWF       _option, 0, 1
L__num_un555:
0x0822	0xE13E      	BNZ         L_num_un196
;TCC_5.c,908 :: 		dig2 = num4/10;                                 //digito 2 é igual a num4 dividido por 10
0x0824	0x0E0A      	MOVLW       10
0x0826	0x6E04      	MOVWF       R4 
0x0828	0x0E00      	MOVLW       0
0x082A	0x6E05      	MOVWF       R5 
0x082C	0xF000C110  	MOVFF       _num4, R0
0x0830	0xF001C111  	MOVFF       _num4+1, R1
0x0834	0xDEF2      	RCALL       _Div_16X16_U
0x0836	0xF122C000  	MOVFF       R0, FLOC__num_un
0x083A	0xF123C001  	MOVFF       R1, FLOC__num_un+1
0x083E	0x0E0A      	MOVLW       10
0x0840	0x6E04      	MOVWF       R4 
0x0842	0x0E00      	MOVLW       0
0x0844	0x6E05      	MOVWF       R5 
0x0846	0xF000C110  	MOVFF       _num4, R0
0x084A	0xF001C111  	MOVFF       _num4+1, R1
0x084E	0xDEE5      	RCALL       _Div_16X16_U
0x0850	0xF000C008  	MOVFF       R8, R0
0x0854	0xF001C009  	MOVFF       R9, R1
;TCC_5.c,909 :: 		dig1 = num4%10;                                 //digito 1 é igual a sobra da divisão de num4 por 10
0x0858	0xF121C000  	MOVFF       R0, num_un_dig1_L0
;TCC_5.c,911 :: 		LCD_Chr(2,7,dig2+0x30);                         //soma digito 2 com 30 hexa para exibição no display
0x085C	0x0E02      	MOVLW       2
0x085E	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x0860	0x0E07      	MOVLW       7
0x0862	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x0864	0x0E30      	MOVLW       48
0x0866	0x2522      	ADDWF       FLOC__num_un, 0, 1
0x0868	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x086A	0xDEA8      	RCALL       _Lcd_Chr
;TCC_5.c,912 :: 		LCD_Chr_Cp (dig1+0x30);                         //soma digito 1 com 30 hexa para exibição no display
0x086C	0x0E30      	MOVLW       48
0x086E	0x2521      	ADDWF       num_un_dig1_L0, 0, 1
0x0870	0x6F29      	MOVWF       FARG_Lcd_Chr_CP_out_char, 1
0x0872	0xDC72      	RCALL       _Lcd_Chr_CP
;TCC_5.c,914 :: 		if(!un4) LCD_Out(2,10,hora);                     //se u4 for zero, exibe "hora"
0x0874	0xB50D      	BTFSC       _un4, BitPos(_un4+0), 1
0x0876	0xD009      	BRA         L_num_un197
0x0878	0x0E02      	MOVLW       2
0x087A	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x087C	0x0E0A      	MOVLW       10
0x087E	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x0880	0x0EFE      	MOVLW       _hora
0x0882	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x0884	0x0E00      	MOVLW       hi_addr(_hora)
0x0886	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0888	0xDE5A      	RCALL       _Lcd_Out
L_num_un197:
;TCC_5.c,916 :: 		if(un4) LCD_Out(2,10,dia);                       //se un4 for um, exibe "dia"
0x088A	0xA50D      	BTFSS       _un4, BitPos(_un4+0), 1
0x088C	0xD009      	BRA         L_num_un198
0x088E	0x0E02      	MOVLW       2
0x0890	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x0892	0x0E0A      	MOVLW       10
0x0894	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x0896	0x0EFA      	MOVLW       _dia
0x0898	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x089A	0x0E00      	MOVLW       hi_addr(_dia)
0x089C	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x089E	0xDE4F      	RCALL       _Lcd_Out
L_num_un198:
;TCC_5.c,918 :: 		}                                                //end if option==3
L_num_un196:
;TCC_5.c,921 :: 		if(option==0)                                   //se dispenser n°1 selecionado
0x08A0	0x0E00      	MOVLW       0
0x08A2	0x1907      	XORWF       _option+1, 0, 1
0x08A4	0xE102      	BNZ         L__num_un556
0x08A6	0x0E00      	MOVLW       0
0x08A8	0x1906      	XORWF       _option, 0, 1
L__num_un556:
0x08AA	0xE108      	BNZ         L_num_un199
;TCC_5.c,924 :: 		LCD_Chr(2,15,digcomp+0x30);                    //soma digito 1 com 30 hexa para exibição no display
0x08AC	0x0E02      	MOVLW       2
0x08AE	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x08B0	0x0E0F      	MOVLW       15
0x08B2	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x08B4	0x0E30      	MOVLW       48
0x08B6	0x250E      	ADDWF       _qtd_comp, 0, 1
0x08B8	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x08BA	0xDE80      	RCALL       _Lcd_Chr
;TCC_5.c,925 :: 		}
L_num_un199:
;TCC_5.c,927 :: 		if(option==1)                                   //se dispenser n°2 selecionado
0x08BC	0x0E00      	MOVLW       0
0x08BE	0x1907      	XORWF       _option+1, 0, 1
0x08C0	0xE102      	BNZ         L__num_un557
0x08C2	0x0E01      	MOVLW       1
0x08C4	0x1906      	XORWF       _option, 0, 1
L__num_un557:
0x08C6	0xE108      	BNZ         L_num_un200
;TCC_5.c,930 :: 		LCD_Chr(2,15,digcomp+0x30);                    //soma digito 1 com 30 hexa para exibição no display
0x08C8	0x0E02      	MOVLW       2
0x08CA	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x08CC	0x0E0F      	MOVLW       15
0x08CE	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x08D0	0x0E30      	MOVLW       48
0x08D2	0x2514      	ADDWF       _qtd_comp2, 0, 1
0x08D4	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x08D6	0xDE72      	RCALL       _Lcd_Chr
;TCC_5.c,931 :: 		}
L_num_un200:
;TCC_5.c,933 :: 		if(option==2)                                   //se dispenser n°3 selecionado
0x08D8	0x0E00      	MOVLW       0
0x08DA	0x1907      	XORWF       _option+1, 0, 1
0x08DC	0xE102      	BNZ         L__num_un558
0x08DE	0x0E02      	MOVLW       2
0x08E0	0x1906      	XORWF       _option, 0, 1
L__num_un558:
0x08E2	0xE108      	BNZ         L_num_un201
;TCC_5.c,936 :: 		LCD_Chr(2,15,digcomp+0x30);                    //soma digito 1 com 30 hexa para exibição no display
0x08E4	0x0E02      	MOVLW       2
0x08E6	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x08E8	0x0E0F      	MOVLW       15
0x08EA	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x08EC	0x0E30      	MOVLW       48
0x08EE	0x2512      	ADDWF       _qtd_comp3, 0, 1
0x08F0	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x08F2	0xDE64      	RCALL       _Lcd_Chr
;TCC_5.c,937 :: 		}
L_num_un201:
;TCC_5.c,939 :: 		if(option==3)                                   //se dispenser n°4 selecionado
0x08F4	0x0E00      	MOVLW       0
0x08F6	0x1907      	XORWF       _option+1, 0, 1
0x08F8	0xE102      	BNZ         L__num_un559
0x08FA	0x0E03      	MOVLW       3
0x08FC	0x1906      	XORWF       _option, 0, 1
L__num_un559:
0x08FE	0xE108      	BNZ         L_num_un202
;TCC_5.c,942 :: 		LCD_Chr(2,15,digcomp+0x30);                    //soma digito 1 com 30 hexa para exibição no display
0x0900	0x0E02      	MOVLW       2
0x0902	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x0904	0x0E0F      	MOVLW       15
0x0906	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x0908	0x0E30      	MOVLW       48
0x090A	0x2516      	ADDWF       _qtd_comp4, 0, 1
0x090C	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x090E	0xDE56      	RCALL       _Lcd_Chr
;TCC_5.c,943 :: 		}
L_num_un202:
;TCC_5.c,946 :: 		}                                                 //end num_un()
L_end_num_un:
0x0910	0x0012      	RETURN      0
; end of _num_un
_Mul_16X16_U:
;__Lib_Math.c,440 :: 		
;__Lib_Math.c,447 :: 		
0x0912	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,448 :: 		
0x0914	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,449 :: 		
0x0916	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,450 :: 		
0x0918	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,451 :: 		
0x091A	0x0204      	MULWF       R4, 0
;__Lib_Math.c,453 :: 		
0x091C	0xF009CFF4  	MOVFF       PRODH, R9
;__Lib_Math.c,454 :: 		
0x0920	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_Math.c,455 :: 		
0x0924	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,456 :: 		
0x0926	0x0205      	MULWF       R5, 0
;__Lib_Math.c,458 :: 		
0x0928	0xF00BCFF4  	MOVFF       PRODH, R11
;__Lib_Math.c,459 :: 		
0x092C	0xF00ACFF3  	MOVFF       PRODL, R10
;__Lib_Math.c,460 :: 		
0x0930	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,461 :: 		
0x0932	0x0205      	MULWF       R5, 0
;__Lib_Math.c,463 :: 		
0x0934	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,464 :: 		
0x0936	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,465 :: 		
0x0938	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,466 :: 		
0x093A	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,467 :: 		
0x093C	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,468 :: 		
0x093E	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,469 :: 		
0x0940	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,470 :: 		
0x0942	0x0204      	MULWF       R4, 0
;__Lib_Math.c,472 :: 		
0x0944	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,473 :: 		
0x0946	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,474 :: 		
0x0948	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,475 :: 		
0x094A	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,476 :: 		
0x094C	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,477 :: 		
0x094E	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,479 :: 		
0x0950	0xF000C008  	MOVFF       R8, R0
;__Lib_Math.c,480 :: 		
0x0954	0xF001C009  	MOVFF       R9, R1
;__Lib_Math.c,481 :: 		
0x0958	0xF002C00A  	MOVFF       R10, R2
;__Lib_Math.c,482 :: 		
0x095C	0xF003C00B  	MOVFF       R11, R3
;__Lib_Math.c,485 :: 		
L_end_Mul_16X16_U:
0x0960	0x0012      	RETURN      0
; end of _Mul_16X16_U
_fast_incr:
;TCC_5.c,681 :: 		void fast_incr()
;TCC_5.c,683 :: 		if(temp_inc>7)temp_inc=0x00;                     //se temp_inc maior que 7, zera temp_inc
0x0962	0x0E00      	MOVLW       0
0x0964	0x6E00      	MOVWF       R0 
0x0966	0x0101      	MOVLB       1
0x0968	0x5109      	MOVF        _temp_inc+1, 0, 1
0x096A	0x5C00      	SUBWF       R0, 0 
0x096C	0xE102      	BNZ         L__fast_incr502
0x096E	0x5108      	MOVF        _temp_inc, 0, 1
0x0970	0x0807      	SUBLW       7
L__fast_incr502:
0x0972	0xE202      	BC          L_fast_incr116
0x0974	0x6B08      	CLRF        _temp_inc, 1
0x0976	0x6B09      	CLRF        _temp_inc+1, 1
L_fast_incr116:
;TCC_5.c,684 :: 		if(temp_inc==7)                                  //conta 700ms...
0x0978	0x0E00      	MOVLW       0
0x097A	0x1909      	XORWF       _temp_inc+1, 0, 1
0x097C	0xE102      	BNZ         L__fast_incr503
0x097E	0x0E07      	MOVLW       7
0x0980	0x1908      	XORWF       _temp_inc, 0, 1
L__fast_incr503:
0x0982	0xE106      	BNZ         L_fast_incr117
;TCC_5.c,686 :: 		temp_inc=0x00;                                  //zera temp_inc
0x0984	0x6B08      	CLRF        _temp_inc, 1
0x0986	0x6B09      	CLRF        _temp_inc+1, 1
;TCC_5.c,687 :: 		fast_inc=0x01;                                  //ativa fast_inc
0x0988	0x0E01      	MOVLW       1
0x098A	0x6F1A      	MOVWF       _fast_inc, 1
0x098C	0x0E00      	MOVLW       0
0x098E	0x6F1B      	MOVWF       _fast_inc+1, 1
;TCC_5.c,688 :: 		}                                                //end if temp_inc==7
L_fast_incr117:
;TCC_5.c,690 :: 		if(fast_inc)                                     //se fast_inc for ativado...
0x0990	0x511A      	MOVF        _fast_inc, 0, 1
0x0992	0x111B      	IORWF       _fast_inc+1, 0, 1
0x0994	0xB4D8      	BTFSC       STATUS, 2 
0x0996	0xD0B0      	BRA         L_fast_incr118
;TCC_5.c,692 :: 		if(option==0 && prog==1)                        //se dispenser n°1 selecionado e programção de número
0x0998	0x0E00      	MOVLW       0
0x099A	0x1907      	XORWF       _option+1, 0, 1
0x099C	0xE102      	BNZ         L__fast_incr504
0x099E	0x0E00      	MOVLW       0
0x09A0	0x1906      	XORWF       _option, 0, 1
L__fast_incr504:
0x09A2	0xE11C      	BNZ         L_fast_incr121
0x09A4	0x0E00      	MOVLW       0
0x09A6	0x1903      	XORWF       _prog+1, 0, 1
0x09A8	0xE102      	BNZ         L__fast_incr505
0x09AA	0x0E01      	MOVLW       1
0x09AC	0x1902      	XORWF       _prog, 0, 1
L__fast_incr505:
0x09AE	0xE116      	BNZ         L_fast_incr121
L__fast_incr395:
;TCC_5.c,694 :: 		if(temp_num>5)temp_num=0x00;                   //se temp_num maior que 5, zera temp_num
0x09B0	0x0E00      	MOVLW       0
0x09B2	0x6E00      	MOVWF       R0 
0x09B4	0x5105      	MOVF        _temp_num+1, 0, 1
0x09B6	0x5C00      	SUBWF       R0, 0 
0x09B8	0xE102      	BNZ         L__fast_incr506
0x09BA	0x5104      	MOVF        _temp_num, 0, 1
0x09BC	0x0805      	SUBLW       5
L__fast_incr506:
0x09BE	0xE202      	BC          L_fast_incr122
0x09C0	0x6B04      	CLRF        _temp_num, 1
0x09C2	0x6B05      	CLRF        _temp_num+1, 1
L_fast_incr122:
;TCC_5.c,695 :: 		if(temp_num==5)                                //conta 500ms...
0x09C4	0x0E00      	MOVLW       0
0x09C6	0x1905      	XORWF       _temp_num+1, 0, 1
0x09C8	0xE102      	BNZ         L__fast_incr507
0x09CA	0x0E05      	MOVLW       5
0x09CC	0x1904      	XORWF       _temp_num, 0, 1
L__fast_incr507:
0x09CE	0xE106      	BNZ         L_fast_incr123
;TCC_5.c,697 :: 		temp_num=0x00;                                //zera temp_num
0x09D0	0x6B04      	CLRF        _temp_num, 1
0x09D2	0x6B05      	CLRF        _temp_num+1, 1
;TCC_5.c,698 :: 		num += 2;                                     //acrescenta 2 em num
0x09D4	0x0E02      	MOVLW       2
0x09D6	0x2718      	ADDWF       _num, 1, 1
0x09D8	0x0E00      	MOVLW       0
0x09DA	0x2319      	ADDWFC      _num+1, 1, 1
;TCC_5.c,700 :: 		}                                              //end if temp_num==5
L_fast_incr123:
;TCC_5.c,702 :: 		}                                               //end if option==0 && prog=1
L_fast_incr121:
;TCC_5.c,705 :: 		if(option==1 && prog==1)                        //se dispenser n°2 selecionado e programção de número
0x09DC	0x0E00      	MOVLW       0
0x09DE	0x1907      	XORWF       _option+1, 0, 1
0x09E0	0xE102      	BNZ         L__fast_incr508
0x09E2	0x0E01      	MOVLW       1
0x09E4	0x1906      	XORWF       _option, 0, 1
L__fast_incr508:
0x09E6	0xE11C      	BNZ         L_fast_incr126
0x09E8	0x0E00      	MOVLW       0
0x09EA	0x1903      	XORWF       _prog+1, 0, 1
0x09EC	0xE102      	BNZ         L__fast_incr509
0x09EE	0x0E01      	MOVLW       1
0x09F0	0x1902      	XORWF       _prog, 0, 1
L__fast_incr509:
0x09F2	0xE116      	BNZ         L_fast_incr126
L__fast_incr394:
;TCC_5.c,707 :: 		if(temp_num>5)temp_num=0x00;                   //se temp_num maior que 5, zera temp_num
0x09F4	0x0E00      	MOVLW       0
0x09F6	0x6E00      	MOVWF       R0 
0x09F8	0x5105      	MOVF        _temp_num+1, 0, 1
0x09FA	0x5C00      	SUBWF       R0, 0 
0x09FC	0xE102      	BNZ         L__fast_incr510
0x09FE	0x5104      	MOVF        _temp_num, 0, 1
0x0A00	0x0805      	SUBLW       5
L__fast_incr510:
0x0A02	0xE202      	BC          L_fast_incr127
0x0A04	0x6B04      	CLRF        _temp_num, 1
0x0A06	0x6B05      	CLRF        _temp_num+1, 1
L_fast_incr127:
;TCC_5.c,708 :: 		if(temp_num==5)                                //conta 500ms...
0x0A08	0x0E00      	MOVLW       0
0x0A0A	0x1905      	XORWF       _temp_num+1, 0, 1
0x0A0C	0xE102      	BNZ         L__fast_incr511
0x0A0E	0x0E05      	MOVLW       5
0x0A10	0x1904      	XORWF       _temp_num, 0, 1
L__fast_incr511:
0x0A12	0xE106      	BNZ         L_fast_incr128
;TCC_5.c,710 :: 		temp_num=0x00;                                //zera temp_num
0x0A14	0x6B04      	CLRF        _temp_num, 1
0x0A16	0x6B05      	CLRF        _temp_num+1, 1
;TCC_5.c,711 :: 		num2 += 2;                                    //acrescenta 2 em num2
0x0A18	0x0E02      	MOVLW       2
0x0A1A	0x271C      	ADDWF       _num2, 1, 1
0x0A1C	0x0E00      	MOVLW       0
0x0A1E	0x231D      	ADDWFC      _num2+1, 1, 1
;TCC_5.c,713 :: 		}                                              //end if temp_num==5
L_fast_incr128:
;TCC_5.c,715 :: 		}                                               //end if option==1 && prog=1
L_fast_incr126:
;TCC_5.c,717 :: 		if(option==2 && prog==1)                       //se dispenser n°3 selecionado e programção de número
0x0A20	0x0E00      	MOVLW       0
0x0A22	0x1907      	XORWF       _option+1, 0, 1
0x0A24	0xE102      	BNZ         L__fast_incr512
0x0A26	0x0E02      	MOVLW       2
0x0A28	0x1906      	XORWF       _option, 0, 1
L__fast_incr512:
0x0A2A	0xE11C      	BNZ         L_fast_incr131
0x0A2C	0x0E00      	MOVLW       0
0x0A2E	0x1903      	XORWF       _prog+1, 0, 1
0x0A30	0xE102      	BNZ         L__fast_incr513
0x0A32	0x0E01      	MOVLW       1
0x0A34	0x1902      	XORWF       _prog, 0, 1
L__fast_incr513:
0x0A36	0xE116      	BNZ         L_fast_incr131
L__fast_incr393:
;TCC_5.c,719 :: 		if(temp_num>5)temp_num=0x00;                   //se temp_num maior que 5, zera temp_num
0x0A38	0x0E00      	MOVLW       0
0x0A3A	0x6E00      	MOVWF       R0 
0x0A3C	0x5105      	MOVF        _temp_num+1, 0, 1
0x0A3E	0x5C00      	SUBWF       R0, 0 
0x0A40	0xE102      	BNZ         L__fast_incr514
0x0A42	0x5104      	MOVF        _temp_num, 0, 1
0x0A44	0x0805      	SUBLW       5
L__fast_incr514:
0x0A46	0xE202      	BC          L_fast_incr132
0x0A48	0x6B04      	CLRF        _temp_num, 1
0x0A4A	0x6B05      	CLRF        _temp_num+1, 1
L_fast_incr132:
;TCC_5.c,720 :: 		if(temp_num==5)                                //conta 500ms...
0x0A4C	0x0E00      	MOVLW       0
0x0A4E	0x1905      	XORWF       _temp_num+1, 0, 1
0x0A50	0xE102      	BNZ         L__fast_incr515
0x0A52	0x0E05      	MOVLW       5
0x0A54	0x1904      	XORWF       _temp_num, 0, 1
L__fast_incr515:
0x0A56	0xE106      	BNZ         L_fast_incr133
;TCC_5.c,722 :: 		temp_num=0x00;                                //zera temp_num
0x0A58	0x6B04      	CLRF        _temp_num, 1
0x0A5A	0x6B05      	CLRF        _temp_num+1, 1
;TCC_5.c,723 :: 		num3 += 2;                                    //acrescenta 2 em num3
0x0A5C	0x0E02      	MOVLW       2
0x0A5E	0x271E      	ADDWF       _num3, 1, 1
0x0A60	0x0E00      	MOVLW       0
0x0A62	0x231F      	ADDWFC      _num3+1, 1, 1
;TCC_5.c,725 :: 		}                                              //end if temp_num==5
L_fast_incr133:
;TCC_5.c,727 :: 		}                                               //end if option==2 && prog=1
L_fast_incr131:
;TCC_5.c,729 :: 		if(option==3 && prog==1)                       //se dispenser n°4 selecionado e programção de número
0x0A64	0x0E00      	MOVLW       0
0x0A66	0x1907      	XORWF       _option+1, 0, 1
0x0A68	0xE102      	BNZ         L__fast_incr516
0x0A6A	0x0E03      	MOVLW       3
0x0A6C	0x1906      	XORWF       _option, 0, 1
L__fast_incr516:
0x0A6E	0xE11C      	BNZ         L_fast_incr136
0x0A70	0x0E00      	MOVLW       0
0x0A72	0x1903      	XORWF       _prog+1, 0, 1
0x0A74	0xE102      	BNZ         L__fast_incr517
0x0A76	0x0E01      	MOVLW       1
0x0A78	0x1902      	XORWF       _prog, 0, 1
L__fast_incr517:
0x0A7A	0xE116      	BNZ         L_fast_incr136
L__fast_incr392:
;TCC_5.c,731 :: 		if(temp_num>5)temp_num=0x00;                   //se temp_num maior que 5, zera temp_num
0x0A7C	0x0E00      	MOVLW       0
0x0A7E	0x6E00      	MOVWF       R0 
0x0A80	0x5105      	MOVF        _temp_num+1, 0, 1
0x0A82	0x5C00      	SUBWF       R0, 0 
0x0A84	0xE102      	BNZ         L__fast_incr518
0x0A86	0x5104      	MOVF        _temp_num, 0, 1
0x0A88	0x0805      	SUBLW       5
L__fast_incr518:
0x0A8A	0xE202      	BC          L_fast_incr137
0x0A8C	0x6B04      	CLRF        _temp_num, 1
0x0A8E	0x6B05      	CLRF        _temp_num+1, 1
L_fast_incr137:
;TCC_5.c,732 :: 		if(temp_num==5)                                //conta 500ms...
0x0A90	0x0E00      	MOVLW       0
0x0A92	0x1905      	XORWF       _temp_num+1, 0, 1
0x0A94	0xE102      	BNZ         L__fast_incr519
0x0A96	0x0E05      	MOVLW       5
0x0A98	0x1904      	XORWF       _temp_num, 0, 1
L__fast_incr519:
0x0A9A	0xE106      	BNZ         L_fast_incr138
;TCC_5.c,734 :: 		temp_num=0x00;                                //zera temp_num
0x0A9C	0x6B04      	CLRF        _temp_num, 1
0x0A9E	0x6B05      	CLRF        _temp_num+1, 1
;TCC_5.c,735 :: 		num4 += 2;                                    //acrescenta 2 em num4
0x0AA0	0x0E02      	MOVLW       2
0x0AA2	0x2710      	ADDWF       _num4, 1, 1
0x0AA4	0x0E00      	MOVLW       0
0x0AA6	0x2311      	ADDWFC      _num4+1, 1, 1
;TCC_5.c,737 :: 		}                                              //end if temp_num==5
L_fast_incr138:
;TCC_5.c,739 :: 		}                                               //end if option==3 && prog=1
L_fast_incr136:
;TCC_5.c,741 :: 		if(num >24) num =0x00;                          //se o numero passar de 24, retorna para 0
0x0AA8	0x0E00      	MOVLW       0
0x0AAA	0x6E00      	MOVWF       R0 
0x0AAC	0x5119      	MOVF        _num+1, 0, 1
0x0AAE	0x5C00      	SUBWF       R0, 0 
0x0AB0	0xE102      	BNZ         L__fast_incr520
0x0AB2	0x5118      	MOVF        _num, 0, 1
0x0AB4	0x0818      	SUBLW       24
L__fast_incr520:
0x0AB6	0xE202      	BC          L_fast_incr139
0x0AB8	0x6B18      	CLRF        _num, 1
0x0ABA	0x6B19      	CLRF        _num+1, 1
L_fast_incr139:
;TCC_5.c,742 :: 		if(num2>24) num2=0x00;                          //se o numero passar de 24, retorna para 0
0x0ABC	0x0E00      	MOVLW       0
0x0ABE	0x6E00      	MOVWF       R0 
0x0AC0	0x511D      	MOVF        _num2+1, 0, 1
0x0AC2	0x5C00      	SUBWF       R0, 0 
0x0AC4	0xE102      	BNZ         L__fast_incr521
0x0AC6	0x511C      	MOVF        _num2, 0, 1
0x0AC8	0x0818      	SUBLW       24
L__fast_incr521:
0x0ACA	0xE202      	BC          L_fast_incr140
0x0ACC	0x6B1C      	CLRF        _num2, 1
0x0ACE	0x6B1D      	CLRF        _num2+1, 1
L_fast_incr140:
;TCC_5.c,743 :: 		if(num3>24) num3=0x00;                          //se o numero passar de 24, retorna para 0
0x0AD0	0x0E00      	MOVLW       0
0x0AD2	0x6E00      	MOVWF       R0 
0x0AD4	0x511F      	MOVF        _num3+1, 0, 1
0x0AD6	0x5C00      	SUBWF       R0, 0 
0x0AD8	0xE102      	BNZ         L__fast_incr522
0x0ADA	0x511E      	MOVF        _num3, 0, 1
0x0ADC	0x0818      	SUBLW       24
L__fast_incr522:
0x0ADE	0xE202      	BC          L_fast_incr141
0x0AE0	0x6B1E      	CLRF        _num3, 1
0x0AE2	0x6B1F      	CLRF        _num3+1, 1
L_fast_incr141:
;TCC_5.c,744 :: 		if(num4>24) num4=0x00;                          //se o numero passar de 24, retorna para 0
0x0AE4	0x0E00      	MOVLW       0
0x0AE6	0x6E00      	MOVWF       R0 
0x0AE8	0x5111      	MOVF        _num4+1, 0, 1
0x0AEA	0x5C00      	SUBWF       R0, 0 
0x0AEC	0xE102      	BNZ         L__fast_incr523
0x0AEE	0x5110      	MOVF        _num4, 0, 1
0x0AF0	0x0818      	SUBLW       24
L__fast_incr523:
0x0AF2	0xE202      	BC          L_fast_incr142
0x0AF4	0x6B10      	CLRF        _num4, 1
0x0AF6	0x6B11      	CLRF        _num4+1, 1
L_fast_incr142:
;TCC_5.c,746 :: 		}                                                //end if fast_inc
L_fast_incr118:
;TCC_5.c,751 :: 		}                                                 //end void fast_incr()
L_end_fast_incr:
0x0AF8	0x0012      	RETURN      0
; end of _fast_incr
_read_motbits:
;TCC_5.c,1733 :: 		void read_motbits()
;TCC_5.c,1735 :: 		if(!open_bit && !close_bit) atv_mot = 0x00;    //se os bits de abertura e fechamento do motor 1 forem 0,
0x0AFA	0x0101      	MOVLB       1
0x0AFC	0xB30B      	BTFSC       _open_bit, BitPos(_open_bit+0), 1
0x0AFE	0xD003      	BRA         L_read_motbits350
0x0B00	0xB50B      	BTFSC       _close_bit, BitPos(_close_bit+0), 1
0x0B02	0xD001      	BRA         L_read_motbits350
L__read_motbits428:
0x0B04	0x9F0C      	BCF         _atv_mot, BitPos(_atv_mot+0), 1
L_read_motbits350:
;TCC_5.c,1738 :: 		if(open_bit && !close_bit)                     //se o bit de abertura for 1 e o de fechamento for 0...
0x0B06	0xA30B      	BTFSS       _open_bit, BitPos(_open_bit+0), 1
0x0B08	0xD003      	BRA         L_read_motbits353
0x0B0A	0xB50B      	BTFSC       _close_bit, BitPos(_close_bit+0), 1
0x0B0C	0xD001      	BRA         L_read_motbits353
L__read_motbits427:
;TCC_5.c,1740 :: 		mot_aberto();                                 //executa a abertura do motor 1
0x0B0E	0xDCC3      	RCALL       _mot_aberto
;TCC_5.c,1742 :: 		}                                              //end if open_bit && !close_bit
L_read_motbits353:
;TCC_5.c,1744 :: 		if(!open_bit && close_bit)                     //se o bit de abertura for 0 e o de fechamento for 1...
0x0B10	0x0101      	MOVLB       1
0x0B12	0xB30B      	BTFSC       _open_bit, BitPos(_open_bit+0), 1
0x0B14	0xD003      	BRA         L_read_motbits356
0x0B16	0xA50B      	BTFSS       _close_bit, BitPos(_close_bit+0), 1
0x0B18	0xD001      	BRA         L_read_motbits356
L__read_motbits426:
;TCC_5.c,1746 :: 		mot_fechado();                                //executa o fechamento do motor 1
0x0B1A	0xDC57      	RCALL       _mot_fechado
;TCC_5.c,1748 :: 		}                                              //end if !open_bit && close_bit
L_read_motbits356:
;TCC_5.c,1751 :: 		if(!open_bit2 && !close_bit2) atv_mot2 = 0x00; //se os bits de abertura e fechamento do motor 2 forem 0,
0x0B1C	0x0101      	MOVLB       1
0x0B1E	0xB10B      	BTFSC       _open_bit2, BitPos(_open_bit2+0), 1
0x0B20	0xD003      	BRA         L_read_motbits359
0x0B22	0xB50A      	BTFSC       _close_bit2, BitPos(_close_bit2+0), 1
0x0B24	0xD001      	BRA         L_read_motbits359
L__read_motbits425:
0x0B26	0x9D0C      	BCF         _atv_mot2, BitPos(_atv_mot2+0), 1
L_read_motbits359:
;TCC_5.c,1754 :: 		if(open_bit2 && !close_bit2)                   //se o bit de abertura for 1 e o de fechamento for 0...
0x0B28	0xA10B      	BTFSS       _open_bit2, BitPos(_open_bit2+0), 1
0x0B2A	0xD004      	BRA         L_read_motbits362
0x0B2C	0xB50A      	BTFSC       _close_bit2, BitPos(_close_bit2+0), 1
0x0B2E	0xD002      	BRA         L_read_motbits362
L__read_motbits424:
;TCC_5.c,1756 :: 		mot_aberto2();                                //executa a abertura do motor 2
0x0B30	0xF000ECDD  	CALL        _mot_aberto2, 0
;TCC_5.c,1758 :: 		}                                              //end if open_bit2 && !close_bit2
L_read_motbits362:
;TCC_5.c,1760 :: 		if(!open_bit2 && close_bit2)                   //se o bit de abertura for 0 e o de fechamento for 1...
0x0B34	0x0101      	MOVLB       1
0x0B36	0xB10B      	BTFSC       _open_bit2, BitPos(_open_bit2+0), 1
0x0B38	0xD003      	BRA         L_read_motbits365
0x0B3A	0xA50A      	BTFSS       _close_bit2, BitPos(_close_bit2+0), 1
0x0B3C	0xD001      	BRA         L_read_motbits365
L__read_motbits423:
;TCC_5.c,1762 :: 		mot_fechado2();                               //executa o fechamento do motor 2
0x0B3E	0xDC78      	RCALL       _mot_fechado2
;TCC_5.c,1764 :: 		}                                              //end if !open_bit2 && close_bit2
L_read_motbits365:
;TCC_5.c,1767 :: 		if(!open_bit3 && !close_bit3) atv_mot3 = 0x00; //se os bits de abertura e fechamento do motor 3 forem 0,
0x0B40	0x0101      	MOVLB       1
0x0B42	0xBF0A      	BTFSC       _open_bit3, BitPos(_open_bit3+0), 1
0x0B44	0xD003      	BRA         L_read_motbits368
0x0B46	0xBB0A      	BTFSC       _close_bit3, BitPos(_close_bit3+0), 1
0x0B48	0xD001      	BRA         L_read_motbits368
L__read_motbits422:
0x0B4A	0x9B0C      	BCF         _atv_mot3, BitPos(_atv_mot3+0), 1
L_read_motbits368:
;TCC_5.c,1770 :: 		if(open_bit3 && !close_bit3)                   //se o bit de abertura for 1 e o de fechamento for 0...
0x0B4C	0xAF0A      	BTFSS       _open_bit3, BitPos(_open_bit3+0), 1
0x0B4E	0xD004      	BRA         L_read_motbits371
0x0B50	0xBB0A      	BTFSC       _close_bit3, BitPos(_close_bit3+0), 1
0x0B52	0xD002      	BRA         L_read_motbits371
L__read_motbits421:
;TCC_5.c,1772 :: 		mot_aberto3();                                //executa a abertura do motor 3
0x0B54	0xF001EC7C  	CALL        _mot_aberto3, 0
;TCC_5.c,1774 :: 		}                                              //end if open_bit3 && !close_bit3
L_read_motbits371:
;TCC_5.c,1776 :: 		if(!open_bit3 && close_bit3)                   //se o bit de abertura for 0 e o de fechamento for 1...
0x0B58	0x0101      	MOVLB       1
0x0B5A	0xBF0A      	BTFSC       _open_bit3, BitPos(_open_bit3+0), 1
0x0B5C	0xD003      	BRA         L_read_motbits374
0x0B5E	0xAB0A      	BTFSS       _close_bit3, BitPos(_close_bit3+0), 1
0x0B60	0xD001      	BRA         L_read_motbits374
L__read_motbits420:
;TCC_5.c,1778 :: 		mot_fechado3();                               //executa o fechamento do motor 3
0x0B62	0xDC00      	RCALL       _mot_fechado3
;TCC_5.c,1780 :: 		}                                              //end if !open_bit3 && close_bit3
L_read_motbits374:
;TCC_5.c,1783 :: 		if(!open_bit4 && !close_bit4) atv_mot4 = 0x00; //se os bits de abertura e fechamento do motor 4 forem 0,
0x0B64	0x0101      	MOVLB       1
0x0B66	0xB70B      	BTFSC       _open_bit4, BitPos(_open_bit4+0), 1
0x0B68	0xD003      	BRA         L_read_motbits377
0x0B6A	0xB90C      	BTFSC       _close_bit4, BitPos(_close_bit4+0), 1
0x0B6C	0xD001      	BRA         L_read_motbits377
L__read_motbits419:
0x0B6E	0x970C      	BCF         _atv_mot4, BitPos(_atv_mot4+0), 1
L_read_motbits377:
;TCC_5.c,1786 :: 		if(open_bit4 && !close_bit4)                   //se o bit de abertura for 1 e o de fechamento for 0...
0x0B70	0xA70B      	BTFSS       _open_bit4, BitPos(_open_bit4+0), 1
0x0B72	0xD004      	BRA         L_read_motbits380
0x0B74	0xB90C      	BTFSC       _close_bit4, BitPos(_close_bit4+0), 1
0x0B76	0xD002      	BRA         L_read_motbits380
L__read_motbits418:
;TCC_5.c,1788 :: 		mot_aberto4();                                //executa a abertura do motor 4
0x0B78	0xF001EC13  	CALL        _mot_aberto4, 0
;TCC_5.c,1790 :: 		}                                              //end if open_bit4 && !close_bit4
L_read_motbits380:
;TCC_5.c,1792 :: 		if(!open_bit4 && close_bit4)                   //se o bit de abertura for 0 e o de fechamento for 1...
0x0B7C	0x0101      	MOVLB       1
0x0B7E	0xB70B      	BTFSC       _open_bit4, BitPos(_open_bit4+0), 1
0x0B80	0xD004      	BRA         L_read_motbits383
0x0B82	0xA90C      	BTFSS       _close_bit4, BitPos(_close_bit4+0), 1
0x0B84	0xD002      	BRA         L_read_motbits383
L__read_motbits417:
;TCC_5.c,1794 :: 		mot_fechado4();                               //executa o fechamento do motor 4
0x0B86	0xF001EC49  	CALL        _mot_fechado4, 0
;TCC_5.c,1796 :: 		}                                              //end if !open_bit4 && close_bit4
L_read_motbits383:
;TCC_5.c,1798 :: 		}                                                 //end read_motbits()
L_end_read_motbits:
0x0B8A	0x0012      	RETURN      0
; end of _read_motbits
_EEPROM_Write:
;__Lib_EEPROM_256.c,21 :: 		
;__Lib_EEPROM_256.c,24 :: 		
L_EEPROM_Write0:
0x0B8C	0xA2A6      	BTFSS       EECON1, 1 
0x0B8E	0xD002      	BRA         L_EEPROM_Write1
;__Lib_EEPROM_256.c,25 :: 		
0x0B90	0x0000      	NOP
0x0B92	0xD7FC      	BRA         L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM_256.c,26 :: 		
0x0B94	0x9CA6      	BCF         EECON1, 6 
;__Lib_EEPROM_256.c,27 :: 		
0x0B96	0xFFA9C121  	MOVFF       FARG_EEPROM_Write_address, EEADR
;__Lib_EEPROM_256.c,28 :: 		
0x0B9A	0xFFA8C122  	MOVFF       FARG_EEPROM_Write_data_, EEDATA
;__Lib_EEPROM_256.c,29 :: 		
0x0B9E	0x9EA6      	BCF         EECON1, 7 
;__Lib_EEPROM_256.c,30 :: 		
0x0BA0	0x84A6      	BSF         EECON1, 2 
;__Lib_EEPROM_256.c,32 :: 		
0x0BA2	0xF000CFF2  	MOVFF       INTCON, R0
;__Lib_EEPROM_256.c,35 :: 		
0x0BA6	0x9EF2      	BCF         INTCON, 7 
;__Lib_EEPROM_256.c,36 :: 		
0x0BA8	0x0E55      	MOVLW       85
0x0BAA	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_256.c,37 :: 		
0x0BAC	0x0EAA      	MOVLW       170
0x0BAE	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_256.c,38 :: 		
0x0BB0	0x82A6      	BSF         EECON1, 1 
;__Lib_EEPROM_256.c,42 :: 		
0x0BB2	0xBE00      	BTFSC       R0, 7 
0x0BB4	0xD002      	BRA         L__EEPROM_Write6
0x0BB6	0x9EF2      	BCF         INTCON, 7 
0x0BB8	0xD001      	BRA         L__EEPROM_Write7
L__EEPROM_Write6:
0x0BBA	0x8EF2      	BSF         INTCON, 7 
L__EEPROM_Write7:
;__Lib_EEPROM_256.c,44 :: 		
0x0BBC	0x94A6      	BCF         EECON1, 2 
;__Lib_EEPROM_256.c,46 :: 		
L_EEPROM_Write2:
0x0BBE	0xB8A1      	BTFSC       PIR2, 4 
0x0BC0	0xD002      	BRA         L_EEPROM_Write3
;__Lib_EEPROM_256.c,47 :: 		
0x0BC2	0x0000      	NOP
0x0BC4	0xD7FC      	BRA         L_EEPROM_Write2
L_EEPROM_Write3:
;__Lib_EEPROM_256.c,49 :: 		
0x0BC6	0x98A1      	BCF         PIR2, 4 
;__Lib_EEPROM_256.c,50 :: 		
L_end_EEPROM_Write:
0x0BC8	0x0012      	RETURN      0
; end of _EEPROM_Write
_alarme:
;TCC_5.c,1298 :: 		void alarme()
;TCC_5.c,1300 :: 		if(toque || toque2 || toque3 || toque4)          //se toque, toque2, toque3 ou toque4 for 1
0x0BCA	0x0101      	MOVLB       1
0x0BCC	0xB90B      	BTFSC       _toque, BitPos(_toque+0), 1
0x0BCE	0xD007      	BRA         L__alarme416
0x0BD0	0xBB0B      	BTFSC       _toque2, BitPos(_toque2+0), 1
0x0BD2	0xD005      	BRA         L__alarme416
0x0BD4	0xBD0B      	BTFSC       _toque3, BitPos(_toque3+0), 1
0x0BD6	0xD003      	BRA         L__alarme416
0x0BD8	0xB30C      	BTFSC       _toque4, BitPos(_toque4+0), 1
0x0BDA	0xD001      	BRA         L__alarme416
0x0BDC	0xD029      	BRA         L_alarme294
L__alarme416:
;TCC_5.c,1302 :: 		if(vezes <200)                                 //se vezes for menor que 200 (toca por 1 minuto)
0x0BDE	0x0E00      	MOVLW       0
0x0BE0	0x0100      	MOVLB       0
0x0BE2	0x5DE3      	SUBWF       _vezes+1, 0, 1
0x0BE4	0xE102      	BNZ         L__alarme599
0x0BE6	0x0EC8      	MOVLW       200
0x0BE8	0x5DE2      	SUBWF       _vezes, 0, 1
L__alarme599:
0x0BEA	0xE202      	BC          L_alarme295
;TCC_5.c,1304 :: 		toca_som();                                   //executa a toca do SOM
0x0BEC	0xDC8A      	RCALL       _toca_som
;TCC_5.c,1305 :: 		}                                              //end if vezes<10
0x0BEE	0xD020      	BRA         L_alarme296
L_alarme295:
;TCC_5.c,1309 :: 		if(toque)                                     //se toque for 1
0x0BF0	0x0101      	MOVLB       1
0x0BF2	0xA90B      	BTFSS       _toque, BitPos(_toque+0), 1
0x0BF4	0xD004      	BRA         L_alarme297
;TCC_5.c,1311 :: 		toque=0x00;                                  //limpa o bit toque
0x0BF6	0x990B      	BCF         _toque, BitPos(_toque+0), 1
;TCC_5.c,1312 :: 		temp_ligado=0x00;                            //zera temp_ligado para recomeçar a contagem
0x0BF8	0x0100      	MOVLB       0
0x0BFA	0x6BCA      	CLRF        _temp_ligado, 1
0x0BFC	0x6BCB      	CLRF        _temp_ligado+1, 1
;TCC_5.c,1314 :: 		}                                             //end if toque
L_alarme297:
;TCC_5.c,1316 :: 		if(toque2)                                    //se toque2 for 1
0x0BFE	0x0101      	MOVLB       1
0x0C00	0xAB0B      	BTFSS       _toque2, BitPos(_toque2+0), 1
0x0C02	0xD004      	BRA         L_alarme298
;TCC_5.c,1318 :: 		toque2=0x00;                                 //limpa o bit toque 2
0x0C04	0x9B0B      	BCF         _toque2, BitPos(_toque2+0), 1
;TCC_5.c,1319 :: 		temp_ligado2=0x00;                           //zera temp_ligado2 para recomeçar a contagem
0x0C06	0x0100      	MOVLB       0
0x0C08	0x6BCC      	CLRF        _temp_ligado2, 1
0x0C0A	0x6BCD      	CLRF        _temp_ligado2+1, 1
;TCC_5.c,1321 :: 		}                                             //end if toque2
L_alarme298:
;TCC_5.c,1323 :: 		if(toque3)                                    //se toque3 for 1
0x0C0C	0x0101      	MOVLB       1
0x0C0E	0xAD0B      	BTFSS       _toque3, BitPos(_toque3+0), 1
0x0C10	0xD004      	BRA         L_alarme299
;TCC_5.c,1325 :: 		toque3=0x00;                                 //limpa o bit toque3
0x0C12	0x9D0B      	BCF         _toque3, BitPos(_toque3+0), 1
;TCC_5.c,1326 :: 		temp_ligado3=0x00;                           //zera temp_ligado3 para recomeçar a contagem
0x0C14	0x0100      	MOVLB       0
0x0C16	0x6BCE      	CLRF        _temp_ligado3, 1
0x0C18	0x6BCF      	CLRF        _temp_ligado3+1, 1
;TCC_5.c,1328 :: 		}                                             //end if toque3
L_alarme299:
;TCC_5.c,1330 :: 		if(toque4)                                    //se toque4 for 1
0x0C1A	0x0101      	MOVLB       1
0x0C1C	0xA30C      	BTFSS       _toque4, BitPos(_toque4+0), 1
0x0C1E	0xD004      	BRA         L_alarme300
;TCC_5.c,1332 :: 		toque4=0x00;                                 //limpa o bit toque4
0x0C20	0x930C      	BCF         _toque4, BitPos(_toque4+0), 1
;TCC_5.c,1333 :: 		temp_ligado4=0x00;                           //zera temp_ligado4 para recomeçar a contagem
0x0C22	0x0100      	MOVLB       0
0x0C24	0x6BD2      	CLRF        _temp_ligado4, 1
0x0C26	0x6BD3      	CLRF        _temp_ligado4+1, 1
;TCC_5.c,1335 :: 		}                                             //end if toque4
L_alarme300:
0x0C28	0x0100      	MOVLB       0
;TCC_5.c,1337 :: 		vezes=0x00;                                  //zera vezes
0x0C2A	0x6BE2      	CLRF        _vezes, 1
0x0C2C	0x6BE3      	CLRF        _vezes+1, 1
;TCC_5.c,1338 :: 		SOM = 0x00;                                  //desliga o som
0x0C2E	0x9881      	BCF         PORTB, 4 
;TCC_5.c,1340 :: 		}                                              //end else
L_alarme296:
;TCC_5.c,1342 :: 		}                                                //end if toque || toque2 || toque3 || toque4
L_alarme294:
;TCC_5.c,1344 :: 		}                                                 //end alarme()
L_end_alarme:
0x0C30	0x0012      	RETURN      0
; end of _alarme
_ler_bot:
;TCC_5.c,317 :: 		void ler_bot()
;TCC_5.c,320 :: 		if(!BOTAO1) b1_flag=0x01;                       //se botão1 for pressionado, flag do botão1 = 1
0x0C32	0xB082      	BTFSC       PORTC, 0 
0x0C34	0xD002      	BRA         L_ler_bot7
0x0C36	0x0101      	MOVLB       1
0x0C38	0x810A      	BSF         _b1_flag, BitPos(_b1_flag+0), 1
L_ler_bot7:
;TCC_5.c,322 :: 		if(BOTAO1 && b1_flag)                           //se botão1 estiver solto e flag do botão1 = 1
0x0C3A	0xA082      	BTFSS       PORTC, 0 
0x0C3C	0xD0C7      	BRA         L_ler_bot10
0x0C3E	0x0101      	MOVLB       1
0x0C40	0xA10A      	BTFSS       _b1_flag, BitPos(_b1_flag+0), 1
0x0C42	0xD0C4      	BRA         L_ler_bot10
L__ler_bot391:
;TCC_5.c,324 :: 		LCD_Cmd(_LCD_CLEAR);                           //limpa o LCD
0x0C44	0x0E01      	MOVLW       1
0x0C46	0x6F2A      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x0C48	0xF000EC5F  	CALL        _Lcd_Cmd, 0
;TCC_5.c,325 :: 		b1_flag = 0x00;                                //lmpa a flag do botão1
0x0C4C	0x910A      	BCF         _b1_flag, BitPos(_b1_flag+0), 1
;TCC_5.c,326 :: 		LCD_LED = 0x01;                                //liga o LED do LCD
0x0C4E	0x8482      	BSF         PORTC, 2 
;TCC_5.c,327 :: 		if(!ligar)                                     //se bit ligar = 0
0x0C50	0xBB0D      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x0C52	0xD0BC      	BRA         L_ler_bot11
;TCC_5.c,329 :: 		prog++;                                       //incrementa prog, muda a programação
0x0C54	0x4B02      	INFSNZ      _prog, 1, 1
0x0C56	0x2B03      	INCF        _prog+1, 1, 1
;TCC_5.c,330 :: 		if(prog==4)                                   //se prog = 3
0x0C58	0x0E00      	MOVLW       0
0x0C5A	0x1903      	XORWF       _prog+1, 0, 1
0x0C5C	0xE102      	BNZ         L__ler_bot445
0x0C5E	0x0E04      	MOVLW       4
0x0C60	0x1902      	XORWF       _prog, 0, 1
L__ler_bot445:
0x0C62	0xA4D8      	BTFSS       STATUS, 2 
0x0C64	0xD0B3      	BRA         L_ler_bot12
;TCC_5.c,332 :: 		prog=0x00;                                   //zera a variável prog
0x0C66	0x6B02      	CLRF        _prog, 1
0x0C68	0x6B03      	CLRF        _prog+1, 1
;TCC_5.c,333 :: 		EEPROM_Write(0x01,num);                      //grava num na EEPROM
0x0C6A	0x0E01      	MOVLW       1
0x0C6C	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0C6E	0xF122C118  	MOVFF       _num, FARG_EEPROM_Write_data_
0x0C72	0xDF8C      	RCALL       _EEPROM_Write
;TCC_5.c,334 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0C74	0x0E9C      	MOVLW       156
0x0C76	0x6E0C      	MOVWF       R12, 0
0x0C78	0x0ED7      	MOVLW       215
0x0C7A	0x6E0D      	MOVWF       R13, 0
L_ler_bot13:
0x0C7C	0x2E0D      	DECFSZ      R13, 1, 0
0x0C7E	0xD7FE      	BRA         L_ler_bot13
0x0C80	0x2E0C      	DECFSZ      R12, 1, 0
0x0C82	0xD7FC      	BRA         L_ler_bot13
;TCC_5.c,335 :: 		EEPROM_Write(0x03,un);                       //grava un na EEPROM
0x0C84	0x0E03      	MOVLW       3
0x0C86	0x0101      	MOVLB       1
0x0C88	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0C8A	0x0E00      	MOVLW       0
0x0C8C	0xB10D      	BTFSC       _un, BitPos(_un+0), 1
0x0C8E	0x0E01      	MOVLW       1
0x0C90	0x6F22      	MOVWF       FARG_EEPROM_Write_data_, 1
0x0C92	0xDF7C      	RCALL       _EEPROM_Write
;TCC_5.c,336 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0C94	0x0E9C      	MOVLW       156
0x0C96	0x6E0C      	MOVWF       R12, 0
0x0C98	0x0ED7      	MOVLW       215
0x0C9A	0x6E0D      	MOVWF       R13, 0
L_ler_bot14:
0x0C9C	0x2E0D      	DECFSZ      R13, 1, 0
0x0C9E	0xD7FE      	BRA         L_ler_bot14
0x0CA0	0x2E0C      	DECFSZ      R12, 1, 0
0x0CA2	0xD7FC      	BRA         L_ler_bot14
;TCC_5.c,337 :: 		EEPROM_Write(0x02,num2);                     //grava num2 na EEPROM
0x0CA4	0x0E02      	MOVLW       2
0x0CA6	0x0101      	MOVLB       1
0x0CA8	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0CAA	0xF122C11C  	MOVFF       _num2, FARG_EEPROM_Write_data_
0x0CAE	0xDF6E      	RCALL       _EEPROM_Write
;TCC_5.c,338 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0CB0	0x0E9C      	MOVLW       156
0x0CB2	0x6E0C      	MOVWF       R12, 0
0x0CB4	0x0ED7      	MOVLW       215
0x0CB6	0x6E0D      	MOVWF       R13, 0
L_ler_bot15:
0x0CB8	0x2E0D      	DECFSZ      R13, 1, 0
0x0CBA	0xD7FE      	BRA         L_ler_bot15
0x0CBC	0x2E0C      	DECFSZ      R12, 1, 0
0x0CBE	0xD7FC      	BRA         L_ler_bot15
;TCC_5.c,339 :: 		EEPROM_Write(0x04,un2);                      //grava un2 na EEPROM
0x0CC0	0x0E04      	MOVLW       4
0x0CC2	0x0101      	MOVLB       1
0x0CC4	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0CC6	0x0E00      	MOVLW       0
0x0CC8	0xB30D      	BTFSC       _un2, BitPos(_un2+0), 1
0x0CCA	0x0E01      	MOVLW       1
0x0CCC	0x6F22      	MOVWF       FARG_EEPROM_Write_data_, 1
0x0CCE	0xDF5E      	RCALL       _EEPROM_Write
;TCC_5.c,340 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0CD0	0x0E9C      	MOVLW       156
0x0CD2	0x6E0C      	MOVWF       R12, 0
0x0CD4	0x0ED7      	MOVLW       215
0x0CD6	0x6E0D      	MOVWF       R13, 0
L_ler_bot16:
0x0CD8	0x2E0D      	DECFSZ      R13, 1, 0
0x0CDA	0xD7FE      	BRA         L_ler_bot16
0x0CDC	0x2E0C      	DECFSZ      R12, 1, 0
0x0CDE	0xD7FC      	BRA         L_ler_bot16
;TCC_5.c,341 :: 		EEPROM_Write(0x05,num3);                     //grava num3 na EEPROM
0x0CE0	0x0E05      	MOVLW       5
0x0CE2	0x0101      	MOVLB       1
0x0CE4	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0CE6	0xF122C11E  	MOVFF       _num3, FARG_EEPROM_Write_data_
0x0CEA	0xDF50      	RCALL       _EEPROM_Write
;TCC_5.c,342 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0CEC	0x0E9C      	MOVLW       156
0x0CEE	0x6E0C      	MOVWF       R12, 0
0x0CF0	0x0ED7      	MOVLW       215
0x0CF2	0x6E0D      	MOVWF       R13, 0
L_ler_bot17:
0x0CF4	0x2E0D      	DECFSZ      R13, 1, 0
0x0CF6	0xD7FE      	BRA         L_ler_bot17
0x0CF8	0x2E0C      	DECFSZ      R12, 1, 0
0x0CFA	0xD7FC      	BRA         L_ler_bot17
;TCC_5.c,343 :: 		EEPROM_Write(0x06,un3);                      //grava un3 na EEPROM
0x0CFC	0x0E06      	MOVLW       6
0x0CFE	0x0101      	MOVLB       1
0x0D00	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0D02	0x0E00      	MOVLW       0
0x0D04	0xB70D      	BTFSC       _un3, BitPos(_un3+0), 1
0x0D06	0x0E01      	MOVLW       1
0x0D08	0x6F22      	MOVWF       FARG_EEPROM_Write_data_, 1
0x0D0A	0xDF40      	RCALL       _EEPROM_Write
;TCC_5.c,344 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0D0C	0x0E9C      	MOVLW       156
0x0D0E	0x6E0C      	MOVWF       R12, 0
0x0D10	0x0ED7      	MOVLW       215
0x0D12	0x6E0D      	MOVWF       R13, 0
L_ler_bot18:
0x0D14	0x2E0D      	DECFSZ      R13, 1, 0
0x0D16	0xD7FE      	BRA         L_ler_bot18
0x0D18	0x2E0C      	DECFSZ      R12, 1, 0
0x0D1A	0xD7FC      	BRA         L_ler_bot18
;TCC_5.c,345 :: 		EEPROM_Write(0x07,num4);                     //grava num4 na EEPROM
0x0D1C	0x0E07      	MOVLW       7
0x0D1E	0x0101      	MOVLB       1
0x0D20	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0D22	0xF122C110  	MOVFF       _num4, FARG_EEPROM_Write_data_
0x0D26	0xDF32      	RCALL       _EEPROM_Write
;TCC_5.c,346 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0D28	0x0E9C      	MOVLW       156
0x0D2A	0x6E0C      	MOVWF       R12, 0
0x0D2C	0x0ED7      	MOVLW       215
0x0D2E	0x6E0D      	MOVWF       R13, 0
L_ler_bot19:
0x0D30	0x2E0D      	DECFSZ      R13, 1, 0
0x0D32	0xD7FE      	BRA         L_ler_bot19
0x0D34	0x2E0C      	DECFSZ      R12, 1, 0
0x0D36	0xD7FC      	BRA         L_ler_bot19
;TCC_5.c,347 :: 		EEPROM_Write(0x08,un4);                      //grava un4 na EEPROM
0x0D38	0x0E08      	MOVLW       8
0x0D3A	0x0101      	MOVLB       1
0x0D3C	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0D3E	0x0E00      	MOVLW       0
0x0D40	0xB50D      	BTFSC       _un4, BitPos(_un4+0), 1
0x0D42	0x0E01      	MOVLW       1
0x0D44	0x6F22      	MOVWF       FARG_EEPROM_Write_data_, 1
0x0D46	0xDF22      	RCALL       _EEPROM_Write
;TCC_5.c,348 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0D48	0x0E9C      	MOVLW       156
0x0D4A	0x6E0C      	MOVWF       R12, 0
0x0D4C	0x0ED7      	MOVLW       215
0x0D4E	0x6E0D      	MOVWF       R13, 0
L_ler_bot20:
0x0D50	0x2E0D      	DECFSZ      R13, 1, 0
0x0D52	0xD7FE      	BRA         L_ler_bot20
0x0D54	0x2E0C      	DECFSZ      R12, 1, 0
0x0D56	0xD7FC      	BRA         L_ler_bot20
;TCC_5.c,349 :: 		EEPROM_Write(0x09,qtd_comp);                 //grava qtd_comp na EEPROM
0x0D58	0x0E09      	MOVLW       9
0x0D5A	0x0101      	MOVLB       1
0x0D5C	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0D5E	0xF122C10E  	MOVFF       _qtd_comp, FARG_EEPROM_Write_data_
0x0D62	0xDF14      	RCALL       _EEPROM_Write
;TCC_5.c,350 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0D64	0x0E9C      	MOVLW       156
0x0D66	0x6E0C      	MOVWF       R12, 0
0x0D68	0x0ED7      	MOVLW       215
0x0D6A	0x6E0D      	MOVWF       R13, 0
L_ler_bot21:
0x0D6C	0x2E0D      	DECFSZ      R13, 1, 0
0x0D6E	0xD7FE      	BRA         L_ler_bot21
0x0D70	0x2E0C      	DECFSZ      R12, 1, 0
0x0D72	0xD7FC      	BRA         L_ler_bot21
;TCC_5.c,351 :: 		EEPROM_Write(0x0A,qtd_comp2);                //grava qtd_comp2 na EEPROM
0x0D74	0x0E0A      	MOVLW       10
0x0D76	0x0101      	MOVLB       1
0x0D78	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0D7A	0xF122C114  	MOVFF       _qtd_comp2, FARG_EEPROM_Write_data_
0x0D7E	0xDF06      	RCALL       _EEPROM_Write
;TCC_5.c,352 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0D80	0x0E9C      	MOVLW       156
0x0D82	0x6E0C      	MOVWF       R12, 0
0x0D84	0x0ED7      	MOVLW       215
0x0D86	0x6E0D      	MOVWF       R13, 0
L_ler_bot22:
0x0D88	0x2E0D      	DECFSZ      R13, 1, 0
0x0D8A	0xD7FE      	BRA         L_ler_bot22
0x0D8C	0x2E0C      	DECFSZ      R12, 1, 0
0x0D8E	0xD7FC      	BRA         L_ler_bot22
;TCC_5.c,353 :: 		EEPROM_Write(0x0B,qtd_comp3);                //grava qtd_comp3 na EEPROM
0x0D90	0x0E0B      	MOVLW       11
0x0D92	0x0101      	MOVLB       1
0x0D94	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0D96	0xF122C112  	MOVFF       _qtd_comp3, FARG_EEPROM_Write_data_
0x0D9A	0xDEF8      	RCALL       _EEPROM_Write
;TCC_5.c,354 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0D9C	0x0E9C      	MOVLW       156
0x0D9E	0x6E0C      	MOVWF       R12, 0
0x0DA0	0x0ED7      	MOVLW       215
0x0DA2	0x6E0D      	MOVWF       R13, 0
L_ler_bot23:
0x0DA4	0x2E0D      	DECFSZ      R13, 1, 0
0x0DA6	0xD7FE      	BRA         L_ler_bot23
0x0DA8	0x2E0C      	DECFSZ      R12, 1, 0
0x0DAA	0xD7FC      	BRA         L_ler_bot23
;TCC_5.c,355 :: 		EEPROM_Write(0x0C,qtd_comp4);                //grava qtd_comp4 na EEPROM
0x0DAC	0x0E0C      	MOVLW       12
0x0DAE	0x0101      	MOVLB       1
0x0DB0	0x6F21      	MOVWF       FARG_EEPROM_Write_address, 1
0x0DB2	0xF122C116  	MOVFF       _qtd_comp4, FARG_EEPROM_Write_data_
0x0DB6	0xDEEA      	RCALL       _EEPROM_Write
;TCC_5.c,356 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0DB8	0x0E9C      	MOVLW       156
0x0DBA	0x6E0C      	MOVWF       R12, 0
0x0DBC	0x0ED7      	MOVLW       215
0x0DBE	0x6E0D      	MOVWF       R13, 0
L_ler_bot24:
0x0DC0	0x2E0D      	DECFSZ      R13, 1, 0
0x0DC2	0xD7FE      	BRA         L_ler_bot24
0x0DC4	0x2E0C      	DECFSZ      R12, 1, 0
0x0DC6	0xD7FC      	BRA         L_ler_bot24
;TCC_5.c,357 :: 		display=0x01;                                //bit display em 1
0x0DC8	0x0101      	MOVLB       1
0x0DCA	0x870A      	BSF         _display, BitPos(_display+0), 1
;TCC_5.c,359 :: 		}                                             //end if prog = 3
L_ler_bot12:
;TCC_5.c,361 :: 		}                                              //end if !ligar
L_ler_bot11:
;TCC_5.c,363 :: 		}                                               //end if BOTAO1 && b1_flag
L_ler_bot10:
;TCC_5.c,368 :: 		if(!BOTAO2)
0x0DCC	0xB282      	BTFSC       PORTC, 1 
0x0DCE	0xD003      	BRA         L_ler_bot25
;TCC_5.c,370 :: 		b2_flag=0x01;                                  //se botão2 for pressionado, flag do botão2 = 1
0x0DD0	0x0101      	MOVLB       1
0x0DD2	0x830A      	BSF         _b2_flag, BitPos(_b2_flag+0), 1
;TCC_5.c,371 :: 		fast_incr();                                   //executa fast_incr
0x0DD4	0xDDC6      	RCALL       _fast_incr
;TCC_5.c,372 :: 		}
L_ler_bot25:
;TCC_5.c,374 :: 		if(BOTAO2 && b2_flag)                           //se botão2 for solto e flag do botão2 for 1
0x0DD6	0xA282      	BTFSS       PORTC, 1 
0x0DD8	0xD0E7      	BRA         L_ler_bot28
0x0DDA	0x0101      	MOVLB       1
0x0DDC	0xA30A      	BTFSS       _b2_flag, BitPos(_b2_flag+0), 1
0x0DDE	0xD0E4      	BRA         L_ler_bot28
L__ler_bot390:
;TCC_5.c,376 :: 		LCD_Cmd(_LCD_CLEAR);                          //limpa LCD
0x0DE0	0x0E01      	MOVLW       1
0x0DE2	0x6F2A      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x0DE4	0xF000EC5F  	CALL        _Lcd_Cmd, 0
;TCC_5.c,377 :: 		b2_flag    =  0x00;                           //limpa flag do botão
0x0DE8	0x930A      	BCF         _b2_flag, BitPos(_b2_flag+0), 1
;TCC_5.c,378 :: 		fast_inc   =  0x00;                           //limpa bit de incremento rápido
0x0DEA	0x6B1A      	CLRF        _fast_inc, 1
0x0DEC	0x6B1B      	CLRF        _fast_inc+1, 1
;TCC_5.c,379 :: 		LCD_LED = 0x01;                               //liga o LED do LCD
0x0DEE	0x8482      	BSF         PORTC, 2 
;TCC_5.c,380 :: 		if(option==0)                                  //dispenser n°1
0x0DF0	0x0E00      	MOVLW       0
0x0DF2	0x1907      	XORWF       _option+1, 0, 1
0x0DF4	0xE102      	BNZ         L__ler_bot446
0x0DF6	0x0E00      	MOVLW       0
0x0DF8	0x1906      	XORWF       _option, 0, 1
L__ler_bot446:
0x0DFA	0xE12D      	BNZ         L_ler_bot29
;TCC_5.c,382 :: 		if(prog==1)                                   //programação de numero
0x0DFC	0x0E00      	MOVLW       0
0x0DFE	0x1903      	XORWF       _prog+1, 0, 1
0x0E00	0xE102      	BNZ         L__ler_bot447
0x0E02	0x0E01      	MOVLW       1
0x0E04	0x1902      	XORWF       _prog, 0, 1
L__ler_bot447:
0x0E06	0xE102      	BNZ         L_ler_bot30
;TCC_5.c,384 :: 		num++;                                       //incrementa num
0x0E08	0x4B18      	INFSNZ      _num, 1, 1
0x0E0A	0x2B19      	INCF        _num+1, 1, 1
;TCC_5.c,385 :: 		}
L_ler_bot30:
;TCC_5.c,386 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0E0C	0x0E00      	MOVLW       0
0x0E0E	0x1903      	XORWF       _prog+1, 0, 1
0x0E10	0xE102      	BNZ         L__ler_bot448
0x0E12	0x0E02      	MOVLW       2
0x0E14	0x1902      	XORWF       _prog, 0, 1
L__ler_bot448:
0x0E16	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,388 :: 		un = ~un;                                   //inverte un
0x0E18	0x710D      	BTG         _un, BitPos(_un+0), 1
;TCC_5.c,389 :: 		}                                             //end if prog==2
L_ler_bot31:
;TCC_5.c,391 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x0E1A	0x0E00      	MOVLW       0
0x0E1C	0x1903      	XORWF       _prog+1, 0, 1
0x0E1E	0xE102      	BNZ         L__ler_bot449
0x0E20	0x0E03      	MOVLW       3
0x0E22	0x1902      	XORWF       _prog, 0, 1
L__ler_bot449:
0x0E24	0xE102      	BNZ         L_ler_bot32
;TCC_5.c,393 :: 		qtd_comp++;                                  //incrementa qtd_comp
0x0E26	0x4B0E      	INFSNZ      _qtd_comp, 1, 1
0x0E28	0x2B0F      	INCF        _qtd_comp+1, 1, 1
;TCC_5.c,394 :: 		}
L_ler_bot32:
;TCC_5.c,396 :: 		if(qtd_comp>4) qtd_comp = 0x01;               //se quantidade de comprimidos passar de 4, retorna para 1
0x0E2A	0x0E00      	MOVLW       0
0x0E2C	0x6E00      	MOVWF       R0 
0x0E2E	0x510F      	MOVF        _qtd_comp+1, 0, 1
0x0E30	0x5C00      	SUBWF       R0, 0 
0x0E32	0xE102      	BNZ         L__ler_bot450
0x0E34	0x510E      	MOVF        _qtd_comp, 0, 1
0x0E36	0x0804      	SUBLW       4
L__ler_bot450:
0x0E38	0xE204      	BC          L_ler_bot33
0x0E3A	0x0E01      	MOVLW       1
0x0E3C	0x6F0E      	MOVWF       _qtd_comp, 1
0x0E3E	0x0E00      	MOVLW       0
0x0E40	0x6F0F      	MOVWF       _qtd_comp+1, 1
L_ler_bot33:
;TCC_5.c,397 :: 		if(num>24) num=0x00;                          //se o numero passar de 24, retorna para 0
0x0E42	0x0E00      	MOVLW       0
0x0E44	0x6E00      	MOVWF       R0 
0x0E46	0x5119      	MOVF        _num+1, 0, 1
0x0E48	0x5C00      	SUBWF       R0, 0 
0x0E4A	0xE102      	BNZ         L__ler_bot451
0x0E4C	0x5118      	MOVF        _num, 0, 1
0x0E4E	0x0818      	SUBLW       24
L__ler_bot451:
0x0E50	0xE202      	BC          L_ler_bot34
0x0E52	0x6B18      	CLRF        _num, 1
0x0E54	0x6B19      	CLRF        _num+1, 1
L_ler_bot34:
;TCC_5.c,399 :: 		}                                              //end if option==0
L_ler_bot29:
;TCC_5.c,401 :: 		if(option==1)                                  //dispenser n°2
0x0E56	0x0E00      	MOVLW       0
0x0E58	0x1907      	XORWF       _option+1, 0, 1
0x0E5A	0xE102      	BNZ         L__ler_bot452
0x0E5C	0x0E01      	MOVLW       1
0x0E5E	0x1906      	XORWF       _option, 0, 1
L__ler_bot452:
0x0E60	0xE12D      	BNZ         L_ler_bot35
;TCC_5.c,403 :: 		if(prog==1)                                   //programação do numero
0x0E62	0x0E00      	MOVLW       0
0x0E64	0x1903      	XORWF       _prog+1, 0, 1
0x0E66	0xE102      	BNZ         L__ler_bot453
0x0E68	0x0E01      	MOVLW       1
0x0E6A	0x1902      	XORWF       _prog, 0, 1
L__ler_bot453:
0x0E6C	0xE102      	BNZ         L_ler_bot36
;TCC_5.c,405 :: 		num2++;                                      //incrementa num2
0x0E6E	0x4B1C      	INFSNZ      _num2, 1, 1
0x0E70	0x2B1D      	INCF        _num2+1, 1, 1
;TCC_5.c,406 :: 		}
L_ler_bot36:
;TCC_5.c,407 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0E72	0x0E00      	MOVLW       0
0x0E74	0x1903      	XORWF       _prog+1, 0, 1
0x0E76	0xE102      	BNZ         L__ler_bot454
0x0E78	0x0E02      	MOVLW       2
0x0E7A	0x1902      	XORWF       _prog, 0, 1
L__ler_bot454:
0x0E7C	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,409 :: 		un2 = ~un2;                                 //inverte un2
0x0E7E	0x730D      	BTG         _un2, BitPos(_un2+0), 1
;TCC_5.c,410 :: 		}
L_ler_bot37:
;TCC_5.c,411 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x0E80	0x0E00      	MOVLW       0
0x0E82	0x1903      	XORWF       _prog+1, 0, 1
0x0E84	0xE102      	BNZ         L__ler_bot455
0x0E86	0x0E03      	MOVLW       3
0x0E88	0x1902      	XORWF       _prog, 0, 1
L__ler_bot455:
0x0E8A	0xE102      	BNZ         L_ler_bot38
;TCC_5.c,413 :: 		qtd_comp2++;                                 //incrementa qtd_comp2
0x0E8C	0x4B14      	INFSNZ      _qtd_comp2, 1, 1
0x0E8E	0x2B15      	INCF        _qtd_comp2+1, 1, 1
;TCC_5.c,414 :: 		}
L_ler_bot38:
;TCC_5.c,416 :: 		if(qtd_comp2>4) qtd_comp2 = 0x01;             //se quantidade de comprimidos passar de 4, retorna para 1
0x0E90	0x0E00      	MOVLW       0
0x0E92	0x6E00      	MOVWF       R0 
0x0E94	0x5115      	MOVF        _qtd_comp2+1, 0, 1
0x0E96	0x5C00      	SUBWF       R0, 0 
0x0E98	0xE102      	BNZ         L__ler_bot456
0x0E9A	0x5114      	MOVF        _qtd_comp2, 0, 1
0x0E9C	0x0804      	SUBLW       4
L__ler_bot456:
0x0E9E	0xE204      	BC          L_ler_bot39
0x0EA0	0x0E01      	MOVLW       1
0x0EA2	0x6F14      	MOVWF       _qtd_comp2, 1
0x0EA4	0x0E00      	MOVLW       0
0x0EA6	0x6F15      	MOVWF       _qtd_comp2+1, 1
L_ler_bot39:
;TCC_5.c,417 :: 		if(num2>24) num2=0x00;                        //se o numero passar de 24, retorna para 0
0x0EA8	0x0E00      	MOVLW       0
0x0EAA	0x6E00      	MOVWF       R0 
0x0EAC	0x511D      	MOVF        _num2+1, 0, 1
0x0EAE	0x5C00      	SUBWF       R0, 0 
0x0EB0	0xE102      	BNZ         L__ler_bot457
0x0EB2	0x511C      	MOVF        _num2, 0, 1
0x0EB4	0x0818      	SUBLW       24
L__ler_bot457:
0x0EB6	0xE202      	BC          L_ler_bot40
0x0EB8	0x6B1C      	CLRF        _num2, 1
0x0EBA	0x6B1D      	CLRF        _num2+1, 1
L_ler_bot40:
;TCC_5.c,419 :: 		}                                              //end if option==1
L_ler_bot35:
;TCC_5.c,421 :: 		if(option==2)                                  //dispenser n°3
0x0EBC	0x0E00      	MOVLW       0
0x0EBE	0x1907      	XORWF       _option+1, 0, 1
0x0EC0	0xE102      	BNZ         L__ler_bot458
0x0EC2	0x0E02      	MOVLW       2
0x0EC4	0x1906      	XORWF       _option, 0, 1
L__ler_bot458:
0x0EC6	0xE12D      	BNZ         L_ler_bot41
;TCC_5.c,423 :: 		if(prog==1)                                   //programação do numero
0x0EC8	0x0E00      	MOVLW       0
0x0ECA	0x1903      	XORWF       _prog+1, 0, 1
0x0ECC	0xE102      	BNZ         L__ler_bot459
0x0ECE	0x0E01      	MOVLW       1
0x0ED0	0x1902      	XORWF       _prog, 0, 1
L__ler_bot459:
0x0ED2	0xE102      	BNZ         L_ler_bot42
;TCC_5.c,425 :: 		num3++;                                      //incrementa num3
0x0ED4	0x4B1E      	INFSNZ      _num3, 1, 1
0x0ED6	0x2B1F      	INCF        _num3+1, 1, 1
;TCC_5.c,426 :: 		}
L_ler_bot42:
;TCC_5.c,427 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0ED8	0x0E00      	MOVLW       0
0x0EDA	0x1903      	XORWF       _prog+1, 0, 1
0x0EDC	0xE102      	BNZ         L__ler_bot460
0x0EDE	0x0E02      	MOVLW       2
0x0EE0	0x1902      	XORWF       _prog, 0, 1
L__ler_bot460:
0x0EE2	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,429 :: 		un3 = ~un3;                                 //inverte un3
0x0EE4	0x770D      	BTG         _un3, BitPos(_un3+0), 1
;TCC_5.c,430 :: 		}
L_ler_bot43:
;TCC_5.c,431 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x0EE6	0x0E00      	MOVLW       0
0x0EE8	0x1903      	XORWF       _prog+1, 0, 1
0x0EEA	0xE102      	BNZ         L__ler_bot461
0x0EEC	0x0E03      	MOVLW       3
0x0EEE	0x1902      	XORWF       _prog, 0, 1
L__ler_bot461:
0x0EF0	0xE102      	BNZ         L_ler_bot44
;TCC_5.c,433 :: 		qtd_comp3++;                                 //incrementa qtd_comp3
0x0EF2	0x4B12      	INFSNZ      _qtd_comp3, 1, 1
0x0EF4	0x2B13      	INCF        _qtd_comp3+1, 1, 1
;TCC_5.c,434 :: 		}
L_ler_bot44:
;TCC_5.c,436 :: 		if(qtd_comp3>4) qtd_comp3 = 0x01;             //se quantidade de comprimidos passar de 4, retorna para 1
0x0EF6	0x0E00      	MOVLW       0
0x0EF8	0x6E00      	MOVWF       R0 
0x0EFA	0x5113      	MOVF        _qtd_comp3+1, 0, 1
0x0EFC	0x5C00      	SUBWF       R0, 0 
0x0EFE	0xE102      	BNZ         L__ler_bot462
0x0F00	0x5112      	MOVF        _qtd_comp3, 0, 1
0x0F02	0x0804      	SUBLW       4
L__ler_bot462:
0x0F04	0xE204      	BC          L_ler_bot45
0x0F06	0x0E01      	MOVLW       1
0x0F08	0x6F12      	MOVWF       _qtd_comp3, 1
0x0F0A	0x0E00      	MOVLW       0
0x0F0C	0x6F13      	MOVWF       _qtd_comp3+1, 1
L_ler_bot45:
;TCC_5.c,437 :: 		if(num3>24) num3=0x00;                        //se o numero passar de 24, retorna para 0
0x0F0E	0x0E00      	MOVLW       0
0x0F10	0x6E00      	MOVWF       R0 
0x0F12	0x511F      	MOVF        _num3+1, 0, 1
0x0F14	0x5C00      	SUBWF       R0, 0 
0x0F16	0xE102      	BNZ         L__ler_bot463
0x0F18	0x511E      	MOVF        _num3, 0, 1
0x0F1A	0x0818      	SUBLW       24
L__ler_bot463:
0x0F1C	0xE202      	BC          L_ler_bot46
0x0F1E	0x6B1E      	CLRF        _num3, 1
0x0F20	0x6B1F      	CLRF        _num3+1, 1
L_ler_bot46:
;TCC_5.c,439 :: 		}                                              //end if option==2
L_ler_bot41:
;TCC_5.c,441 :: 		if(option==3)                                  //dispenser n°4
0x0F22	0x0E00      	MOVLW       0
0x0F24	0x1907      	XORWF       _option+1, 0, 1
0x0F26	0xE102      	BNZ         L__ler_bot464
0x0F28	0x0E03      	MOVLW       3
0x0F2A	0x1906      	XORWF       _option, 0, 1
L__ler_bot464:
0x0F2C	0xE12D      	BNZ         L_ler_bot47
;TCC_5.c,443 :: 		if(prog==1)                                   //programação do numero
0x0F2E	0x0E00      	MOVLW       0
0x0F30	0x1903      	XORWF       _prog+1, 0, 1
0x0F32	0xE102      	BNZ         L__ler_bot465
0x0F34	0x0E01      	MOVLW       1
0x0F36	0x1902      	XORWF       _prog, 0, 1
L__ler_bot465:
0x0F38	0xE102      	BNZ         L_ler_bot48
;TCC_5.c,445 :: 		num4++;                                      //incrementa num4
0x0F3A	0x4B10      	INFSNZ      _num4, 1, 1
0x0F3C	0x2B11      	INCF        _num4+1, 1, 1
;TCC_5.c,446 :: 		}
L_ler_bot48:
;TCC_5.c,447 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0F3E	0x0E00      	MOVLW       0
0x0F40	0x1903      	XORWF       _prog+1, 0, 1
0x0F42	0xE102      	BNZ         L__ler_bot466
0x0F44	0x0E02      	MOVLW       2
0x0F46	0x1902      	XORWF       _prog, 0, 1
L__ler_bot466:
0x0F48	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,449 :: 		un4 = ~un4;                                 //inverte un4
0x0F4A	0x750D      	BTG         _un4, BitPos(_un4+0), 1
;TCC_5.c,450 :: 		}
L_ler_bot49:
;TCC_5.c,451 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x0F4C	0x0E00      	MOVLW       0
0x0F4E	0x1903      	XORWF       _prog+1, 0, 1
0x0F50	0xE102      	BNZ         L__ler_bot467
0x0F52	0x0E03      	MOVLW       3
0x0F54	0x1902      	XORWF       _prog, 0, 1
L__ler_bot467:
0x0F56	0xE102      	BNZ         L_ler_bot50
;TCC_5.c,453 :: 		qtd_comp4++;                                 //incrementa qtd_comp4
0x0F58	0x4B16      	INFSNZ      _qtd_comp4, 1, 1
0x0F5A	0x2B17      	INCF        _qtd_comp4+1, 1, 1
;TCC_5.c,454 :: 		}
L_ler_bot50:
;TCC_5.c,456 :: 		if(qtd_comp4>4) qtd_comp4 = 0x01;             //se quantidade de comprimidos passar de 4, retorna para 1
0x0F5C	0x0E00      	MOVLW       0
0x0F5E	0x6E00      	MOVWF       R0 
0x0F60	0x5117      	MOVF        _qtd_comp4+1, 0, 1
0x0F62	0x5C00      	SUBWF       R0, 0 
0x0F64	0xE102      	BNZ         L__ler_bot468
0x0F66	0x5116      	MOVF        _qtd_comp4, 0, 1
0x0F68	0x0804      	SUBLW       4
L__ler_bot468:
0x0F6A	0xE204      	BC          L_ler_bot51
0x0F6C	0x0E01      	MOVLW       1
0x0F6E	0x6F16      	MOVWF       _qtd_comp4, 1
0x0F70	0x0E00      	MOVLW       0
0x0F72	0x6F17      	MOVWF       _qtd_comp4+1, 1
L_ler_bot51:
;TCC_5.c,457 :: 		if(num4>24) num4=0x00;                        //se o numero passar de 24, retorna para 0
0x0F74	0x0E00      	MOVLW       0
0x0F76	0x6E00      	MOVWF       R0 
0x0F78	0x5111      	MOVF        _num4+1, 0, 1
0x0F7A	0x5C00      	SUBWF       R0, 0 
0x0F7C	0xE102      	BNZ         L__ler_bot469
0x0F7E	0x5110      	MOVF        _num4, 0, 1
0x0F80	0x0818      	SUBLW       24
L__ler_bot469:
0x0F82	0xE202      	BC          L_ler_bot52
0x0F84	0x6B10      	CLRF        _num4, 1
0x0F86	0x6B11      	CLRF        _num4+1, 1
L_ler_bot52:
;TCC_5.c,459 :: 		}                                              //end if option==3
L_ler_bot47:
;TCC_5.c,461 :: 		comp  = qtd_comp;
0x0F88	0xF03FC10E  	MOVFF       _qtd_comp, _comp
0x0F8C	0xF040C10F  	MOVFF       _qtd_comp+1, _comp+1
;TCC_5.c,462 :: 		comp2 = qtd_comp2;
0x0F90	0xF041C114  	MOVFF       _qtd_comp2, _comp2
0x0F94	0xF042C115  	MOVFF       _qtd_comp2+1, _comp2+1
;TCC_5.c,463 :: 		comp3 = qtd_comp3;
0x0F98	0xF043C112  	MOVFF       _qtd_comp3, _comp3
0x0F9C	0xF044C113  	MOVFF       _qtd_comp3+1, _comp3+1
;TCC_5.c,464 :: 		comp4 = qtd_comp4;                             //igualando as variaveis para despejar o numero certo de comprimidos
0x0FA0	0xF03DC116  	MOVFF       _qtd_comp4, _comp4
0x0FA4	0xF03EC117  	MOVFF       _qtd_comp4+1, _comp4+1
;TCC_5.c,466 :: 		}                                               //end if BOTAO2 e b2_flag
L_ler_bot28:
;TCC_5.c,469 :: 		if(!BOTAO3) b3_flag=0x01;                       //se botão3 for pressionado, flag do botão3 = 1
0x0FA8	0xBA80      	BTFSC       PORTA, 5 
0x0FAA	0xD002      	BRA         L_ler_bot53
0x0FAC	0x0101      	MOVLB       1
0x0FAE	0x8F0B      	BSF         _b3_flag, BitPos(_b3_flag+0), 1
L_ler_bot53:
;TCC_5.c,471 :: 		if(BOTAO3 && b3_flag)                           //se botão3 for solto e flag do botão3 for 1
0x0FB0	0xAA80      	BTFSS       PORTA, 5 
0x0FB2	0xD0F5      	BRA         L_ler_bot56
0x0FB4	0x0101      	MOVLB       1
0x0FB6	0xAF0B      	BTFSS       _b3_flag, BitPos(_b3_flag+0), 1
0x0FB8	0xD0F2      	BRA         L_ler_bot56
L__ler_bot389:
;TCC_5.c,473 :: 		LCD_Cmd(_LCD_CLEAR);                           //limpa LCD
0x0FBA	0x0E01      	MOVLW       1
0x0FBC	0x6F2A      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x0FBE	0xF000EC5F  	CALL        _Lcd_Cmd, 0
;TCC_5.c,474 :: 		b3_flag     =  0x00;                           //limpa flag do botão3
0x0FC2	0x9F0B      	BCF         _b3_flag, BitPos(_b3_flag+0), 1
;TCC_5.c,475 :: 		LCD_LED = 0x01;                                //liga o LED do LCD
0x0FC4	0x8482      	BSF         PORTC, 2 
;TCC_5.c,476 :: 		if(option==0)                                  //dispenser n°1
0x0FC6	0x0E00      	MOVLW       0
0x0FC8	0x1907      	XORWF       _option+1, 0, 1
0x0FCA	0xE102      	BNZ         L__ler_bot470
0x0FCC	0x0E00      	MOVLW       0
0x0FCE	0x1906      	XORWF       _option, 0, 1
L__ler_bot470:
0x0FD0	0xE131      	BNZ         L_ler_bot57
;TCC_5.c,478 :: 		if(prog==1)                                   //programação do numero
0x0FD2	0x0E00      	MOVLW       0
0x0FD4	0x1903      	XORWF       _prog+1, 0, 1
0x0FD6	0xE102      	BNZ         L__ler_bot471
0x0FD8	0x0E01      	MOVLW       1
0x0FDA	0x1902      	XORWF       _prog, 0, 1
L__ler_bot471:
0x0FDC	0xE104      	BNZ         L_ler_bot58
;TCC_5.c,480 :: 		num--;                                       //decrementa num
0x0FDE	0x0E01      	MOVLW       1
0x0FE0	0x5F18      	SUBWF       _num, 1, 1
0x0FE2	0x0E00      	MOVLW       0
0x0FE4	0x5B19      	SUBWFB      _num+1, 1, 1
;TCC_5.c,482 :: 		}
L_ler_bot58:
;TCC_5.c,483 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0FE6	0x0E00      	MOVLW       0
0x0FE8	0x1903      	XORWF       _prog+1, 0, 1
0x0FEA	0xE102      	BNZ         L__ler_bot472
0x0FEC	0x0E02      	MOVLW       2
0x0FEE	0x1902      	XORWF       _prog, 0, 1
L__ler_bot472:
0x0FF0	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,485 :: 		un = ~un;                                    //inverte un
0x0FF2	0x710D      	BTG         _un, BitPos(_un+0), 1
;TCC_5.c,486 :: 		}
L_ler_bot59:
;TCC_5.c,487 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x0FF4	0x0E00      	MOVLW       0
0x0FF6	0x1903      	XORWF       _prog+1, 0, 1
0x0FF8	0xE102      	BNZ         L__ler_bot473
0x0FFA	0x0E03      	MOVLW       3
0x0FFC	0x1902      	XORWF       _prog, 0, 1
L__ler_bot473:
0x0FFE	0xE104      	BNZ         L_ler_bot60
;TCC_5.c,489 :: 		qtd_comp--;                                  //decrementa qtd_comp3
0x1000	0x0E01      	MOVLW       1
0x1002	0x5F0E      	SUBWF       _qtd_comp, 1, 1
0x1004	0x0E00      	MOVLW       0
0x1006	0x5B0F      	SUBWFB      _qtd_comp+1, 1, 1
;TCC_5.c,490 :: 		}
L_ler_bot60:
;TCC_5.c,492 :: 		if(qtd_comp<1) qtd_comp = 0x04;               //se quantidade de comprimidos passar de 1, retorna para 4
0x1008	0x0E00      	MOVLW       0
0x100A	0x5D0F      	SUBWF       _qtd_comp+1, 0, 1
0x100C	0xE102      	BNZ         L__ler_bot474
0x100E	0x0E01      	MOVLW       1
0x1010	0x5D0E      	SUBWF       _qtd_comp, 0, 1
L__ler_bot474:
0x1012	0xE204      	BC          L_ler_bot61
0x1014	0x0E04      	MOVLW       4
0x1016	0x6F0E      	MOVWF       _qtd_comp, 1
0x1018	0x0E00      	MOVLW       0
0x101A	0x6F0F      	MOVWF       _qtd_comp+1, 1
L_ler_bot61:
;TCC_5.c,493 :: 		if(num>24) num=24;                            //se o numero for maior que 24, vai para 24
0x101C	0x0E00      	MOVLW       0
0x101E	0x6E00      	MOVWF       R0 
0x1020	0x5119      	MOVF        _num+1, 0, 1
0x1022	0x5C00      	SUBWF       R0, 0 
0x1024	0xE102      	BNZ         L__ler_bot475
0x1026	0x5118      	MOVF        _num, 0, 1
0x1028	0x0818      	SUBLW       24
L__ler_bot475:
0x102A	0xE204      	BC          L_ler_bot62
0x102C	0x0E18      	MOVLW       24
0x102E	0x6F18      	MOVWF       _num, 1
0x1030	0x0E00      	MOVLW       0
0x1032	0x6F19      	MOVWF       _num+1, 1
L_ler_bot62:
;TCC_5.c,494 :: 		}                                              //end if option==0
L_ler_bot57:
;TCC_5.c,496 :: 		if(option==1)                                  //dispenser n°2
0x1034	0x0E00      	MOVLW       0
0x1036	0x1907      	XORWF       _option+1, 0, 1
0x1038	0xE102      	BNZ         L__ler_bot476
0x103A	0x0E01      	MOVLW       1
0x103C	0x1906      	XORWF       _option, 0, 1
L__ler_bot476:
0x103E	0xE131      	BNZ         L_ler_bot63
;TCC_5.c,498 :: 		if(prog==1)                                   //programação do número
0x1040	0x0E00      	MOVLW       0
0x1042	0x1903      	XORWF       _prog+1, 0, 1
0x1044	0xE102      	BNZ         L__ler_bot477
0x1046	0x0E01      	MOVLW       1
0x1048	0x1902      	XORWF       _prog, 0, 1
L__ler_bot477:
0x104A	0xE104      	BNZ         L_ler_bot64
;TCC_5.c,500 :: 		num2--;                                      //decrementa num2
0x104C	0x0E01      	MOVLW       1
0x104E	0x5F1C      	SUBWF       _num2, 1, 1
0x1050	0x0E00      	MOVLW       0
0x1052	0x5B1D      	SUBWFB      _num2+1, 1, 1
;TCC_5.c,502 :: 		}
L_ler_bot64:
;TCC_5.c,503 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x1054	0x0E00      	MOVLW       0
0x1056	0x1903      	XORWF       _prog+1, 0, 1
0x1058	0xE102      	BNZ         L__ler_bot478
0x105A	0x0E02      	MOVLW       2
0x105C	0x1902      	XORWF       _prog, 0, 1
L__ler_bot478:
0x105E	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,505 :: 		un2 = ~un2;                                  //inverte un2
0x1060	0x730D      	BTG         _un2, BitPos(_un2+0), 1
;TCC_5.c,506 :: 		}
L_ler_bot65:
;TCC_5.c,507 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x1062	0x0E00      	MOVLW       0
0x1064	0x1903      	XORWF       _prog+1, 0, 1
0x1066	0xE102      	BNZ         L__ler_bot479
0x1068	0x0E03      	MOVLW       3
0x106A	0x1902      	XORWF       _prog, 0, 1
L__ler_bot479:
0x106C	0xE104      	BNZ         L_ler_bot66
;TCC_5.c,509 :: 		qtd_comp2--;                                 //decrementa qtd_comp2
0x106E	0x0E01      	MOVLW       1
0x1070	0x5F14      	SUBWF       _qtd_comp2, 1, 1
0x1072	0x0E00      	MOVLW       0
0x1074	0x5B15      	SUBWFB      _qtd_comp2+1, 1, 1
;TCC_5.c,510 :: 		}
L_ler_bot66:
;TCC_5.c,512 :: 		if(qtd_comp2<1) qtd_comp2 = 0x04;             //se quantidade de comprimidos passar de 1, retorna para 4
0x1076	0x0E00      	MOVLW       0
0x1078	0x5D15      	SUBWF       _qtd_comp2+1, 0, 1
0x107A	0xE102      	BNZ         L__ler_bot480
0x107C	0x0E01      	MOVLW       1
0x107E	0x5D14      	SUBWF       _qtd_comp2, 0, 1
L__ler_bot480:
0x1080	0xE204      	BC          L_ler_bot67
0x1082	0x0E04      	MOVLW       4
0x1084	0x6F14      	MOVWF       _qtd_comp2, 1
0x1086	0x0E00      	MOVLW       0
0x1088	0x6F15      	MOVWF       _qtd_comp2+1, 1
L_ler_bot67:
;TCC_5.c,513 :: 		if(num2>24) num2=24;                          //se o numero for maior que 24, vai para 24
0x108A	0x0E00      	MOVLW       0
0x108C	0x6E00      	MOVWF       R0 
0x108E	0x511D      	MOVF        _num2+1, 0, 1
0x1090	0x5C00      	SUBWF       R0, 0 
0x1092	0xE102      	BNZ         L__ler_bot481
0x1094	0x511C      	MOVF        _num2, 0, 1
0x1096	0x0818      	SUBLW       24
L__ler_bot481:
0x1098	0xE204      	BC          L_ler_bot68
0x109A	0x0E18      	MOVLW       24
0x109C	0x6F1C      	MOVWF       _num2, 1
0x109E	0x0E00      	MOVLW       0
0x10A0	0x6F1D      	MOVWF       _num2+1, 1
L_ler_bot68:
;TCC_5.c,515 :: 		}                                              //end if option==1
L_ler_bot63:
;TCC_5.c,517 :: 		if(option==2)                                  //dispenser n°3
0x10A2	0x0E00      	MOVLW       0
0x10A4	0x1907      	XORWF       _option+1, 0, 1
0x10A6	0xE102      	BNZ         L__ler_bot482
0x10A8	0x0E02      	MOVLW       2
0x10AA	0x1906      	XORWF       _option, 0, 1
L__ler_bot482:
0x10AC	0xE131      	BNZ         L_ler_bot69
;TCC_5.c,519 :: 		if(prog==1)                                   //programação do número
0x10AE	0x0E00      	MOVLW       0
0x10B0	0x1903      	XORWF       _prog+1, 0, 1
0x10B2	0xE102      	BNZ         L__ler_bot483
0x10B4	0x0E01      	MOVLW       1
0x10B6	0x1902      	XORWF       _prog, 0, 1
L__ler_bot483:
0x10B8	0xE104      	BNZ         L_ler_bot70
;TCC_5.c,521 :: 		num3--;                                      //decrementa num3
0x10BA	0x0E01      	MOVLW       1
0x10BC	0x5F1E      	SUBWF       _num3, 1, 1
0x10BE	0x0E00      	MOVLW       0
0x10C0	0x5B1F      	SUBWFB      _num3+1, 1, 1
;TCC_5.c,523 :: 		}
L_ler_bot70:
;TCC_5.c,524 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x10C2	0x0E00      	MOVLW       0
0x10C4	0x1903      	XORWF       _prog+1, 0, 1
0x10C6	0xE102      	BNZ         L__ler_bot484
0x10C8	0x0E02      	MOVLW       2
0x10CA	0x1902      	XORWF       _prog, 0, 1
L__ler_bot484:
0x10CC	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,526 :: 		un3 = ~un3;                                  //inverte un3
0x10CE	0x770D      	BTG         _un3, BitPos(_un3+0), 1
;TCC_5.c,527 :: 		}
L_ler_bot71:
;TCC_5.c,528 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x10D0	0x0E00      	MOVLW       0
0x10D2	0x1903      	XORWF       _prog+1, 0, 1
0x10D4	0xE102      	BNZ         L__ler_bot485
0x10D6	0x0E03      	MOVLW       3
0x10D8	0x1902      	XORWF       _prog, 0, 1
L__ler_bot485:
0x10DA	0xE104      	BNZ         L_ler_bot72
;TCC_5.c,530 :: 		qtd_comp3--;                                 //decrementa qtd_comp3
0x10DC	0x0E01      	MOVLW       1
0x10DE	0x5F12      	SUBWF       _qtd_comp3, 1, 1
0x10E0	0x0E00      	MOVLW       0
0x10E2	0x5B13      	SUBWFB      _qtd_comp3+1, 1, 1
;TCC_5.c,531 :: 		}
L_ler_bot72:
;TCC_5.c,533 :: 		if(qtd_comp3<1) qtd_comp3 = 0x04;             //se quantidade de comprimidos passar de 1, retorna para 4
0x10E4	0x0E00      	MOVLW       0
0x10E6	0x5D13      	SUBWF       _qtd_comp3+1, 0, 1
0x10E8	0xE102      	BNZ         L__ler_bot486
0x10EA	0x0E01      	MOVLW       1
0x10EC	0x5D12      	SUBWF       _qtd_comp3, 0, 1
L__ler_bot486:
0x10EE	0xE204      	BC          L_ler_bot73
0x10F0	0x0E04      	MOVLW       4
0x10F2	0x6F12      	MOVWF       _qtd_comp3, 1
0x10F4	0x0E00      	MOVLW       0
0x10F6	0x6F13      	MOVWF       _qtd_comp3+1, 1
L_ler_bot73:
;TCC_5.c,534 :: 		if(num3>24) num3=24;                          //se o numero for maior que 24, vai para 24
0x10F8	0x0E00      	MOVLW       0
0x10FA	0x6E00      	MOVWF       R0 
0x10FC	0x511F      	MOVF        _num3+1, 0, 1
0x10FE	0x5C00      	SUBWF       R0, 0 
0x1100	0xE102      	BNZ         L__ler_bot487
0x1102	0x511E      	MOVF        _num3, 0, 1
0x1104	0x0818      	SUBLW       24
L__ler_bot487:
0x1106	0xE204      	BC          L_ler_bot74
0x1108	0x0E18      	MOVLW       24
0x110A	0x6F1E      	MOVWF       _num3, 1
0x110C	0x0E00      	MOVLW       0
0x110E	0x6F1F      	MOVWF       _num3+1, 1
L_ler_bot74:
;TCC_5.c,536 :: 		}                                              //end if option==2
L_ler_bot69:
;TCC_5.c,538 :: 		if(option==3)                                  //dispenser n°4
0x1110	0x0E00      	MOVLW       0
0x1112	0x1907      	XORWF       _option+1, 0, 1
0x1114	0xE102      	BNZ         L__ler_bot488
0x1116	0x0E03      	MOVLW       3
0x1118	0x1906      	XORWF       _option, 0, 1
L__ler_bot488:
0x111A	0xE131      	BNZ         L_ler_bot75
;TCC_5.c,540 :: 		if(prog==1)                                   //programação do número
0x111C	0x0E00      	MOVLW       0
0x111E	0x1903      	XORWF       _prog+1, 0, 1
0x1120	0xE102      	BNZ         L__ler_bot489
0x1122	0x0E01      	MOVLW       1
0x1124	0x1902      	XORWF       _prog, 0, 1
L__ler_bot489:
0x1126	0xE104      	BNZ         L_ler_bot76
;TCC_5.c,542 :: 		num4--;                                      //decrementa num4
0x1128	0x0E01      	MOVLW       1
0x112A	0x5F10      	SUBWF       _num4, 1, 1
0x112C	0x0E00      	MOVLW       0
0x112E	0x5B11      	SUBWFB      _num4+1, 1, 1
;TCC_5.c,544 :: 		}
L_ler_bot76:
;TCC_5.c,545 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x1130	0x0E00      	MOVLW       0
0x1132	0x1903      	XORWF       _prog+1, 0, 1
0x1134	0xE102      	BNZ         L__ler_bot490
0x1136	0x0E02      	MOVLW       2
0x1138	0x1902      	XORWF       _prog, 0, 1
L__ler_bot490:
0x113A	0xB4D8      	BTFSC       STATUS, 2 
;TCC_5.c,547 :: 		un4 = ~un4;                                  //inverte un4
0x113C	0x750D      	BTG         _un4, BitPos(_un4+0), 1
;TCC_5.c,548 :: 		}
L_ler_bot77:
;TCC_5.c,549 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x113E	0x0E00      	MOVLW       0
0x1140	0x1903      	XORWF       _prog+1, 0, 1
0x1142	0xE102      	BNZ         L__ler_bot491
0x1144	0x0E03      	MOVLW       3
0x1146	0x1902      	XORWF       _prog, 0, 1
L__ler_bot491:
0x1148	0xE104      	BNZ         L_ler_bot78
;TCC_5.c,551 :: 		qtd_comp4--;                                 //decrementa qtd_comp4
0x114A	0x0E01      	MOVLW       1
0x114C	0x5F16      	SUBWF       _qtd_comp4, 1, 1
0x114E	0x0E00      	MOVLW       0
0x1150	0x5B17      	SUBWFB      _qtd_comp4+1, 1, 1
;TCC_5.c,552 :: 		}
L_ler_bot78:
;TCC_5.c,554 :: 		if(qtd_comp4<1) qtd_comp4 = 0x04;             //se quantidade de comprimidos passar de 1, retorna para 4
0x1152	0x0E00      	MOVLW       0
0x1154	0x5D17      	SUBWF       _qtd_comp4+1, 0, 1
0x1156	0xE102      	BNZ         L__ler_bot492
0x1158	0x0E01      	MOVLW       1
0x115A	0x5D16      	SUBWF       _qtd_comp4, 0, 1
L__ler_bot492:
0x115C	0xE204      	BC          L_ler_bot79
0x115E	0x0E04      	MOVLW       4
0x1160	0x6F16      	MOVWF       _qtd_comp4, 1
0x1162	0x0E00      	MOVLW       0
0x1164	0x6F17      	MOVWF       _qtd_comp4+1, 1
L_ler_bot79:
;TCC_5.c,556 :: 		if(num4>24) num4=24;                          //se o numero for maior que 24, vai para 24
0x1166	0x0E00      	MOVLW       0
0x1168	0x6E00      	MOVWF       R0 
0x116A	0x5111      	MOVF        _num4+1, 0, 1
0x116C	0x5C00      	SUBWF       R0, 0 
0x116E	0xE102      	BNZ         L__ler_bot493
0x1170	0x5110      	MOVF        _num4, 0, 1
0x1172	0x0818      	SUBLW       24
L__ler_bot493:
0x1174	0xE204      	BC          L_ler_bot80
0x1176	0x0E18      	MOVLW       24
0x1178	0x6F10      	MOVWF       _num4, 1
0x117A	0x0E00      	MOVLW       0
0x117C	0x6F11      	MOVWF       _num4+1, 1
L_ler_bot80:
;TCC_5.c,558 :: 		}                                              //end if option==3
L_ler_bot75:
;TCC_5.c,560 :: 		comp  = qtd_comp;
0x117E	0xF03FC10E  	MOVFF       _qtd_comp, _comp
0x1182	0xF040C10F  	MOVFF       _qtd_comp+1, _comp+1
;TCC_5.c,561 :: 		comp2 = qtd_comp2;
0x1186	0xF041C114  	MOVFF       _qtd_comp2, _comp2
0x118A	0xF042C115  	MOVFF       _qtd_comp2+1, _comp2+1
;TCC_5.c,562 :: 		comp3 = qtd_comp3;
0x118E	0xF043C112  	MOVFF       _qtd_comp3, _comp3
0x1192	0xF044C113  	MOVFF       _qtd_comp3+1, _comp3+1
;TCC_5.c,563 :: 		comp4 = qtd_comp4;                             //igualando as variaveis para despejar o numero certo de comprimidos
0x1196	0xF03DC116  	MOVFF       _qtd_comp4, _comp4
0x119A	0xF03EC117  	MOVFF       _qtd_comp4+1, _comp4+1
;TCC_5.c,565 :: 		}                                               //end if botão3 e b3_flag
L_ler_bot56:
;TCC_5.c,568 :: 		if(!BOTAO4) b4_flag=0x01;                       //se botão4 for pressionado, flag do botão4 = 1
0x119E	0xBC82      	BTFSC       PORTC, 6 
0x11A0	0xD002      	BRA         L_ler_bot81
0x11A2	0x0101      	MOVLB       1
0x11A4	0x810C      	BSF         _b4_flag, BitPos(_b4_flag+0), 1
L_ler_bot81:
;TCC_5.c,570 :: 		if(BOTAO4 && b4_flag)                           //se botão4 for solto e flag do botão4 for 1
0x11A6	0xAC82      	BTFSS       PORTC, 6 
0x11A8	0xD03F      	BRA         L_ler_bot84
0x11AA	0x0101      	MOVLB       1
0x11AC	0xA10C      	BTFSS       _b4_flag, BitPos(_b4_flag+0), 1
0x11AE	0xD03C      	BRA         L_ler_bot84
L__ler_bot388:
;TCC_5.c,572 :: 		LCD_Cmd(_LCD_CLEAR);                          //limpa LCD
0x11B0	0x0E01      	MOVLW       1
0x11B2	0x6F2A      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x11B4	0xF000EC5F  	CALL        _Lcd_Cmd, 0
;TCC_5.c,573 :: 		b4_flag    =  0x00;                           //limpa flag do botão4
0x11B8	0x910C      	BCF         _b4_flag, BitPos(_b4_flag+0), 1
;TCC_5.c,574 :: 		if(num!=0 || num2!=0 || num3!=0 || num4!=0)    //se num, num2, num3 ou num4 for diferente 0
0x11BA	0x0E00      	MOVLW       0
0x11BC	0x1919      	XORWF       _num+1, 0, 1
0x11BE	0xE102      	BNZ         L__ler_bot494
0x11C0	0x0E00      	MOVLW       0
0x11C2	0x1918      	XORWF       _num, 0, 1
L__ler_bot494:
0x11C4	0xE113      	BNZ         L__ler_bot387
0x11C6	0x0E00      	MOVLW       0
0x11C8	0x191D      	XORWF       _num2+1, 0, 1
0x11CA	0xE102      	BNZ         L__ler_bot495
0x11CC	0x0E00      	MOVLW       0
0x11CE	0x191C      	XORWF       _num2, 0, 1
L__ler_bot495:
0x11D0	0xE10D      	BNZ         L__ler_bot387
0x11D2	0x0E00      	MOVLW       0
0x11D4	0x191F      	XORWF       _num3+1, 0, 1
0x11D6	0xE102      	BNZ         L__ler_bot496
0x11D8	0x0E00      	MOVLW       0
0x11DA	0x191E      	XORWF       _num3, 0, 1
L__ler_bot496:
0x11DC	0xE107      	BNZ         L__ler_bot387
0x11DE	0x0E00      	MOVLW       0
0x11E0	0x1911      	XORWF       _num4+1, 0, 1
0x11E2	0xE102      	BNZ         L__ler_bot497
0x11E4	0x0E00      	MOVLW       0
0x11E6	0x1910      	XORWF       _num4, 0, 1
L__ler_bot497:
0x11E8	0xE101      	BNZ         L__ler_bot387
0x11EA	0xD01E      	BRA         L_ler_bot87
L__ler_bot387:
;TCC_5.c,576 :: 		if(prog==0)                                   //se prog = 0
0x11EC	0x0E00      	MOVLW       0
0x11EE	0x1903      	XORWF       _prog+1, 0, 1
0x11F0	0xE102      	BNZ         L__ler_bot498
0x11F2	0x0E00      	MOVLW       0
0x11F4	0x1902      	XORWF       _prog, 0, 1
L__ler_bot498:
0x11F6	0xE118      	BNZ         L_ler_bot88
;TCC_5.c,578 :: 		if(!toque && !toque2 && !toque3 && !toque4)  //se nenhum contador tiver finalizado...
0x11F8	0xB90B      	BTFSC       _toque, BitPos(_toque+0), 1
0x11FA	0xD016      	BRA         L_ler_bot91
0x11FC	0xBB0B      	BTFSC       _toque2, BitPos(_toque2+0), 1
0x11FE	0xD014      	BRA         L_ler_bot91
0x1200	0xBD0B      	BTFSC       _toque3, BitPos(_toque3+0), 1
0x1202	0xD012      	BRA         L_ler_bot91
0x1204	0xB30C      	BTFSC       _toque4, BitPos(_toque4+0), 1
0x1206	0xD010      	BRA         L_ler_bot91
L__ler_bot386:
;TCC_5.c,580 :: 		if(!ligar)                                  //se bit de ligar = 0 (desligado)
0x1208	0xBB0D      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x120A	0xD009      	BRA         L_ler_bot92
;TCC_5.c,582 :: 		temp =0x00;                                //zera temp
0x120C	0x0100      	MOVLB       0
0x120E	0x6BDC      	CLRF        _temp, 1
0x1210	0x6BDD      	CLRF        _temp+1, 1
;TCC_5.c,583 :: 		temp2=0x00;                                //zera temp2
0x1212	0x6BDE      	CLRF        _temp2, 1
0x1214	0x6BDF      	CLRF        _temp2+1, 1
;TCC_5.c,584 :: 		temp3=0x00;                                //zera temp3
0x1216	0x6BE0      	CLRF        _temp3, 1
0x1218	0x6BE1      	CLRF        _temp3+1, 1
;TCC_5.c,585 :: 		temp4=0x00;                                //zera temp4
0x121A	0x6BD6      	CLRF        _temp4, 1
0x121C	0x6BD7      	CLRF        _temp4+1, 1
;TCC_5.c,587 :: 		}                                           //end if !ligar
L_ler_bot92:
;TCC_5.c,588 :: 		ligar = ~ligar;                              //inverte ligar
0x121E	0x0101      	MOVLB       1
0x1220	0x7B0D      	BTG         _ligar, BitPos(_ligar+0), 1
;TCC_5.c,589 :: 		if(!ligar) display2 = 0x01;                  //se ligar for 0, bit display2 = 1
0x1222	0xBB0D      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x1224	0xD001      	BRA         L_ler_bot93
0x1226	0x890A      	BSF         _display2, BitPos(_display2+0), 1
L_ler_bot93:
;TCC_5.c,591 :: 		}                                            //end if !toque && !toque2 && !toque3 && !toque4
L_ler_bot91:
;TCC_5.c,593 :: 		}                                             //end if prog==0
L_ler_bot88:
;TCC_5.c,595 :: 		}                                              //end if num!=0 || num2!=0 ||num3!=0 || num4!=0
L_ler_bot87:
;TCC_5.c,597 :: 		}                                               //end if BOTAO4 && b4_flag
L_ler_bot84:
0x1228	0x0101      	MOVLB       1
;TCC_5.c,599 :: 		if(!un)                                         //se un = 0
0x122A	0xB10D      	BTFSC       _un, BitPos(_un+0), 1
0x122C	0xD004      	BRA         L_ler_bot94
;TCC_5.c,601 :: 		mult = num * 1;                                //mult é num * 3600 (hora)
0x122E	0xF0D8C118  	MOVFF       _num, _mult
0x1232	0xF0D9C119  	MOVFF       _num+1, _mult+1
;TCC_5.c,602 :: 		}
L_ler_bot94:
;TCC_5.c,603 :: 		if(un)                                          //se un = 1
0x1236	0xA10D      	BTFSS       _un, BitPos(_un+0), 1
0x1238	0xD00E      	BRA         L_ler_bot95
;TCC_5.c,605 :: 		mult = num * 5;                                //mult é num * 86400 (dia)
0x123A	0xF000C118  	MOVFF       _num, R0
0x123E	0xF001C119  	MOVFF       _num+1, R1
0x1242	0x0E05      	MOVLW       5
0x1244	0x6E04      	MOVWF       R4 
0x1246	0x0E00      	MOVLW       0
0x1248	0x6E05      	MOVWF       R5 
0x124A	0xF004EC89  	CALL        _Mul_16X16_U, 0
0x124E	0xF0D8C000  	MOVFF       R0, _mult
0x1252	0xF0D9C001  	MOVFF       R1, _mult+1
;TCC_5.c,606 :: 		}
L_ler_bot95:
;TCC_5.c,608 :: 		if(!un2)                                        //se un2 = 0
0x1256	0xB30D      	BTFSC       _un2, BitPos(_un2+0), 1
0x1258	0xD004      	BRA         L_ler_bot96
;TCC_5.c,610 :: 		mult2 = num2 * 1;                              //mult2 é num2 * 3600 (hora)
0x125A	0xF0DAC11C  	MOVFF       _num2, _mult2
0x125E	0xF0DBC11D  	MOVFF       _num2+1, _mult2+1
;TCC_5.c,611 :: 		}
L_ler_bot96:
;TCC_5.c,612 :: 		if(un2)                                         //se un2 = 1
0x1262	0xA30D      	BTFSS       _un2, BitPos(_un2+0), 1
0x1264	0xD00E      	BRA         L_ler_bot97
;TCC_5.c,614 :: 		mult2 = num2 * 5;                              //mult2 é num2 * 86400 (dia)
0x1266	0xF000C11C  	MOVFF       _num2, R0
0x126A	0xF001C11D  	MOVFF       _num2+1, R1
0x126E	0x0E05      	MOVLW       5
0x1270	0x6E04      	MOVWF       R4 
0x1272	0x0E00      	MOVLW       0
0x1274	0x6E05      	MOVWF       R5 
0x1276	0xF004EC89  	CALL        _Mul_16X16_U, 0
0x127A	0xF0DAC000  	MOVFF       R0, _mult2
0x127E	0xF0DBC001  	MOVFF       R1, _mult2+1
;TCC_5.c,615 :: 		}
L_ler_bot97:
;TCC_5.c,617 :: 		if(!un3)                                        //se un3 = 0
0x1282	0xB70D      	BTFSC       _un3, BitPos(_un3+0), 1
0x1284	0xD004      	BRA         L_ler_bot98
;TCC_5.c,619 :: 		mult3 = num3 * 1;                              //mult3 é num3 * 3600 (hora)
0x1286	0xF0D4C11E  	MOVFF       _num3, _mult3
0x128A	0xF0D5C11F  	MOVFF       _num3+1, _mult3+1
;TCC_5.c,620 :: 		}
L_ler_bot98:
;TCC_5.c,621 :: 		if(un3)                                         //se un3 = 1
0x128E	0xA70D      	BTFSS       _un3, BitPos(_un3+0), 1
0x1290	0xD00E      	BRA         L_ler_bot99
;TCC_5.c,623 :: 		mult3 = num3 * 5;                              //mult3 é num3 * 86400 (dia)
0x1292	0xF000C11E  	MOVFF       _num3, R0
0x1296	0xF001C11F  	MOVFF       _num3+1, R1
0x129A	0x0E05      	MOVLW       5
0x129C	0x6E04      	MOVWF       R4 
0x129E	0x0E00      	MOVLW       0
0x12A0	0x6E05      	MOVWF       R5 
0x12A2	0xF004EC89  	CALL        _Mul_16X16_U, 0
0x12A6	0xF0D4C000  	MOVFF       R0, _mult3
0x12AA	0xF0D5C001  	MOVFF       R1, _mult3+1
;TCC_5.c,624 :: 		}
L_ler_bot99:
;TCC_5.c,626 :: 		if(!un4)                                        //se un4 = 0
0x12AE	0xB50D      	BTFSC       _un4, BitPos(_un4+0), 1
0x12B0	0xD004      	BRA         L_ler_bot100
;TCC_5.c,628 :: 		mult4 = num4 * 1;                              //mult4 é num4 * 3600 (hora)
0x12B2	0xF0D0C110  	MOVFF       _num4, _mult4
0x12B6	0xF0D1C111  	MOVFF       _num4+1, _mult4+1
;TCC_5.c,629 :: 		}
L_ler_bot100:
;TCC_5.c,630 :: 		if(un4)                                         //se un4 = 1
0x12BA	0xA50D      	BTFSS       _un4, BitPos(_un4+0), 1
0x12BC	0xD00E      	BRA         L_ler_bot101
;TCC_5.c,632 :: 		mult4 = num4 * 5;                              //mult4 é num4 * 86400 (dia)
0x12BE	0xF000C110  	MOVFF       _num4, R0
0x12C2	0xF001C111  	MOVFF       _num4+1, R1
0x12C6	0x0E05      	MOVLW       5
0x12C8	0x6E04      	MOVWF       R4 
0x12CA	0x0E00      	MOVLW       0
0x12CC	0x6E05      	MOVWF       R5 
0x12CE	0xF004EC89  	CALL        _Mul_16X16_U, 0
0x12D2	0xF0D0C000  	MOVFF       R0, _mult4
0x12D6	0xF0D1C001  	MOVFF       R1, _mult4+1
;TCC_5.c,633 :: 		}
L_ler_bot101:
;TCC_5.c,636 :: 		if(!BOTAO5)
0x12DA	0xBE82      	BTFSC       PORTC, 7 
0x12DC	0xD003      	BRA         L_ler_bot102
;TCC_5.c,638 :: 		b5_flag = 0x01;                                //se botão5 for pressionado, flag do botão5 = 1
0x12DE	0x8D0A      	BSF         _b5_flag, BitPos(_b5_flag+0), 1
;TCC_5.c,639 :: 		luz_lcd();                                     //executa a função de controle da luminosidade do display
0x12E0	0xF003EC28  	CALL        _luz_lcd, 0
;TCC_5.c,641 :: 		}                                               //end if !BOTAO5
L_ler_bot102:
;TCC_5.c,643 :: 		if(BOTAO5 && b5_flag)                           //se botão5 for solto e flag do botão5 for 1
0x12E4	0xAE82      	BTFSS       PORTC, 7 
0x12E6	0xD044      	BRA         L_ler_bot105
0x12E8	0x0101      	MOVLB       1
0x12EA	0xAD0A      	BTFSS       _b5_flag, BitPos(_b5_flag+0), 1
0x12EC	0xD041      	BRA         L_ler_bot105
L__ler_bot385:
;TCC_5.c,645 :: 		LCD_Cmd(_LCD_CLEAR);                           //limpa LCD
0x12EE	0x0E01      	MOVLW       1
0x12F0	0x6F2A      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x12F2	0xF000EC5F  	CALL        _Lcd_Cmd, 0
;TCC_5.c,646 :: 		b5_flag = 0x00;                                //limpa flag do botão5
0x12F6	0x9D0A      	BCF         _b5_flag, BitPos(_b5_flag+0), 1
;TCC_5.c,647 :: 		if(!block_cmd)                                 //se bloqueio desativado
0x12F8	0xB90D      	BTFSC       _block_cmd, BitPos(_block_cmd+0), 1
0x12FA	0xD010      	BRA         L_ler_bot106
;TCC_5.c,649 :: 		if(prog != 0)                                 //se prog for diferente de 0
0x12FC	0x0E00      	MOVLW       0
0x12FE	0x1903      	XORWF       _prog+1, 0, 1
0x1300	0xE102      	BNZ         L__ler_bot499
0x1302	0x0E00      	MOVLW       0
0x1304	0x1902      	XORWF       _prog, 0, 1
L__ler_bot499:
0x1306	0xE00A      	BZ          L_ler_bot107
;TCC_5.c,651 :: 		option++;                                    //incrementa option
0x1308	0x4B06      	INFSNZ      _option, 1, 1
0x130A	0x2B07      	INCF        _option+1, 1, 1
;TCC_5.c,652 :: 		if(option == 4) option=0x00;                 //se option for 4, option = 0
0x130C	0x0E00      	MOVLW       0
0x130E	0x1907      	XORWF       _option+1, 0, 1
0x1310	0xE102      	BNZ         L__ler_bot500
0x1312	0x0E04      	MOVLW       4
0x1314	0x1906      	XORWF       _option, 0, 1
L__ler_bot500:
0x1316	0xE102      	BNZ         L_ler_bot108
0x1318	0x6B06      	CLRF        _option, 1
0x131A	0x6B07      	CLRF        _option+1, 1
L_ler_bot108:
;TCC_5.c,653 :: 		}
L_ler_bot107:
;TCC_5.c,654 :: 		}                                              //end if !block_cmd
L_ler_bot106:
;TCC_5.c,656 :: 		if(toque || toque2 || toque3 || toque4)      //se algum comando do SOM estiver ativado...
0x131C	0xB90B      	BTFSC       _toque, BitPos(_toque+0), 1
0x131E	0xD007      	BRA         L__ler_bot384
0x1320	0xBB0B      	BTFSC       _toque2, BitPos(_toque2+0), 1
0x1322	0xD005      	BRA         L__ler_bot384
0x1324	0xBD0B      	BTFSC       _toque3, BitPos(_toque3+0), 1
0x1326	0xD003      	BRA         L__ler_bot384
0x1328	0xB30C      	BTFSC       _toque4, BitPos(_toque4+0), 1
0x132A	0xD001      	BRA         L__ler_bot384
0x132C	0xD01D      	BRA         L_ler_bot111
L__ler_bot384:
;TCC_5.c,658 :: 		if(toque)temp_ligado=0x00;                   //se for o toque 1, zera o contador 1
0x132E	0xA90B      	BTFSS       _toque, BitPos(_toque+0), 1
0x1330	0xD003      	BRA         L_ler_bot112
0x1332	0x0100      	MOVLB       0
0x1334	0x6BCA      	CLRF        _temp_ligado, 1
0x1336	0x6BCB      	CLRF        _temp_ligado+1, 1
L_ler_bot112:
;TCC_5.c,659 :: 		if(toque2)temp_ligado2=0x00;                 //se for o toque 2, zera o contador 2
0x1338	0x0101      	MOVLB       1
0x133A	0xAB0B      	BTFSS       _toque2, BitPos(_toque2+0), 1
0x133C	0xD003      	BRA         L_ler_bot113
0x133E	0x0100      	MOVLB       0
0x1340	0x6BCC      	CLRF        _temp_ligado2, 1
0x1342	0x6BCD      	CLRF        _temp_ligado2+1, 1
L_ler_bot113:
;TCC_5.c,660 :: 		if(toque3)temp_ligado3=0x00;                 //se for o toque 3, zera o contador 3
0x1344	0x0101      	MOVLB       1
0x1346	0xAD0B      	BTFSS       _toque3, BitPos(_toque3+0), 1
0x1348	0xD003      	BRA         L_ler_bot114
0x134A	0x0100      	MOVLB       0
0x134C	0x6BCE      	CLRF        _temp_ligado3, 1
0x134E	0x6BCF      	CLRF        _temp_ligado3+1, 1
L_ler_bot114:
;TCC_5.c,661 :: 		if(toque4)temp_ligado4=0x00;                 //se for o toque 4, zera o contador 4
0x1350	0x0101      	MOVLB       1
0x1352	0xA30C      	BTFSS       _toque4, BitPos(_toque4+0), 1
0x1354	0xD003      	BRA         L_ler_bot115
0x1356	0x0100      	MOVLB       0
0x1358	0x6BD2      	CLRF        _temp_ligado4, 1
0x135A	0x6BD3      	CLRF        _temp_ligado4+1, 1
L_ler_bot115:
;TCC_5.c,662 :: 		toque =0x00;
0x135C	0x0101      	MOVLB       1
0x135E	0x990B      	BCF         _toque, BitPos(_toque+0), 1
;TCC_5.c,663 :: 		toque2=0x00;
0x1360	0x9B0B      	BCF         _toque2, BitPos(_toque2+0), 1
;TCC_5.c,664 :: 		toque3=0x00;
0x1362	0x9D0B      	BCF         _toque3, BitPos(_toque3+0), 1
;TCC_5.c,665 :: 		toque4=0x00;                                //zera todos os bits de SOM
0x1364	0x930C      	BCF         _toque4, BitPos(_toque4+0), 1
;TCC_5.c,666 :: 		SOM=0x00;
0x1366	0x9881      	BCF         PORTB, 4 
;TCC_5.c,668 :: 		}                                            //end if toque || toque2 || toque3 || toque4
L_ler_bot111:
;TCC_5.c,671 :: 		block_cmd = 0x00;                              //desativa o bloqueio
0x1368	0x990D      	BCF         _block_cmd, BitPos(_block_cmd+0), 1
;TCC_5.c,672 :: 		temp_lcd = 0x00;                               //zera o temp_lcd
0x136A	0x0100      	MOVLB       0
0x136C	0x6BE8      	CLRF        _temp_lcd, 1
0x136E	0x6BE9      	CLRF        _temp_lcd+1, 1
;TCC_5.c,673 :: 		}                                               //end if BOTAO5 && b5_flag
L_ler_bot105:
;TCC_5.c,675 :: 		}                                                 //end ler_bot()
L_end_ler_bot:
0x1370	0x0012      	RETURN      0
; end of _ler_bot
_disp:
;TCC_5.c,773 :: 		void disp()
;TCC_5.c,775 :: 		if(!ligar && prog==0)                           //se ligar for 0 e prog for 0
0x1372	0x0101      	MOVLB       1
0x1374	0xBB0D      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x1376	0xD075      	BRA         L_disp147
0x1378	0x0E00      	MOVLW       0
0x137A	0x1903      	XORWF       _prog+1, 0, 1
0x137C	0xE102      	BNZ         L__disp528
0x137E	0x0E00      	MOVLW       0
0x1380	0x1902      	XORWF       _prog, 0, 1
L__disp528:
0x1382	0xE16F      	BNZ         L_disp147
L__disp399:
;TCC_5.c,777 :: 		if(SM) SM   = 0x00;
0x1384	0xB081      	BTFSC       PORTB, 0 
0x1386	0x9081      	BCF         PORTB, 0 
L_disp148:
;TCC_5.c,778 :: 		if(SM2)SM2  = 0x00;
0x1388	0xB281      	BTFSC       PORTB, 1 
0x138A	0x9281      	BCF         PORTB, 1 
L_disp149:
;TCC_5.c,779 :: 		if(SM3)SM3  = 0x00;
0x138C	0xB681      	BTFSC       PORTB, 3 
0x138E	0x9681      	BCF         PORTB, 3 
L_disp150:
;TCC_5.c,780 :: 		if(SM4)SM4  = 0x00;
0x1390	0xB481      	BTFSC       PORTB, 2 
0x1392	0x9481      	BCF         PORTB, 2 
L_disp151:
;TCC_5.c,781 :: 		if(!display && !display2)                      //se os bits diplay e display2 forem 0
0x1394	0xB70A      	BTFSC       _display, BitPos(_display+0), 1
0x1396	0xD017      	BRA         L_disp154
0x1398	0xB90A      	BTFSC       _display2, BitPos(_display2+0), 1
0x139A	0xD015      	BRA         L_disp154
L__disp398:
;TCC_5.c,783 :: 		LCD_Out(1,1,"  DISPENSER DE  ");             //exibe "DISPENSER DE"
0x139C	0x0E01      	MOVLW       1
0x139E	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x13A0	0x0E01      	MOVLW       1
0x13A2	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x13A4	0x0E53      	MOVLW       ?lstr1_TCC_5
0x13A6	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x13A8	0x0E00      	MOVLW       hi_addr(?lstr1_TCC_5)
0x13AA	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x13AC	0xF002EC9F  	CALL        _Lcd_Out, 0
;TCC_5.c,784 :: 		LCD_Out(2,1,"    REMEDIOS    ");             //      "  REMEDIOS  "
0x13B0	0x0E02      	MOVLW       2
0x13B2	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x13B4	0x0E01      	MOVLW       1
0x13B6	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x13B8	0x0E97      	MOVLW       ?lstr2_TCC_5
0x13BA	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x13BC	0x0E00      	MOVLW       hi_addr(?lstr2_TCC_5)
0x13BE	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x13C0	0xF002EC9F  	CALL        _Lcd_Out, 0
;TCC_5.c,786 :: 		}
0x13C4	0xD04E      	BRA         L_disp155
L_disp154:
;TCC_5.c,789 :: 		if(display && !display2)                      //se bits display for 1 e display2 for 0
0x13C6	0xA70A      	BTFSS       _display, BitPos(_display+0), 1
0x13C8	0xD025      	BRA         L_disp158
0x13CA	0xB90A      	BTFSC       _display2, BitPos(_display2+0), 1
0x13CC	0xD023      	BRA         L_disp158
L__disp397:
;TCC_5.c,791 :: 		display=0x00;                                //limpa bit display
0x13CE	0x970A      	BCF         _display, BitPos(_display+0), 1
;TCC_5.c,792 :: 		LCD_Out(1,1,"ETEC LAURO GOMES");             //exibe "ETEC LAURO GOMES"
0x13D0	0x0E01      	MOVLW       1
0x13D2	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x13D4	0x0E01      	MOVLW       1
0x13D6	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x13D8	0x0EA8      	MOVLW       ?lstr3_TCC_5
0x13DA	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x13DC	0x0E00      	MOVLW       hi_addr(?lstr3_TCC_5)
0x13DE	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x13E0	0xF002EC9F  	CALL        _Lcd_Out, 0
;TCC_5.c,793 :: 		LCD_Out(2,1,"  3A MECA 2021  ");             //      "  3A MECA 2021  "
0x13E4	0x0E02      	MOVLW       2
0x13E6	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x13E8	0x0E01      	MOVLW       1
0x13EA	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x13EC	0x0EB9      	MOVLW       ?lstr4_TCC_5
0x13EE	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x13F0	0x0E00      	MOVLW       hi_addr(?lstr4_TCC_5)
0x13F2	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x13F4	0xF002EC9F  	CALL        _Lcd_Out, 0
;TCC_5.c,794 :: 		delay_ms(1000);                              //espera 1 segundo
0x13F8	0x0E3D      	MOVLW       61
0x13FA	0x6E0B      	MOVWF       R11, 0
0x13FC	0x0EE1      	MOVLW       225
0x13FE	0x6E0C      	MOVWF       R12, 0
0x1400	0x0E3F      	MOVLW       63
0x1402	0x6E0D      	MOVWF       R13, 0
L_disp159:
0x1404	0x2E0D      	DECFSZ      R13, 1, 0
0x1406	0xD7FE      	BRA         L_disp159
0x1408	0x2E0C      	DECFSZ      R12, 1, 0
0x140A	0xD7FC      	BRA         L_disp159
0x140C	0x2E0B      	DECFSZ      R11, 1, 0
0x140E	0xD7FA      	BRA         L_disp159
0x1410	0x0000      	NOP
0x1412	0x0000      	NOP
;TCC_5.c,795 :: 		}
L_disp158:
;TCC_5.c,796 :: 		if(!display && display2)                      //se os bits display for 0 e display2 for 1
0x1414	0xB70A      	BTFSC       _display, BitPos(_display+0), 1
0x1416	0xD025      	BRA         L_disp162
0x1418	0xA90A      	BTFSS       _display2, BitPos(_display2+0), 1
0x141A	0xD023      	BRA         L_disp162
L__disp396:
;TCC_5.c,798 :: 		display2=0x00;                               //limpa bit display2
0x141C	0x990A      	BCF         _display2, BitPos(_display2+0), 1
;TCC_5.c,799 :: 		LCD_Out(1,1,"     PARANDO    ");             //exibe "     PARANDO    "
0x141E	0x0E01      	MOVLW       1
0x1420	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x1422	0x0E01      	MOVLW       1
0x1424	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x1426	0x0E64      	MOVLW       ?lstr5_TCC_5
0x1428	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x142A	0x0E00      	MOVLW       hi_addr(?lstr5_TCC_5)
0x142C	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x142E	0xF002EC9F  	CALL        _Lcd_Out, 0
;TCC_5.c,800 :: 		LCD_Out(2,1,"     CONTAGEM   ");             //      "     CONTAGEM   "
0x1432	0x0E02      	MOVLW       2
0x1434	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x1436	0x0E01      	MOVLW       1
0x1438	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x143A	0x0E75      	MOVLW       ?lstr6_TCC_5
0x143C	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x143E	0x0E00      	MOVLW       hi_addr(?lstr6_TCC_5)
0x1440	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x1442	0xF002EC9F  	CALL        _Lcd_Out, 0
;TCC_5.c,801 :: 		delay_ms(1000);                              //espera 1 segundo
0x1446	0x0E3D      	MOVLW       61
0x1448	0x6E0B      	MOVWF       R11, 0
0x144A	0x0EE1      	MOVLW       225
0x144C	0x6E0C      	MOVWF       R12, 0
0x144E	0x0E3F      	MOVLW       63
0x1450	0x6E0D      	MOVWF       R13, 0
L_disp163:
0x1452	0x2E0D      	DECFSZ      R13, 1, 0
0x1454	0xD7FE      	BRA         L_disp163
0x1456	0x2E0C      	DECFSZ      R12, 1, 0
0x1458	0xD7FC      	BRA         L_disp163
0x145A	0x2E0B      	DECFSZ      R11, 1, 0
0x145C	0xD7FA      	BRA         L_disp163
0x145E	0x0000      	NOP
0x1460	0x0000      	NOP
;TCC_5.c,802 :: 		}
L_disp162:
;TCC_5.c,803 :: 		}                                              //end else
L_disp155:
;TCC_5.c,804 :: 		}                                               //end if !ligar && prog==0
L_disp147:
;TCC_5.c,806 :: 		if(prog==1)                                     //programação de numeros
0x1462	0x0E00      	MOVLW       0
0x1464	0x1903      	XORWF       _prog+1, 0, 1
0x1466	0xE102      	BNZ         L__disp529
0x1468	0x0E01      	MOVLW       1
0x146A	0x1902      	XORWF       _prog, 0, 1
L__disp529:
0x146C	0xE144      	BNZ         L_disp164
;TCC_5.c,808 :: 		LCD_Out(1,1,"PROGRAME NUMERO:");               //exibe "PROGRAME NUMERO:
0x146E	0x0E01      	MOVLW       1
0x1470	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x1472	0x0E01      	MOVLW       1
0x1474	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x1476	0x0E86      	MOVLW       ?lstr7_TCC_5
0x1478	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x147A	0x0E00      	MOVLW       hi_addr(?lstr7_TCC_5)
0x147C	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x147E	0xF002EC9F  	CALL        _Lcd_Out, 0
;TCC_5.c,809 :: 		num_un();                                      //executa num_un
0x1482	0xF003EC3F  	CALL        _num_un, 0
;TCC_5.c,810 :: 		if(option==0) LCD_Chr(2,1,'1');               //se option for 0, exibe "1"
0x1486	0x0E00      	MOVLW       0
0x1488	0x1907      	XORWF       _option+1, 0, 1
0x148A	0xE102      	BNZ         L__disp530
0x148C	0x0E00      	MOVLW       0
0x148E	0x1906      	XORWF       _option, 0, 1
L__disp530:
0x1490	0xE108      	BNZ         L_disp165
0x1492	0x0E02      	MOVLW       2
0x1494	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x1496	0x0E01      	MOVLW       1
0x1498	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x149A	0x0E31      	MOVLW       49
0x149C	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x149E	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp165:
;TCC_5.c,811 :: 		if(option==1) LCD_Chr(2,1,'2');               //se option for 1, exibe "2"
0x14A2	0x0E00      	MOVLW       0
0x14A4	0x1907      	XORWF       _option+1, 0, 1
0x14A6	0xE102      	BNZ         L__disp531
0x14A8	0x0E01      	MOVLW       1
0x14AA	0x1906      	XORWF       _option, 0, 1
L__disp531:
0x14AC	0xE108      	BNZ         L_disp166
0x14AE	0x0E02      	MOVLW       2
0x14B0	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x14B2	0x0E01      	MOVLW       1
0x14B4	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x14B6	0x0E32      	MOVLW       50
0x14B8	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x14BA	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp166:
;TCC_5.c,812 :: 		if(option==2) LCD_Chr(2,1,'3');               //se option for 2, exibe "3"
0x14BE	0x0E00      	MOVLW       0
0x14C0	0x1907      	XORWF       _option+1, 0, 1
0x14C2	0xE102      	BNZ         L__disp532
0x14C4	0x0E02      	MOVLW       2
0x14C6	0x1906      	XORWF       _option, 0, 1
L__disp532:
0x14C8	0xE108      	BNZ         L_disp167
0x14CA	0x0E02      	MOVLW       2
0x14CC	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x14CE	0x0E01      	MOVLW       1
0x14D0	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x14D2	0x0E33      	MOVLW       51
0x14D4	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x14D6	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp167:
;TCC_5.c,813 :: 		if(option==3) LCD_Chr(2,1,'4');               //se option for 2, exibe "4"
0x14DA	0x0E00      	MOVLW       0
0x14DC	0x1907      	XORWF       _option+1, 0, 1
0x14DE	0xE102      	BNZ         L__disp533
0x14E0	0x0E03      	MOVLW       3
0x14E2	0x1906      	XORWF       _option, 0, 1
L__disp533:
0x14E4	0xE108      	BNZ         L_disp168
0x14E6	0x0E02      	MOVLW       2
0x14E8	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x14EA	0x0E01      	MOVLW       1
0x14EC	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x14EE	0x0E34      	MOVLW       52
0x14F0	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x14F2	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp168:
;TCC_5.c,814 :: 		}
L_disp164:
;TCC_5.c,816 :: 		if(prog==2)                                     //se prog for 2
0x14F6	0x0E00      	MOVLW       0
0x14F8	0x1903      	XORWF       _prog+1, 0, 1
0x14FA	0xE102      	BNZ         L__disp534
0x14FC	0x0E02      	MOVLW       2
0x14FE	0x1902      	XORWF       _prog, 0, 1
L__disp534:
0x1500	0xE144      	BNZ         L_disp169
;TCC_5.c,818 :: 		LCD_Out(1,1,"PROGRAME Un.:");                  //exibe "PROGRAME Un.:"
0x1502	0x0E01      	MOVLW       1
0x1504	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x1506	0x0E01      	MOVLW       1
0x1508	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x150A	0x0E45      	MOVLW       ?lstr8_TCC_5
0x150C	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x150E	0x0E00      	MOVLW       hi_addr(?lstr8_TCC_5)
0x1510	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x1512	0xF002EC9F  	CALL        _Lcd_Out, 0
;TCC_5.c,819 :: 		num_un();                                      //executa num_un
0x1516	0xF003EC3F  	CALL        _num_un, 0
;TCC_5.c,820 :: 		if(option==0) LCD_Chr(2,1,'1');               //se option for 0, exibe "1"
0x151A	0x0E00      	MOVLW       0
0x151C	0x1907      	XORWF       _option+1, 0, 1
0x151E	0xE102      	BNZ         L__disp535
0x1520	0x0E00      	MOVLW       0
0x1522	0x1906      	XORWF       _option, 0, 1
L__disp535:
0x1524	0xE108      	BNZ         L_disp170
0x1526	0x0E02      	MOVLW       2
0x1528	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x152A	0x0E01      	MOVLW       1
0x152C	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x152E	0x0E31      	MOVLW       49
0x1530	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1532	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp170:
;TCC_5.c,821 :: 		if(option==1) LCD_Chr(2,1,'2');               //se option for 1, exibe "2"
0x1536	0x0E00      	MOVLW       0
0x1538	0x1907      	XORWF       _option+1, 0, 1
0x153A	0xE102      	BNZ         L__disp536
0x153C	0x0E01      	MOVLW       1
0x153E	0x1906      	XORWF       _option, 0, 1
L__disp536:
0x1540	0xE108      	BNZ         L_disp171
0x1542	0x0E02      	MOVLW       2
0x1544	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x1546	0x0E01      	MOVLW       1
0x1548	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x154A	0x0E32      	MOVLW       50
0x154C	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x154E	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp171:
;TCC_5.c,822 :: 		if(option==2) LCD_Chr(2,1,'3');               //se option for 2, exibe "3"
0x1552	0x0E00      	MOVLW       0
0x1554	0x1907      	XORWF       _option+1, 0, 1
0x1556	0xE102      	BNZ         L__disp537
0x1558	0x0E02      	MOVLW       2
0x155A	0x1906      	XORWF       _option, 0, 1
L__disp537:
0x155C	0xE108      	BNZ         L_disp172
0x155E	0x0E02      	MOVLW       2
0x1560	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x1562	0x0E01      	MOVLW       1
0x1564	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x1566	0x0E33      	MOVLW       51
0x1568	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x156A	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp172:
;TCC_5.c,823 :: 		if(option==3) LCD_Chr(2,1,'4');               //se option for 2, exibe "4"
0x156E	0x0E00      	MOVLW       0
0x1570	0x1907      	XORWF       _option+1, 0, 1
0x1572	0xE102      	BNZ         L__disp538
0x1574	0x0E03      	MOVLW       3
0x1576	0x1906      	XORWF       _option, 0, 1
L__disp538:
0x1578	0xE108      	BNZ         L_disp173
0x157A	0x0E02      	MOVLW       2
0x157C	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x157E	0x0E01      	MOVLW       1
0x1580	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x1582	0x0E34      	MOVLW       52
0x1584	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1586	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp173:
;TCC_5.c,824 :: 		}
L_disp169:
;TCC_5.c,826 :: 		if(prog==3)                                     //programação de quantidade de comprimidos
0x158A	0x0E00      	MOVLW       0
0x158C	0x1903      	XORWF       _prog+1, 0, 1
0x158E	0xE102      	BNZ         L__disp539
0x1590	0x0E03      	MOVLW       3
0x1592	0x1902      	XORWF       _prog, 0, 1
L__disp539:
0x1594	0xE144      	BNZ         L_disp174
;TCC_5.c,828 :: 		LCD_Out(1,1,"Qtd. COMPRIMIDOS");               //exibe "Qtd. COMPRIMIDOS"
0x1596	0x0E01      	MOVLW       1
0x1598	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x159A	0x0E01      	MOVLW       1
0x159C	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x159E	0x0E19      	MOVLW       ?lstr9_TCC_5
0x15A0	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x15A2	0x0E00      	MOVLW       hi_addr(?lstr9_TCC_5)
0x15A4	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x15A6	0xF002EC9F  	CALL        _Lcd_Out, 0
;TCC_5.c,829 :: 		num_un();                                      //executa num_un
0x15AA	0xF003EC3F  	CALL        _num_un, 0
;TCC_5.c,830 :: 		if(option==0) LCD_Chr(2,1,'1');               //se option for 0, exibe "1"
0x15AE	0x0E00      	MOVLW       0
0x15B0	0x1907      	XORWF       _option+1, 0, 1
0x15B2	0xE102      	BNZ         L__disp540
0x15B4	0x0E00      	MOVLW       0
0x15B6	0x1906      	XORWF       _option, 0, 1
L__disp540:
0x15B8	0xE108      	BNZ         L_disp175
0x15BA	0x0E02      	MOVLW       2
0x15BC	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x15BE	0x0E01      	MOVLW       1
0x15C0	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x15C2	0x0E31      	MOVLW       49
0x15C4	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x15C6	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp175:
;TCC_5.c,831 :: 		if(option==1) LCD_Chr(2,1,'2');               //se option for 1, exibe "2"
0x15CA	0x0E00      	MOVLW       0
0x15CC	0x1907      	XORWF       _option+1, 0, 1
0x15CE	0xE102      	BNZ         L__disp541
0x15D0	0x0E01      	MOVLW       1
0x15D2	0x1906      	XORWF       _option, 0, 1
L__disp541:
0x15D4	0xE108      	BNZ         L_disp176
0x15D6	0x0E02      	MOVLW       2
0x15D8	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x15DA	0x0E01      	MOVLW       1
0x15DC	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x15DE	0x0E32      	MOVLW       50
0x15E0	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x15E2	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp176:
;TCC_5.c,832 :: 		if(option==2) LCD_Chr(2,1,'3');               //se option for 2, exibe "3"
0x15E6	0x0E00      	MOVLW       0
0x15E8	0x1907      	XORWF       _option+1, 0, 1
0x15EA	0xE102      	BNZ         L__disp542
0x15EC	0x0E02      	MOVLW       2
0x15EE	0x1906      	XORWF       _option, 0, 1
L__disp542:
0x15F0	0xE108      	BNZ         L_disp177
0x15F2	0x0E02      	MOVLW       2
0x15F4	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x15F6	0x0E01      	MOVLW       1
0x15F8	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x15FA	0x0E33      	MOVLW       51
0x15FC	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x15FE	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp177:
;TCC_5.c,833 :: 		if(option==3) LCD_Chr(2,1,'4');               //se option for 2, exibe "4"
0x1602	0x0E00      	MOVLW       0
0x1604	0x1907      	XORWF       _option+1, 0, 1
0x1606	0xE102      	BNZ         L__disp543
0x1608	0x0E03      	MOVLW       3
0x160A	0x1906      	XORWF       _option, 0, 1
L__disp543:
0x160C	0xE108      	BNZ         L_disp178
0x160E	0x0E02      	MOVLW       2
0x1610	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x1612	0x0E01      	MOVLW       1
0x1614	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x1616	0x0E34      	MOVLW       52
0x1618	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x161A	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp178:
;TCC_5.c,834 :: 		}
L_disp174:
;TCC_5.c,836 :: 		if(ligar)                                       //se ligar for 1 (ligado)
0x161E	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1620	0xD060      	BRA         L_disp179
;TCC_5.c,838 :: 		LCD_Out(1,1,"DISP  TEMPO  Qtd");               //exibe "CONTANDO:   DISP";
0x1622	0x0E01      	MOVLW       1
0x1624	0x6F24      	MOVWF       FARG_Lcd_Out_row, 1
0x1626	0x0E01      	MOVLW       1
0x1628	0x6F25      	MOVWF       FARG_Lcd_Out_column, 1
0x162A	0x0E2A      	MOVLW       ?lstr10_TCC_5
0x162C	0x6F26      	MOVWF       FARG_Lcd_Out_text, 1
0x162E	0x0E00      	MOVLW       hi_addr(?lstr10_TCC_5)
0x1630	0x6F27      	MOVWF       FARG_Lcd_Out_text+1, 1
0x1632	0xF002EC9F  	CALL        _Lcd_Out, 0
;TCC_5.c,839 :: 		if(temp_disp>20) temp_disp=0x00;               //se temp_disp for maior que 20, zera temp_disp
0x1636	0x0E00      	MOVLW       0
0x1638	0x6E00      	MOVWF       R0 
0x163A	0x503C      	MOVF        _temp_disp+1, 0 
0x163C	0x5C00      	SUBWF       R0, 0 
0x163E	0xE102      	BNZ         L__disp544
0x1640	0x503B      	MOVF        _temp_disp, 0 
0x1642	0x0814      	SUBLW       20
L__disp544:
0x1644	0xE202      	BC          L_disp180
0x1646	0x6A3B      	CLRF        _temp_disp 
0x1648	0x6A3C      	CLRF        _temp_disp+1 
L_disp180:
;TCC_5.c,840 :: 		if(temp_disp == 20)                            //se temp_disp for 20 (2 segundos)
0x164A	0x0E00      	MOVLW       0
0x164C	0x183C      	XORWF       _temp_disp+1, 0 
0x164E	0xE102      	BNZ         L__disp545
0x1650	0x0E14      	MOVLW       20
0x1652	0x183B      	XORWF       _temp_disp, 0 
L__disp545:
0x1654	0xE144      	BNZ         L_disp181
;TCC_5.c,842 :: 		temp_disp=0x00;                               //zera temp_disp
0x1656	0x6A3B      	CLRF        _temp_disp 
0x1658	0x6A3C      	CLRF        _temp_disp+1 
;TCC_5.c,843 :: 		option++;                                     //incrementa option
0x165A	0x4B06      	INFSNZ      _option, 1, 1
0x165C	0x2B07      	INCF        _option+1, 1, 1
;TCC_5.c,844 :: 		if(option == 4) option=0x00;                  //se option for 3, option = 0
0x165E	0x0E00      	MOVLW       0
0x1660	0x1907      	XORWF       _option+1, 0, 1
0x1662	0xE102      	BNZ         L__disp546
0x1664	0x0E04      	MOVLW       4
0x1666	0x1906      	XORWF       _option, 0, 1
L__disp546:
0x1668	0xE102      	BNZ         L_disp182
0x166A	0x6B06      	CLRF        _option, 1
0x166C	0x6B07      	CLRF        _option+1, 1
L_disp182:
;TCC_5.c,845 :: 		if(option==0) LCD_Chr(2,1,'1');              //se option for 0, exibe "1"
0x166E	0x0E00      	MOVLW       0
0x1670	0x1907      	XORWF       _option+1, 0, 1
0x1672	0xE102      	BNZ         L__disp547
0x1674	0x0E00      	MOVLW       0
0x1676	0x1906      	XORWF       _option, 0, 1
L__disp547:
0x1678	0xE108      	BNZ         L_disp183
0x167A	0x0E02      	MOVLW       2
0x167C	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x167E	0x0E01      	MOVLW       1
0x1680	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x1682	0x0E31      	MOVLW       49
0x1684	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1686	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp183:
;TCC_5.c,846 :: 		if(option==1) LCD_Chr(2,1,'2');              //se option for 1, exibe "2"
0x168A	0x0E00      	MOVLW       0
0x168C	0x1907      	XORWF       _option+1, 0, 1
0x168E	0xE102      	BNZ         L__disp548
0x1690	0x0E01      	MOVLW       1
0x1692	0x1906      	XORWF       _option, 0, 1
L__disp548:
0x1694	0xE108      	BNZ         L_disp184
0x1696	0x0E02      	MOVLW       2
0x1698	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x169A	0x0E01      	MOVLW       1
0x169C	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x169E	0x0E32      	MOVLW       50
0x16A0	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x16A2	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp184:
;TCC_5.c,847 :: 		if(option==2) LCD_Chr(2,1,'3');              //se option for 2, exibe "3"
0x16A6	0x0E00      	MOVLW       0
0x16A8	0x1907      	XORWF       _option+1, 0, 1
0x16AA	0xE102      	BNZ         L__disp549
0x16AC	0x0E02      	MOVLW       2
0x16AE	0x1906      	XORWF       _option, 0, 1
L__disp549:
0x16B0	0xE108      	BNZ         L_disp185
0x16B2	0x0E02      	MOVLW       2
0x16B4	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x16B6	0x0E01      	MOVLW       1
0x16B8	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x16BA	0x0E33      	MOVLW       51
0x16BC	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x16BE	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp185:
;TCC_5.c,848 :: 		if(option==3) LCD_Chr(2,1,'4');              //se option for 2, exibe "4"
0x16C2	0x0E00      	MOVLW       0
0x16C4	0x1907      	XORWF       _option+1, 0, 1
0x16C6	0xE102      	BNZ         L__disp550
0x16C8	0x0E03      	MOVLW       3
0x16CA	0x1906      	XORWF       _option, 0, 1
L__disp550:
0x16CC	0xE108      	BNZ         L_disp186
0x16CE	0x0E02      	MOVLW       2
0x16D0	0x6F24      	MOVWF       FARG_Lcd_Chr_row, 1
0x16D2	0x0E01      	MOVLW       1
0x16D4	0x6F25      	MOVWF       FARG_Lcd_Chr_column, 1
0x16D6	0x0E34      	MOVLW       52
0x16D8	0x6F26      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x16DA	0xF002ECDE  	CALL        _Lcd_Chr, 0
L_disp186:
;TCC_5.c,849 :: 		}
L_disp181:
;TCC_5.c,850 :: 		num_un();                                      //executa num_un
0x16DE	0xF003EC3F  	CALL        _num_un, 0
;TCC_5.c,851 :: 		}
L_disp179:
;TCC_5.c,853 :: 		}                                                 //end disp()
L_end_disp:
0x16E2	0x0012      	RETURN      0
; end of _disp
_Lcd_Init:
;__Lib_Lcd.c,84 :: 		
;__Lib_Lcd.c,86 :: 		
0x16E4	0x9695      	BCF         LCD_EN_Direction, BitPos(LCD_EN_Direction+0) 
;__Lib_Lcd.c,87 :: 		
0x16E6	0x9495      	BCF         LCD_RS_Direction, BitPos(LCD_RS_Direction+0) 
;__Lib_Lcd.c,88 :: 		
0x16E8	0x9895      	BCF         LCD_D4_Direction, BitPos(LCD_D4_Direction+0) 
;__Lib_Lcd.c,89 :: 		
0x16EA	0x9A95      	BCF         LCD_D5_Direction, BitPos(LCD_D5_Direction+0) 
;__Lib_Lcd.c,90 :: 		
0x16EC	0x9C95      	BCF         LCD_D6_Direction, BitPos(LCD_D6_Direction+0) 
;__Lib_Lcd.c,91 :: 		
0x16EE	0x9E95      	BCF         LCD_D7_Direction, BitPos(LCD_D7_Direction+0) 
;__Lib_Lcd.c,93 :: 		
0x16F0	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,94 :: 		
0x16F2	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
;__Lib_Lcd.c,95 :: 		
0x16F4	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,96 :: 		
0x16F6	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,97 :: 		
0x16F8	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,98 :: 		
0x16FA	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,100 :: 		
0x16FC	0xF000EC4D  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,101 :: 		
0x1700	0xF000EC4D  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,102 :: 		
0x1704	0xF000EC4D  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,105 :: 		
0x1708	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,106 :: 		
0x170A	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,107 :: 		
0x170C	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,108 :: 		
0x170E	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,109 :: 		
0x1712	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,110 :: 		
0x1714	0xF000EC4D  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,112 :: 		
0x1718	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,113 :: 		
0x171A	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,114 :: 		
0x171E	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,115 :: 		
0x1720	0xF000EC4D  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,117 :: 		
0x1724	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,118 :: 		
0x1726	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,119 :: 		
0x172A	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,120 :: 		
0x172C	0xF000EC4D  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,123 :: 		
0x1730	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,124 :: 		
0x1732	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,125 :: 		
0x1734	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,126 :: 		
0x1738	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,127 :: 		
0x173A	0xF000EC4D  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,130 :: 		
0x173E	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,131 :: 		
0x1740	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,132 :: 		
0x1744	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,134 :: 		
0x1746	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,135 :: 		
0x1748	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,136 :: 		
0x174A	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,137 :: 		
0x174C	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,138 :: 		
0x1750	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,139 :: 		
0x1752	0xF000EC4D  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,142 :: 		
0x1756	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,143 :: 		
0x1758	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,144 :: 		
0x175A	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,145 :: 		
0x175C	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,146 :: 		
0x1760	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,148 :: 		
0x1762	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,149 :: 		
0x1764	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,150 :: 		
0x1766	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,151 :: 		
0x176A	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,152 :: 		
0x176C	0xF000EC4D  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,155 :: 		
0x1770	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,156 :: 		
0x1772	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,157 :: 		
0x1776	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,159 :: 		
0x1778	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,160 :: 		
0x177A	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,161 :: 		
0x177C	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,162 :: 		
0x1780	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,163 :: 		
0x1782	0xF000EC4D  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,166 :: 		
0x1786	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,167 :: 		
0x1788	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,168 :: 		
0x178A	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,169 :: 		
0x178E	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,171 :: 		
0x1790	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,172 :: 		
0x1792	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,173 :: 		
0x1794	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,174 :: 		
0x1796	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,175 :: 		
0x1798	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,176 :: 		
0x179A	0xF000EC46  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,177 :: 		
0x179E	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,179 :: 		
0x17A0	0xF000EC4D  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,181 :: 		
0x17A4	0x0101      	MOVLB       1
0x17A6	0x850C      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,182 :: 		
L_end_Lcd_Init:
0x17A8	0x0012      	RETURN      0
; end of _Lcd_Init
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x17AA	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x17AC	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x17B0	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x17B2	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x17B4	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x17B6	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x17B8	0x0012      	RETURN      0
; end of ___CC2DW
_EEPROM_Read:
;__Lib_EEPROM_256.c,7 :: 		
;__Lib_EEPROM_256.c,9 :: 		
0x17BA	0x9CA6      	BCF         EECON1, 6 
;__Lib_EEPROM_256.c,10 :: 		
0x17BC	0xFFA9C120  	MOVFF       FARG_EEPROM_Read_address, EEADR
;__Lib_EEPROM_256.c,11 :: 		
0x17C0	0x9EA6      	BCF         EECON1, 7 
;__Lib_EEPROM_256.c,12 :: 		
0x17C2	0x80A6      	BSF         EECON1, 0 
;__Lib_EEPROM_256.c,14 :: 		
0x17C4	0xF000CFA8  	MOVFF       EEDATA, R0
;__Lib_EEPROM_256.c,16 :: 		
L_end_EEPROM_Read:
0x17C8	0x0012      	RETURN      0
; end of _EEPROM_Read
_timebase4:
;TCC_5.c,1253 :: 		void timebase4()
;TCC_5.c,1255 :: 		if(!ligar)                                      //se ligar for 0
0x17CA	0x0101      	MOVLB       1
0x17CC	0xBB0D      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x17CE	0xD003      	BRA         L_timebase4284
;TCC_5.c,1257 :: 		temp_ligado4 = 0x00;                           //zera temp_ligado4
0x17D0	0x0100      	MOVLB       0
0x17D2	0x6BD2      	CLRF        _temp_ligado4, 1
0x17D4	0x6BD3      	CLRF        _temp_ligado4+1, 1
;TCC_5.c,1258 :: 		}
L_timebase4284:
;TCC_5.c,1260 :: 		if(ligar && num4!=0)                            //se ligar for 1 e num4 diferente de 0
0x17D6	0x0101      	MOVLB       1
0x17D8	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x17DA	0xD028      	BRA         L_timebase4287
0x17DC	0x0E00      	MOVLW       0
0x17DE	0x1911      	XORWF       _num4+1, 0, 1
0x17E0	0xE102      	BNZ         L__timebase4595
0x17E2	0x0E00      	MOVLW       0
0x17E4	0x1910      	XORWF       _num4, 0, 1
L__timebase4595:
0x17E6	0xE022      	BZ          L_timebase4287
L__timebase4415:
;TCC_5.c,1262 :: 		if(temp4==10)                                  //conta 1 segundo
0x17E8	0x0E00      	MOVLW       0
0x17EA	0x0100      	MOVLB       0
0x17EC	0x19D7      	XORWF       _temp4+1, 0, 1
0x17EE	0xE102      	BNZ         L__timebase4596
0x17F0	0x0E0A      	MOVLW       10
0x17F2	0x19D6      	XORWF       _temp4, 0, 1
L__timebase4596:
0x17F4	0xE104      	BNZ         L_timebase4288
;TCC_5.c,1264 :: 		temp4 = 0x00;                                 //zera temp4
0x17F6	0x6BD6      	CLRF        _temp4, 1
0x17F8	0x6BD7      	CLRF        _temp4+1, 1
;TCC_5.c,1265 :: 		temp_ligado4++;                               //incrementa temp_ligado4 a cada 1 segundo
0x17FA	0x4BD2      	INFSNZ      _temp_ligado4, 1, 1
0x17FC	0x2BD3      	INCF        _temp_ligado4+1, 1, 1
;TCC_5.c,1267 :: 		}                                              //end if temp3==10
L_timebase4288:
;TCC_5.c,1269 :: 		if(temp_ligado4==mult4)                        //compara igualdade entre temp_ligado4 e mult4
0x17FE	0x51D3      	MOVF        _temp_ligado4+1, 0, 1
0x1800	0x19D1      	XORWF       _mult4+1, 0, 1
0x1802	0xE102      	BNZ         L__timebase4597
0x1804	0x51D0      	MOVF        _mult4, 0, 1
0x1806	0x19D2      	XORWF       _temp_ligado4, 0, 1
L__timebase4597:
0x1808	0xE109      	BNZ         L_timebase4289
;TCC_5.c,1271 :: 		toque4 = 0x01;                                //liga o bit toque4
0x180A	0x0101      	MOVLB       1
0x180C	0x830C      	BSF         _toque4, BitPos(_toque4+0), 1
;TCC_5.c,1272 :: 		atv_mot4 = 0x01;                              //liga o bit de ativação do motor 4
0x180E	0x870C      	BSF         _atv_mot4, BitPos(_atv_mot4+0), 1
;TCC_5.c,1273 :: 		comp4 = qtd_comp4;
0x1810	0xF03DC116  	MOVFF       _qtd_comp4, _comp4
0x1814	0xF03EC117  	MOVFF       _qtd_comp4+1, _comp4+1
;TCC_5.c,1274 :: 		abre_mot4();                                  //define os bits de controle do motor 4 para abrir
0x1818	0xF000ECC8  	CALL        _abre_mot4, 0
;TCC_5.c,1276 :: 		}                                              //end if temp_ligado4==mult4
L_timebase4289:
;TCC_5.c,1278 :: 		if(atv_mot4)                                   //se ativação do motor 4 ligada...
0x181C	0x0101      	MOVLB       1
0x181E	0xA70C      	BTFSS       _atv_mot4, BitPos(_atv_mot4+0), 1
0x1820	0xD003      	BRA         L_timebase4290
;TCC_5.c,1280 :: 		read_motbits();                               //executa a leitura dos bits de controle dos motores
0x1822	0xF005EC7D  	CALL        _read_motbits, 0
;TCC_5.c,1282 :: 		}                                              //end if atv_mot4
0x1826	0xD002      	BRA         L_timebase4291
L_timebase4290:
;TCC_5.c,1286 :: 		alarme();                                     //aciona o alarme
0x1828	0xF005ECE5  	CALL        _alarme, 0
;TCC_5.c,1288 :: 		}                                              //end else
L_timebase4291:
;TCC_5.c,1290 :: 		}                                               //end if ligar && num4!=0
L_timebase4287:
;TCC_5.c,1292 :: 		}                                                 //end timebase4()
L_end_timebase4:
0x182C	0x0012      	RETURN      0
; end of _timebase4
_timebase3:
;TCC_5.c,1207 :: 		void timebase3()
;TCC_5.c,1209 :: 		if(!ligar)                                      //se ligar for 0
0x182E	0x0101      	MOVLB       1
0x1830	0xBB0D      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x1832	0xD003      	BRA         L_timebase3276
;TCC_5.c,1211 :: 		temp_ligado3 = 0x00;                           //zera temp_ligado3
0x1834	0x0100      	MOVLB       0
0x1836	0x6BCE      	CLRF        _temp_ligado3, 1
0x1838	0x6BCF      	CLRF        _temp_ligado3+1, 1
;TCC_5.c,1212 :: 		}
L_timebase3276:
;TCC_5.c,1214 :: 		if(ligar && num3!=0)                            //se ligar for 1 e num3 diferente de 0
0x183A	0x0101      	MOVLB       1
0x183C	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x183E	0xD028      	BRA         L_timebase3279
0x1840	0x0E00      	MOVLW       0
0x1842	0x191F      	XORWF       _num3+1, 0, 1
0x1844	0xE102      	BNZ         L__timebase3591
0x1846	0x0E00      	MOVLW       0
0x1848	0x191E      	XORWF       _num3, 0, 1
L__timebase3591:
0x184A	0xE022      	BZ          L_timebase3279
L__timebase3414:
;TCC_5.c,1216 :: 		if(temp3==10)                                  //conta 1 segundo
0x184C	0x0E00      	MOVLW       0
0x184E	0x0100      	MOVLB       0
0x1850	0x19E1      	XORWF       _temp3+1, 0, 1
0x1852	0xE102      	BNZ         L__timebase3592
0x1854	0x0E0A      	MOVLW       10
0x1856	0x19E0      	XORWF       _temp3, 0, 1
L__timebase3592:
0x1858	0xE104      	BNZ         L_timebase3280
;TCC_5.c,1218 :: 		temp3 = 0x00;                                 //zera temp3
0x185A	0x6BE0      	CLRF        _temp3, 1
0x185C	0x6BE1      	CLRF        _temp3+1, 1
;TCC_5.c,1219 :: 		temp_ligado3++;                               //incrementa temp_ligado3 a cada 1 segundo
0x185E	0x4BCE      	INFSNZ      _temp_ligado3, 1, 1
0x1860	0x2BCF      	INCF        _temp_ligado3+1, 1, 1
;TCC_5.c,1221 :: 		}                                              //end if temp3==10
L_timebase3280:
;TCC_5.c,1223 :: 		if(temp_ligado3==mult3)                        //compara igualdade entre temp_ligado3 e mult3
0x1862	0x51CF      	MOVF        _temp_ligado3+1, 0, 1
0x1864	0x19D5      	XORWF       _mult3+1, 0, 1
0x1866	0xE102      	BNZ         L__timebase3593
0x1868	0x51D4      	MOVF        _mult3, 0, 1
0x186A	0x19CE      	XORWF       _temp_ligado3, 0, 1
L__timebase3593:
0x186C	0xE109      	BNZ         L_timebase3281
;TCC_5.c,1225 :: 		toque3 = 0x01;                                //liga o bit toque3
0x186E	0x0101      	MOVLB       1
0x1870	0x8D0B      	BSF         _toque3, BitPos(_toque3+0), 1
;TCC_5.c,1226 :: 		atv_mot3 = 0x01;                              //liga o bit de aativação do motor 3
0x1872	0x8B0C      	BSF         _atv_mot3, BitPos(_atv_mot3+0), 1
;TCC_5.c,1227 :: 		comp3 = qtd_comp3;
0x1874	0xF043C112  	MOVFF       _qtd_comp3, _comp3
0x1878	0xF044C113  	MOVFF       _qtd_comp3+1, _comp3+1
;TCC_5.c,1228 :: 		abre_mot3();                                  //define os bits de controle do motor 3 para abrir
0x187C	0xF000ECBA  	CALL        _abre_mot3, 0
;TCC_5.c,1230 :: 		}                                              //end if temp_ligado3==mult3
L_timebase3281:
;TCC_5.c,1232 :: 		if(atv_mot3)                                   //se ativação do motor 3 ligada...
0x1880	0x0101      	MOVLB       1
0x1882	0xAB0C      	BTFSS       _atv_mot3, BitPos(_atv_mot3+0), 1
0x1884	0xD003      	BRA         L_timebase3282
;TCC_5.c,1234 :: 		read_motbits();                               //executa a leitura dos bits de controle dos motores
0x1886	0xF005EC7D  	CALL        _read_motbits, 0
;TCC_5.c,1236 :: 		}                                              //end if atv_mot3
0x188A	0xD002      	BRA         L_timebase3283
L_timebase3282:
;TCC_5.c,1240 :: 		alarme();                                     //aciona o alarme
0x188C	0xF005ECE5  	CALL        _alarme, 0
;TCC_5.c,1242 :: 		}                                              //end else
L_timebase3283:
;TCC_5.c,1244 :: 		}                                               //end if ligar && num3!=0
L_timebase3279:
;TCC_5.c,1246 :: 		}                                                 //end timebase3()
L_end_timebase3:
0x1890	0x0012      	RETURN      0
; end of _timebase3
_timebase2:
;TCC_5.c,1161 :: 		void timebase2()
;TCC_5.c,1163 :: 		if(!ligar)                                      //se ligar for 0
0x1892	0x0101      	MOVLB       1
0x1894	0xBB0D      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x1896	0xD003      	BRA         L_timebase2268
;TCC_5.c,1165 :: 		temp_ligado2 = 0x00;                           //zera temp_ligado2
0x1898	0x0100      	MOVLB       0
0x189A	0x6BCC      	CLRF        _temp_ligado2, 1
0x189C	0x6BCD      	CLRF        _temp_ligado2+1, 1
;TCC_5.c,1166 :: 		}
L_timebase2268:
;TCC_5.c,1168 :: 		if(ligar && num2!=0)                            //se ligar for 1 e num2 diferente de 0
0x189E	0x0101      	MOVLB       1
0x18A0	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x18A2	0xD028      	BRA         L_timebase2271
0x18A4	0x0E00      	MOVLW       0
0x18A6	0x191D      	XORWF       _num2+1, 0, 1
0x18A8	0xE102      	BNZ         L__timebase2587
0x18AA	0x0E00      	MOVLW       0
0x18AC	0x191C      	XORWF       _num2, 0, 1
L__timebase2587:
0x18AE	0xE022      	BZ          L_timebase2271
L__timebase2413:
;TCC_5.c,1170 :: 		if(temp2==10)                                  //conta 1 segundo
0x18B0	0x0E00      	MOVLW       0
0x18B2	0x0100      	MOVLB       0
0x18B4	0x19DF      	XORWF       _temp2+1, 0, 1
0x18B6	0xE102      	BNZ         L__timebase2588
0x18B8	0x0E0A      	MOVLW       10
0x18BA	0x19DE      	XORWF       _temp2, 0, 1
L__timebase2588:
0x18BC	0xE104      	BNZ         L_timebase2272
;TCC_5.c,1172 :: 		temp2 = 0x00;                                 //zera temp2
0x18BE	0x6BDE      	CLRF        _temp2, 1
0x18C0	0x6BDF      	CLRF        _temp2+1, 1
;TCC_5.c,1173 :: 		temp_ligado2++;                               //incrementa temp_ligado2 a cada 1 segundo
0x18C2	0x4BCC      	INFSNZ      _temp_ligado2, 1, 1
0x18C4	0x2BCD      	INCF        _temp_ligado2+1, 1, 1
;TCC_5.c,1175 :: 		}                                              //end if temp2==10
L_timebase2272:
;TCC_5.c,1177 :: 		if(temp_ligado2==mult2)                        //compara igualdade entre temp_ligado2 e mult2
0x18C6	0x51CD      	MOVF        _temp_ligado2+1, 0, 1
0x18C8	0x19DB      	XORWF       _mult2+1, 0, 1
0x18CA	0xE102      	BNZ         L__timebase2589
0x18CC	0x51DA      	MOVF        _mult2, 0, 1
0x18CE	0x19CC      	XORWF       _temp_ligado2, 0, 1
L__timebase2589:
0x18D0	0xE109      	BNZ         L_timebase2273
;TCC_5.c,1179 :: 		toque2 = 0x01;                                //liga o bit toque2
0x18D2	0x0101      	MOVLB       1
0x18D4	0x8B0B      	BSF         _toque2, BitPos(_toque2+0), 1
;TCC_5.c,1180 :: 		atv_mot2 = 0x01;                              //liga o bit de aativação do motor 2
0x18D6	0x8D0C      	BSF         _atv_mot2, BitPos(_atv_mot2+0), 1
;TCC_5.c,1181 :: 		comp2 = qtd_comp2;
0x18D8	0xF041C114  	MOVFF       _qtd_comp2, _comp2
0x18DC	0xF042C115  	MOVFF       _qtd_comp2+1, _comp2+1
;TCC_5.c,1182 :: 		abre_mot2();                                  //define os bits de controle do motor 2 para abrir
0x18E0	0xF000ECB3  	CALL        _abre_mot2, 0
;TCC_5.c,1184 :: 		}                                              //end if temp_ligado2==mult2
L_timebase2273:
;TCC_5.c,1186 :: 		if(atv_mot2)                                   //se ativação do motor 2 ligada...
0x18E4	0x0101      	MOVLB       1
0x18E6	0xAD0C      	BTFSS       _atv_mot2, BitPos(_atv_mot2+0), 1
0x18E8	0xD003      	BRA         L_timebase2274
;TCC_5.c,1188 :: 		read_motbits();                               //executa a leitura dos bits de controle dos motores
0x18EA	0xF005EC7D  	CALL        _read_motbits, 0
;TCC_5.c,1190 :: 		}                                              //end if atv_mot2
0x18EE	0xD002      	BRA         L_timebase2275
L_timebase2274:
;TCC_5.c,1194 :: 		alarme();                                     //aciona o alarme
0x18F0	0xF005ECE5  	CALL        _alarme, 0
;TCC_5.c,1196 :: 		}                                              //end else
L_timebase2275:
;TCC_5.c,1198 :: 		}                                               //end if ligar && num2!=0
L_timebase2271:
;TCC_5.c,1200 :: 		}                                                 //end timebase2()
L_end_timebase2:
0x18F4	0x0012      	RETURN      0
; end of _timebase2
_piscaLED:
;TCC_5.c,952 :: 		void piscaLED()
;TCC_5.c,955 :: 		if(ligar && !toque && num!=0)                   //se ligar for um(ligado), toque for zero e num diferente de zero...
0x18F6	0x0101      	MOVLB       1
0x18F8	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x18FA	0xD013      	BRA         L_piscaLED205
0x18FC	0xB90B      	BTFSC       _toque, BitPos(_toque+0), 1
0x18FE	0xD011      	BRA         L_piscaLED205
0x1900	0x0E00      	MOVLW       0
0x1902	0x1919      	XORWF       _num+1, 0, 1
0x1904	0xE102      	BNZ         L__piscaLED561
0x1906	0x0E00      	MOVLW       0
0x1908	0x1918      	XORWF       _num, 0, 1
L__piscaLED561:
0x190A	0xE00B      	BZ          L_piscaLED205
L__piscaLED411:
;TCC_5.c,957 :: 		if(temp_led>=10)                               //conta 1 segundo
0x190C	0x0E00      	MOVLW       0
0x190E	0x0100      	MOVLB       0
0x1910	0x5DEF      	SUBWF       _temp_led+1, 0, 1
0x1912	0xE102      	BNZ         L__piscaLED562
0x1914	0x0E0A      	MOVLW       10
0x1916	0x5DEE      	SUBWF       _temp_led, 0, 1
L__piscaLED562:
0x1918	0xE303      	BNC         L_piscaLED206
;TCC_5.c,959 :: 		temp_led = 0x00;                      //zera temp_led
0x191A	0x6BEE      	CLRF        _temp_led, 1
0x191C	0x6BEF      	CLRF        _temp_led+1, 1
;TCC_5.c,960 :: 		LED  = ~LED;                          //inverte LED de indicação do dispenser n°1
0x191E	0x7680      	BTG         PORTA, 3 
;TCC_5.c,961 :: 		}                                              //end if temp_led>=10
L_piscaLED206:
;TCC_5.c,963 :: 		}                                               //end if ligar && !toque && num!=0
0x1920	0xD022      	BRA         L_piscaLED207
L_piscaLED205:
;TCC_5.c,967 :: 		if(ligar && toque)                             //se ligar for 1 e toque for 1
0x1922	0x0101      	MOVLB       1
0x1924	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1926	0xD00D      	BRA         L_piscaLED210
0x1928	0xA90B      	BTFSS       _toque, BitPos(_toque+0), 1
0x192A	0xD00B      	BRA         L_piscaLED210
L__piscaLED410:
;TCC_5.c,969 :: 		if(temp_led>=2)                               //conta 200ms
0x192C	0x0E00      	MOVLW       0
0x192E	0x0100      	MOVLB       0
0x1930	0x5DEF      	SUBWF       _temp_led+1, 0, 1
0x1932	0xE102      	BNZ         L__piscaLED563
0x1934	0x0E02      	MOVLW       2
0x1936	0x5DEE      	SUBWF       _temp_led, 0, 1
L__piscaLED563:
0x1938	0xE303      	BNC         L_piscaLED211
;TCC_5.c,971 :: 		temp_led=0x00;                               //zera temp_led
0x193A	0x6BEE      	CLRF        _temp_led, 1
0x193C	0x6BEF      	CLRF        _temp_led+1, 1
;TCC_5.c,972 :: 		LED = ~LED;                                  //inverte LED de indicação do dispenser n°1
0x193E	0x7680      	BTG         PORTA, 3 
;TCC_5.c,974 :: 		}                                             //end if temp_led>=2
L_piscaLED211:
;TCC_5.c,976 :: 		}                                              //end if ligar && toque
0x1940	0xD012      	BRA         L_piscaLED212
L_piscaLED210:
;TCC_5.c,979 :: 		if(prog>0 && option==0)                       //se estiver em programação e dispenser n°1 selecionado
0x1942	0x0E00      	MOVLW       0
0x1944	0x6E00      	MOVWF       R0 
0x1946	0x0101      	MOVLB       1
0x1948	0x5103      	MOVF        _prog+1, 0, 1
0x194A	0x5C00      	SUBWF       R0, 0 
0x194C	0xE102      	BNZ         L__piscaLED564
0x194E	0x5102      	MOVF        _prog, 0, 1
0x1950	0x0800      	SUBLW       0
L__piscaLED564:
0x1952	0xE208      	BC          L_piscaLED215
0x1954	0x0E00      	MOVLW       0
0x1956	0x1907      	XORWF       _option+1, 0, 1
0x1958	0xE102      	BNZ         L__piscaLED565
0x195A	0x0E00      	MOVLW       0
0x195C	0x1906      	XORWF       _option, 0, 1
L__piscaLED565:
0x195E	0xE102      	BNZ         L_piscaLED215
L__piscaLED409:
;TCC_5.c,981 :: 		LED = 0x01;                                  //LED do dispenser n°1 aceso
0x1960	0x8680      	BSF         PORTA, 3 
;TCC_5.c,982 :: 		}                                             //end if prog>0 && option==0
0x1962	0xD001      	BRA         L_piscaLED216
L_piscaLED215:
;TCC_5.c,984 :: 		else LED = 0x00;                              //senão, LED do dispenser n°1 desligado
0x1964	0x9680      	BCF         PORTA, 3 
L_piscaLED216:
;TCC_5.c,986 :: 		}                                              //end else
L_piscaLED212:
;TCC_5.c,988 :: 		}                                               //end else
L_piscaLED207:
;TCC_5.c,992 :: 		if(temp_led2 ==5)                                //conta 500ms
0x1966	0x0E00      	MOVLW       0
0x1968	0x0100      	MOVLB       0
0x196A	0x19F9      	XORWF       _temp_led2+1, 0, 1
0x196C	0xE102      	BNZ         L__piscaLED566
0x196E	0x0E05      	MOVLW       5
0x1970	0x19F8      	XORWF       _temp_led2, 0, 1
L__piscaLED566:
0x1972	0xE103      	BNZ         L_piscaLED217
;TCC_5.c,994 :: 		temp_led2=0x00;                                 //zera temp_led2
0x1974	0x6BF8      	CLRF        _temp_led2, 1
0x1976	0x6BF9      	CLRF        _temp_led2+1, 1
;TCC_5.c,995 :: 		LED2 = ~LED2;                                   //inverte estado do LED de indicação geral
0x1978	0x7080      	BTG         PORTA, 0 
;TCC_5.c,997 :: 		}                                                //end if temp_led==5
L_piscaLED217:
;TCC_5.c,999 :: 		if(ligar && !toque2 && num2!=0)                  //se ligar for 1, toque 2 for 0 e num2 diferente de 0...
0x197A	0x0101      	MOVLB       1
0x197C	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x197E	0xD013      	BRA         L_piscaLED220
0x1980	0xBB0B      	BTFSC       _toque2, BitPos(_toque2+0), 1
0x1982	0xD011      	BRA         L_piscaLED220
0x1984	0x0E00      	MOVLW       0
0x1986	0x191D      	XORWF       _num2+1, 0, 1
0x1988	0xE102      	BNZ         L__piscaLED567
0x198A	0x0E00      	MOVLW       0
0x198C	0x191C      	XORWF       _num2, 0, 1
L__piscaLED567:
0x198E	0xE00B      	BZ          L_piscaLED220
L__piscaLED408:
;TCC_5.c,1001 :: 		if(temp_led3>=10)                               //conta 1 segundo
0x1990	0x0E00      	MOVLW       0
0x1992	0x0100      	MOVLB       0
0x1994	0x5DF7      	SUBWF       _temp_led3+1, 0, 1
0x1996	0xE102      	BNZ         L__piscaLED568
0x1998	0x0E0A      	MOVLW       10
0x199A	0x5DF6      	SUBWF       _temp_led3, 0, 1
L__piscaLED568:
0x199C	0xE303      	BNC         L_piscaLED221
;TCC_5.c,1003 :: 		temp_led3 = 0x00;                              //zera temp_led3
0x199E	0x6BF6      	CLRF        _temp_led3, 1
0x19A0	0x6BF7      	CLRF        _temp_led3+1, 1
;TCC_5.c,1004 :: 		LED3 = ~LED3;                                  //inverte estado do LED de indicação do dispenser n°2
0x19A2	0x7280      	BTG         PORTA, 1 
;TCC_5.c,1006 :: 		}                                               //end if temp_led3>=10
L_piscaLED221:
;TCC_5.c,1008 :: 		}                                                //end if ligar && !toque2 && num2!=0
0x19A4	0xD022      	BRA         L_piscaLED222
L_piscaLED220:
;TCC_5.c,1012 :: 		if(ligar && toque2)                             //se ligar e toque2 for 1
0x19A6	0x0101      	MOVLB       1
0x19A8	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x19AA	0xD00D      	BRA         L_piscaLED225
0x19AC	0xAB0B      	BTFSS       _toque2, BitPos(_toque2+0), 1
0x19AE	0xD00B      	BRA         L_piscaLED225
L__piscaLED407:
;TCC_5.c,1014 :: 		if(temp_led3>=2)                               //conta 200 milisegundos
0x19B0	0x0E00      	MOVLW       0
0x19B2	0x0100      	MOVLB       0
0x19B4	0x5DF7      	SUBWF       _temp_led3+1, 0, 1
0x19B6	0xE102      	BNZ         L__piscaLED569
0x19B8	0x0E02      	MOVLW       2
0x19BA	0x5DF6      	SUBWF       _temp_led3, 0, 1
L__piscaLED569:
0x19BC	0xE303      	BNC         L_piscaLED226
;TCC_5.c,1016 :: 		temp_led3=0x00;                               //zera temp_led3
0x19BE	0x6BF6      	CLRF        _temp_led3, 1
0x19C0	0x6BF7      	CLRF        _temp_led3+1, 1
;TCC_5.c,1017 :: 		LED3 = ~LED3;                                 //inverte estado do LED de indicação do dispenser n°2
0x19C2	0x7280      	BTG         PORTA, 1 
;TCC_5.c,1019 :: 		}                                              //end if temp_led3>=2
L_piscaLED226:
;TCC_5.c,1021 :: 		}                                               //end if ligar && toque2
0x19C4	0xD012      	BRA         L_piscaLED227
L_piscaLED225:
;TCC_5.c,1025 :: 		if(prog>0 && option==1)                        //se estiver em programação e dispenser n°2 selecionado
0x19C6	0x0E00      	MOVLW       0
0x19C8	0x6E00      	MOVWF       R0 
0x19CA	0x0101      	MOVLB       1
0x19CC	0x5103      	MOVF        _prog+1, 0, 1
0x19CE	0x5C00      	SUBWF       R0, 0 
0x19D0	0xE102      	BNZ         L__piscaLED570
0x19D2	0x5102      	MOVF        _prog, 0, 1
0x19D4	0x0800      	SUBLW       0
L__piscaLED570:
0x19D6	0xE208      	BC          L_piscaLED230
0x19D8	0x0E00      	MOVLW       0
0x19DA	0x1907      	XORWF       _option+1, 0, 1
0x19DC	0xE102      	BNZ         L__piscaLED571
0x19DE	0x0E01      	MOVLW       1
0x19E0	0x1906      	XORWF       _option, 0, 1
L__piscaLED571:
0x19E2	0xE102      	BNZ         L_piscaLED230
L__piscaLED406:
;TCC_5.c,1027 :: 		LED3 = 0x01;                                  //LED do dispenser n°2 aceso
0x19E4	0x8280      	BSF         PORTA, 1 
;TCC_5.c,1028 :: 		}                                              //end if prog>0 && option==1
0x19E6	0xD001      	BRA         L_piscaLED231
L_piscaLED230:
;TCC_5.c,1030 :: 		else LED3 = 0x00;                               //senão, LED do dispenser n°2 desligado
0x19E8	0x9280      	BCF         PORTA, 1 
L_piscaLED231:
;TCC_5.c,1032 :: 		}                                               //end else
L_piscaLED227:
;TCC_5.c,1034 :: 		}                                                //end else
L_piscaLED222:
0x19EA	0x0101      	MOVLB       1
;TCC_5.c,1036 :: 		if(ligar && !toque3 && num3!=0)                  //se ligar for 1, toque3 for 0 e num3 diferente de 0...
0x19EC	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x19EE	0xD013      	BRA         L_piscaLED234
0x19F0	0xBD0B      	BTFSC       _toque3, BitPos(_toque3+0), 1
0x19F2	0xD011      	BRA         L_piscaLED234
0x19F4	0x0E00      	MOVLW       0
0x19F6	0x191F      	XORWF       _num3+1, 0, 1
0x19F8	0xE102      	BNZ         L__piscaLED572
0x19FA	0x0E00      	MOVLW       0
0x19FC	0x191E      	XORWF       _num3, 0, 1
L__piscaLED572:
0x19FE	0xE00B      	BZ          L_piscaLED234
L__piscaLED405:
;TCC_5.c,1038 :: 		if(temp_led4>=10)                               //conta 1 segundo
0x1A00	0x0E00      	MOVLW       0
0x1A02	0x0100      	MOVLB       0
0x1A04	0x5DF5      	SUBWF       _temp_led4+1, 0, 1
0x1A06	0xE102      	BNZ         L__piscaLED573
0x1A08	0x0E0A      	MOVLW       10
0x1A0A	0x5DF4      	SUBWF       _temp_led4, 0, 1
L__piscaLED573:
0x1A0C	0xE303      	BNC         L_piscaLED235
;TCC_5.c,1040 :: 		temp_led4 = 0x00;                              //zera temp_led4
0x1A0E	0x6BF4      	CLRF        _temp_led4, 1
0x1A10	0x6BF5      	CLRF        _temp_led4+1, 1
;TCC_5.c,1041 :: 		LED4 = ~LED4;                                  //inverte estado do LED de indicação do dispenser n°3
0x1A12	0x7480      	BTG         PORTA, 2 
;TCC_5.c,1043 :: 		}                                               //end if temp_led4>=10
L_piscaLED235:
;TCC_5.c,1045 :: 		}                                                //end if ligar && !toque3 && num3!=0
0x1A14	0xD022      	BRA         L_piscaLED236
L_piscaLED234:
;TCC_5.c,1049 :: 		if(ligar && toque3)                             //se ligar e toque3 for 1
0x1A16	0x0101      	MOVLB       1
0x1A18	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1A1A	0xD00D      	BRA         L_piscaLED239
0x1A1C	0xAD0B      	BTFSS       _toque3, BitPos(_toque3+0), 1
0x1A1E	0xD00B      	BRA         L_piscaLED239
L__piscaLED404:
;TCC_5.c,1051 :: 		if(temp_led4>=2)                               //conta 200 milisegundos
0x1A20	0x0E00      	MOVLW       0
0x1A22	0x0100      	MOVLB       0
0x1A24	0x5DF5      	SUBWF       _temp_led4+1, 0, 1
0x1A26	0xE102      	BNZ         L__piscaLED574
0x1A28	0x0E02      	MOVLW       2
0x1A2A	0x5DF4      	SUBWF       _temp_led4, 0, 1
L__piscaLED574:
0x1A2C	0xE303      	BNC         L_piscaLED240
;TCC_5.c,1053 :: 		temp_led4=0x00;                               //zera temp_led4
0x1A2E	0x6BF4      	CLRF        _temp_led4, 1
0x1A30	0x6BF5      	CLRF        _temp_led4+1, 1
;TCC_5.c,1054 :: 		LED4 = ~LED4;                                 //inverte estado do LED de indicação do dispenser n°3
0x1A32	0x7480      	BTG         PORTA, 2 
;TCC_5.c,1056 :: 		}                                              //end if temp_led4>=2
L_piscaLED240:
;TCC_5.c,1058 :: 		}                                               //end if ligar && toque3
0x1A34	0xD012      	BRA         L_piscaLED241
L_piscaLED239:
;TCC_5.c,1062 :: 		if(prog>0 && option==2)                        //se estiver em programação e dispenser n°3 selecionado
0x1A36	0x0E00      	MOVLW       0
0x1A38	0x6E00      	MOVWF       R0 
0x1A3A	0x0101      	MOVLB       1
0x1A3C	0x5103      	MOVF        _prog+1, 0, 1
0x1A3E	0x5C00      	SUBWF       R0, 0 
0x1A40	0xE102      	BNZ         L__piscaLED575
0x1A42	0x5102      	MOVF        _prog, 0, 1
0x1A44	0x0800      	SUBLW       0
L__piscaLED575:
0x1A46	0xE208      	BC          L_piscaLED244
0x1A48	0x0E00      	MOVLW       0
0x1A4A	0x1907      	XORWF       _option+1, 0, 1
0x1A4C	0xE102      	BNZ         L__piscaLED576
0x1A4E	0x0E02      	MOVLW       2
0x1A50	0x1906      	XORWF       _option, 0, 1
L__piscaLED576:
0x1A52	0xE102      	BNZ         L_piscaLED244
L__piscaLED403:
;TCC_5.c,1064 :: 		LED4 = 0x01;                                  //LED do dispenser n°3 aceso
0x1A54	0x8480      	BSF         PORTA, 2 
;TCC_5.c,1065 :: 		}                                              //end if prog>0 && option==2
0x1A56	0xD001      	BRA         L_piscaLED245
L_piscaLED244:
;TCC_5.c,1067 :: 		else LED4 = 0x00;                               //senão, LED do dispenser n°3 desligado
0x1A58	0x9480      	BCF         PORTA, 2 
L_piscaLED245:
;TCC_5.c,1069 :: 		}                                               //end else
L_piscaLED241:
;TCC_5.c,1071 :: 		}                                                //end else
L_piscaLED236:
0x1A5A	0x0101      	MOVLB       1
;TCC_5.c,1074 :: 		if(ligar && !toque4 && num4!=0)                  //se ligar for 1, toque4 for 0 e num4 diferente de 0...
0x1A5C	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1A5E	0xD013      	BRA         L_piscaLED248
0x1A60	0xB30C      	BTFSC       _toque4, BitPos(_toque4+0), 1
0x1A62	0xD011      	BRA         L_piscaLED248
0x1A64	0x0E00      	MOVLW       0
0x1A66	0x1911      	XORWF       _num4+1, 0, 1
0x1A68	0xE102      	BNZ         L__piscaLED577
0x1A6A	0x0E00      	MOVLW       0
0x1A6C	0x1910      	XORWF       _num4, 0, 1
L__piscaLED577:
0x1A6E	0xE00B      	BZ          L_piscaLED248
L__piscaLED402:
;TCC_5.c,1076 :: 		if(temp_led5>=10)                               //conta 1 segundo
0x1A70	0x0E00      	MOVLW       0
0x1A72	0x0100      	MOVLB       0
0x1A74	0x5DEB      	SUBWF       _temp_led5+1, 0, 1
0x1A76	0xE102      	BNZ         L__piscaLED578
0x1A78	0x0E0A      	MOVLW       10
0x1A7A	0x5DEA      	SUBWF       _temp_led5, 0, 1
L__piscaLED578:
0x1A7C	0xE303      	BNC         L_piscaLED249
;TCC_5.c,1078 :: 		temp_led5 = 0x00;                              //zera temp_led5
0x1A7E	0x6BEA      	CLRF        _temp_led5, 1
0x1A80	0x6BEB      	CLRF        _temp_led5+1, 1
;TCC_5.c,1079 :: 		LED5 = ~LED5;                                  //inverte estado do LED de indicação do dispenser n°4
0x1A82	0x7880      	BTG         PORTA, 4 
;TCC_5.c,1081 :: 		}                                               //end if temp_led5>=10
L_piscaLED249:
;TCC_5.c,1083 :: 		}                                                //end if ligar && !toque4 && num4!=0
0x1A84	0xD022      	BRA         L_piscaLED250
L_piscaLED248:
;TCC_5.c,1087 :: 		if(ligar && toque4)                             //se ligar e toque4 for 1
0x1A86	0x0101      	MOVLB       1
0x1A88	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1A8A	0xD00D      	BRA         L_piscaLED253
0x1A8C	0xA30C      	BTFSS       _toque4, BitPos(_toque4+0), 1
0x1A8E	0xD00B      	BRA         L_piscaLED253
L__piscaLED401:
;TCC_5.c,1089 :: 		if(temp_led5>=2)                               //conta 200 milisegundos
0x1A90	0x0E00      	MOVLW       0
0x1A92	0x0100      	MOVLB       0
0x1A94	0x5DEB      	SUBWF       _temp_led5+1, 0, 1
0x1A96	0xE102      	BNZ         L__piscaLED579
0x1A98	0x0E02      	MOVLW       2
0x1A9A	0x5DEA      	SUBWF       _temp_led5, 0, 1
L__piscaLED579:
0x1A9C	0xE303      	BNC         L_piscaLED254
;TCC_5.c,1091 :: 		temp_led5=0x00;                               //zera temp_led5
0x1A9E	0x6BEA      	CLRF        _temp_led5, 1
0x1AA0	0x6BEB      	CLRF        _temp_led5+1, 1
;TCC_5.c,1092 :: 		LED5 = ~LED5;                                 //inverte estado do LED de indicação do dispenser n°4
0x1AA2	0x7880      	BTG         PORTA, 4 
;TCC_5.c,1094 :: 		}                                              //end if temp_led5>=2
L_piscaLED254:
;TCC_5.c,1096 :: 		}                                               //end if ligar && toque4
0x1AA4	0xD012      	BRA         L_piscaLED255
L_piscaLED253:
;TCC_5.c,1100 :: 		if(prog>0 && option==3)                        //se estiver em programação e dispenser n°4 selecionado
0x1AA6	0x0E00      	MOVLW       0
0x1AA8	0x6E00      	MOVWF       R0 
0x1AAA	0x0101      	MOVLB       1
0x1AAC	0x5103      	MOVF        _prog+1, 0, 1
0x1AAE	0x5C00      	SUBWF       R0, 0 
0x1AB0	0xE102      	BNZ         L__piscaLED580
0x1AB2	0x5102      	MOVF        _prog, 0, 1
0x1AB4	0x0800      	SUBLW       0
L__piscaLED580:
0x1AB6	0xE208      	BC          L_piscaLED258
0x1AB8	0x0E00      	MOVLW       0
0x1ABA	0x1907      	XORWF       _option+1, 0, 1
0x1ABC	0xE102      	BNZ         L__piscaLED581
0x1ABE	0x0E03      	MOVLW       3
0x1AC0	0x1906      	XORWF       _option, 0, 1
L__piscaLED581:
0x1AC2	0xE102      	BNZ         L_piscaLED258
L__piscaLED400:
;TCC_5.c,1102 :: 		LED5 = 0x01;                                  //LED do dispenser n°4 aceso
0x1AC4	0x8880      	BSF         PORTA, 4 
;TCC_5.c,1103 :: 		}                                              //end if prog>0 && option==3
0x1AC6	0xD001      	BRA         L_piscaLED259
L_piscaLED258:
;TCC_5.c,1105 :: 		else LED5 = 0x00;                               //senão, LED do dispenser n°4 desligado
0x1AC8	0x9880      	BCF         PORTA, 4 
L_piscaLED259:
;TCC_5.c,1107 :: 		}                                               //end else
L_piscaLED255:
;TCC_5.c,1109 :: 		}                                                //end else
L_piscaLED250:
;TCC_5.c,1111 :: 		}                                                 //end piscaLED()
L_end_piscaLED:
0x1ACA	0x0012      	RETURN      0
; end of _piscaLED
_timebase:
;TCC_5.c,1118 :: 		void timebase()
;TCC_5.c,1120 :: 		if(!ligar)                                      //se ligar for 0
0x1ACC	0x0101      	MOVLB       1
0x1ACE	0xBB0D      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x1AD0	0xD003      	BRA         L_timebase260
;TCC_5.c,1122 :: 		temp_ligado = 0x00;                            //zera temp_ligado
0x1AD2	0x0100      	MOVLB       0
0x1AD4	0x6BCA      	CLRF        _temp_ligado, 1
0x1AD6	0x6BCB      	CLRF        _temp_ligado+1, 1
;TCC_5.c,1123 :: 		}
L_timebase260:
;TCC_5.c,1124 :: 		if(ligar && num!=0)                             //se ligar for 1 e num diferente de 0...
0x1AD8	0x0101      	MOVLB       1
0x1ADA	0xAB0D      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1ADC	0xD028      	BRA         L_timebase263
0x1ADE	0x0E00      	MOVLW       0
0x1AE0	0x1919      	XORWF       _num+1, 0, 1
0x1AE2	0xE102      	BNZ         L__timebase583
0x1AE4	0x0E00      	MOVLW       0
0x1AE6	0x1918      	XORWF       _num, 0, 1
L__timebase583:
0x1AE8	0xE022      	BZ          L_timebase263
L__timebase412:
;TCC_5.c,1126 :: 		if(temp==10)                                   //conta 1 segundo
0x1AEA	0x0E00      	MOVLW       0
0x1AEC	0x0100      	MOVLB       0
0x1AEE	0x19DD      	XORWF       _temp+1, 0, 1
0x1AF0	0xE102      	BNZ         L__timebase584
0x1AF2	0x0E0A      	MOVLW       10
0x1AF4	0x19DC      	XORWF       _temp, 0, 1
L__timebase584:
0x1AF6	0xE104      	BNZ         L_timebase264
;TCC_5.c,1128 :: 		temp = 0x00;                                  //zera temp
0x1AF8	0x6BDC      	CLRF        _temp, 1
0x1AFA	0x6BDD      	CLRF        _temp+1, 1
;TCC_5.c,1129 :: 		temp_ligado++;                                //incrementa temp_ligado a cada 1 segundo
0x1AFC	0x4BCA      	INFSNZ      _temp_ligado, 1, 1
0x1AFE	0x2BCB      	INCF        _temp_ligado+1, 1, 1
;TCC_5.c,1131 :: 		}                                              //end if temp==10
L_timebase264:
;TCC_5.c,1133 :: 		if(temp_ligado==mult)                          //compara a igualdade de temp_ligado com mult
0x1B00	0x51CB      	MOVF        _temp_ligado+1, 0, 1
0x1B02	0x19D9      	XORWF       _mult+1, 0, 1
0x1B04	0xE102      	BNZ         L__timebase585
0x1B06	0x51D8      	MOVF        _mult, 0, 1
0x1B08	0x19CA      	XORWF       _temp_ligado, 0, 1
L__timebase585:
0x1B0A	0xE109      	BNZ         L_timebase265
;TCC_5.c,1135 :: 		toque = 0x01;                                 //liga o bit toque
0x1B0C	0x0101      	MOVLB       1
0x1B0E	0x890B      	BSF         _toque, BitPos(_toque+0), 1
;TCC_5.c,1136 :: 		atv_mot = 0x01;                               //liga o bit de ativação do motor
0x1B10	0x8F0C      	BSF         _atv_mot, BitPos(_atv_mot+0), 1
;TCC_5.c,1137 :: 		comp = qtd_comp;
0x1B12	0xF03FC10E  	MOVFF       _qtd_comp, _comp
0x1B16	0xF040C10F  	MOVFF       _qtd_comp+1, _comp+1
;TCC_5.c,1138 :: 		abre_mot();                                   //define os bits de controle do motor para abri-lo
0x1B1A	0xF000EC9E  	CALL        _abre_mot, 0
;TCC_5.c,1140 :: 		}                                              //end if temp_ligado==mult
L_timebase265:
;TCC_5.c,1142 :: 		if(atv_mot)                                    //se ativação do motor for ligada...
0x1B1E	0x0101      	MOVLB       1
0x1B20	0xAF0C      	BTFSS       _atv_mot, BitPos(_atv_mot+0), 1
0x1B22	0xD003      	BRA         L_timebase266
;TCC_5.c,1144 :: 		read_motbits();                               //executa a leitura dos bits de controle dos motores
0x1B24	0xF005EC7D  	CALL        _read_motbits, 0
;TCC_5.c,1146 :: 		}                                              //end if atv_mot
0x1B28	0xD002      	BRA         L_timebase267
L_timebase266:
;TCC_5.c,1150 :: 		alarme();                                     //executa o alarme
0x1B2A	0xF005ECE5  	CALL        _alarme, 0
;TCC_5.c,1151 :: 		}
L_timebase267:
;TCC_5.c,1152 :: 		}                                               //end if ligar
L_timebase263:
;TCC_5.c,1154 :: 		}                                                 //end timebase()
L_end_timebase:
0x1B2E	0x0012      	RETURN      0
; end of _timebase
_main:
0x1B30	0xF00EECD7  	CALL        7598, 0
;TCC_5.c,220 :: 		void main (void)
;TCC_5.c,225 :: 		ADCON1        =   0x0F;                   //Define os pinos como digital
0x1B34	0x0E0F      	MOVLW       15
0x1B36	0x6EC1      	MOVWF       ADCON1 
;TCC_5.c,226 :: 		CMCON         =   0x07;                   //Desativa os comparadores
0x1B38	0x0E07      	MOVLW       7
0x1B3A	0x6EB4      	MOVWF       CMCON 
;TCC_5.c,228 :: 		TMR0H         =   0xED;
0x1B3C	0x0EED      	MOVLW       237
0x1B3E	0x6ED7      	MOVWF       TMR0H 
;TCC_5.c,229 :: 		TMR0L         =   0xB1;                   //Inicia timer0 em 60849
0x1B40	0x0EB1      	MOVLW       177
0x1B42	0x6ED6      	MOVWF       TMR0L 
;TCC_5.c,232 :: 		INTCON.GIE    =   0x01;                   //Ativa interrupção global
0x1B44	0x8EF2      	BSF         INTCON, 7 
;TCC_5.c,233 :: 		INTCON.PEIE   =   0x01;                   //Ativa interrupção por periféricos
0x1B46	0x8CF2      	BSF         INTCON, 6 
;TCC_5.c,234 :: 		INTCON.TMR0IE =   0x01;                   //Ativa interrupção por overflow
0x1B48	0x8AF2      	BSF         INTCON, 5 
;TCC_5.c,236 :: 		TMR0IF_bit    =   0x00;                   //zera a flag do timer0
0x1B4A	0x94F2      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0) 
;TCC_5.c,239 :: 		INTCON2.RBPU  =   0x01;                   //Desliga os resistores de pull-ups do portB
0x1B4C	0x8EF1      	BSF         INTCON2, 7 
;TCC_5.c,240 :: 		T0CON         =   0x87;                   //TMR0 16 bits, prescaler 1:256
0x1B4E	0x0E87      	MOVLW       135
0x1B50	0x6ED5      	MOVWF       T0CON 
;TCC_5.c,244 :: 		ligar         =   0x00;                   //     |
0x1B52	0x0101      	MOVLB       1
0x1B54	0x9B0D      	BCF         _ligar, BitPos(_ligar+0), 1
;TCC_5.c,245 :: 		block_cmd     =   0x00;                   //     |
0x1B56	0x990D      	BCF         _block_cmd, BitPos(_block_cmd+0), 1
;TCC_5.c,246 :: 		b1_flag       =   0x00;                   //     |
0x1B58	0x910A      	BCF         _b1_flag, BitPos(_b1_flag+0), 1
;TCC_5.c,247 :: 		b2_flag       =   0x00;                   //     |
0x1B5A	0x930A      	BCF         _b2_flag, BitPos(_b2_flag+0), 1
;TCC_5.c,248 :: 		b3_flag       =   0x00;                   //     |
0x1B5C	0x9F0B      	BCF         _b3_flag, BitPos(_b3_flag+0), 1
;TCC_5.c,249 :: 		b4_flag       =   0x00;                   //     |
0x1B5E	0x910C      	BCF         _b4_flag, BitPos(_b4_flag+0), 1
;TCC_5.c,250 :: 		b5_flag       =   0x00;                   //     |
0x1B60	0x9D0A      	BCF         _b5_flag, BitPos(_b5_flag+0), 1
;TCC_5.c,251 :: 		display       =   0x00;                   //     |
0x1B62	0x970A      	BCF         _display, BitPos(_display+0), 1
;TCC_5.c,252 :: 		fast_inc      =   0x00;                   //     |
0x1B64	0x6B1A      	CLRF        _fast_inc, 1
0x1B66	0x6B1B      	CLRF        _fast_inc+1, 1
;TCC_5.c,253 :: 		toque         =   0x00;                   //     |
0x1B68	0x990B      	BCF         _toque, BitPos(_toque+0), 1
;TCC_5.c,254 :: 		toque2        =   0x00;                   //     |
0x1B6A	0x9B0B      	BCF         _toque2, BitPos(_toque2+0), 1
;TCC_5.c,255 :: 		toque3        =   0x00;                   //     |
0x1B6C	0x9D0B      	BCF         _toque3, BitPos(_toque3+0), 1
;TCC_5.c,256 :: 		toque4        =   0x00;                   //     |
0x1B6E	0x930C      	BCF         _toque4, BitPos(_toque4+0), 1
;TCC_5.c,257 :: 		open_bit      =   0x00;                   //     |
0x1B70	0x930B      	BCF         _open_bit, BitPos(_open_bit+0), 1
;TCC_5.c,258 :: 		open_bit2     =   0x00;                   //     |
0x1B72	0x910B      	BCF         _open_bit2, BitPos(_open_bit2+0), 1
;TCC_5.c,259 :: 		open_bit3     =   0x00;                   //     |
0x1B74	0x9F0A      	BCF         _open_bit3, BitPos(_open_bit3+0), 1
;TCC_5.c,260 :: 		open_bit4     =   0x00;                   //     |
0x1B76	0x970B      	BCF         _open_bit4, BitPos(_open_bit4+0), 1
;TCC_5.c,261 :: 		close_bit     =   0x00;                   //     |
0x1B78	0x950B      	BCF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,262 :: 		close_bit2    =   0x00;                   //     |
0x1B7A	0x950A      	BCF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,263 :: 		close_bit3    =   0x00;                   //     |
0x1B7C	0x9B0A      	BCF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,264 :: 		close_bit4    =   0x00;                   //     |
0x1B7E	0x990C      	BCF         _close_bit4, BitPos(_close_bit4+0), 1
;TCC_5.c,265 :: 		atv_mot       =   0x00;                   //     |
0x1B80	0x9F0C      	BCF         _atv_mot, BitPos(_atv_mot+0), 1
;TCC_5.c,266 :: 		atv_mot2      =   0x00;                   //     |
0x1B82	0x9D0C      	BCF         _atv_mot2, BitPos(_atv_mot2+0), 1
;TCC_5.c,267 :: 		atv_mot3      =   0x00;                   //     |
0x1B84	0x9B0C      	BCF         _atv_mot3, BitPos(_atv_mot3+0), 1
;TCC_5.c,268 :: 		atv_mot4      =   0x00;                   //    \ /
0x1B86	0x970C      	BCF         _atv_mot4, BitPos(_atv_mot4+0), 1
;TCC_5.c,270 :: 		SM            =   0x00;                   //zerando todos os bits
0x1B88	0x9081      	BCF         PORTB, 0 
;TCC_5.c,271 :: 		SM2           =   0x00;
0x1B8A	0x9281      	BCF         PORTB, 1 
;TCC_5.c,272 :: 		SM3           =   0x00;
0x1B8C	0x9681      	BCF         PORTB, 3 
;TCC_5.c,273 :: 		SM4           =   0x00;
0x1B8E	0x9481      	BCF         PORTB, 2 
;TCC_5.c,275 :: 		LED2          =   0x00;
0x1B90	0x9080      	BCF         PORTA, 0 
;TCC_5.c,276 :: 		LCD_LED       =   0x01;
0x1B92	0x8482      	BSF         PORTC, 2 
;TCC_5.c,278 :: 		num           =   EEPROM_Read(0x01);      //lê os dados da EEPROM para variável num
0x1B94	0x0E01      	MOVLW       1
0x1B96	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1B98	0xDE10      	RCALL       _EEPROM_Read
0x1B9A	0xF118C000  	MOVFF       R0, _num
0x1B9E	0x0E00      	MOVLW       0
0x1BA0	0x6F19      	MOVWF       _num+1, 1
;TCC_5.c,279 :: 		un            =   EEPROM_Read(0x03);      //lê os dados da EEPROM para variável un
0x1BA2	0x0E03      	MOVLW       3
0x1BA4	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1BA6	0xDE09      	RCALL       _EEPROM_Read
0x1BA8	0xB000      	BTFSC       R0, 0 
0x1BAA	0xD002      	BRA         L__main432
0x1BAC	0x910D      	BCF         _un, BitPos(_un+0), 1
0x1BAE	0xD001      	BRA         L__main433
L__main432:
0x1BB0	0x810D      	BSF         _un, BitPos(_un+0), 1
L__main433:
;TCC_5.c,280 :: 		num2          =   EEPROM_Read(0x02);      //lê os dados da EEPROM para variável num2
0x1BB2	0x0E02      	MOVLW       2
0x1BB4	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1BB6	0xDE01      	RCALL       _EEPROM_Read
0x1BB8	0xF11CC000  	MOVFF       R0, _num2
0x1BBC	0x0E00      	MOVLW       0
0x1BBE	0x6F1D      	MOVWF       _num2+1, 1
;TCC_5.c,281 :: 		un2           =   EEPROM_Read(0x04);      //lê os dados da EEPROM para variável un2
0x1BC0	0x0E04      	MOVLW       4
0x1BC2	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1BC4	0xDDFA      	RCALL       _EEPROM_Read
0x1BC6	0xB000      	BTFSC       R0, 0 
0x1BC8	0xD002      	BRA         L__main434
0x1BCA	0x930D      	BCF         _un2, BitPos(_un2+0), 1
0x1BCC	0xD001      	BRA         L__main435
L__main434:
0x1BCE	0x830D      	BSF         _un2, BitPos(_un2+0), 1
L__main435:
;TCC_5.c,282 :: 		num3          =   EEPROM_Read(0x05);      //lê os dados da EEPROM para variável num3
0x1BD0	0x0E05      	MOVLW       5
0x1BD2	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1BD4	0xDDF2      	RCALL       _EEPROM_Read
0x1BD6	0xF11EC000  	MOVFF       R0, _num3
0x1BDA	0x0E00      	MOVLW       0
0x1BDC	0x6F1F      	MOVWF       _num3+1, 1
;TCC_5.c,283 :: 		un3           =   EEPROM_Read(0x06);      //lê os dados da EEPROM para variável un3
0x1BDE	0x0E06      	MOVLW       6
0x1BE0	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1BE2	0xDDEB      	RCALL       _EEPROM_Read
0x1BE4	0xB000      	BTFSC       R0, 0 
0x1BE6	0xD002      	BRA         L__main436
0x1BE8	0x970D      	BCF         _un3, BitPos(_un3+0), 1
0x1BEA	0xD001      	BRA         L__main437
L__main436:
0x1BEC	0x870D      	BSF         _un3, BitPos(_un3+0), 1
L__main437:
;TCC_5.c,284 :: 		num4          =   EEPROM_Read(0x07);      //lê os dados da EEPROM para variável num4
0x1BEE	0x0E07      	MOVLW       7
0x1BF0	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1BF2	0xDDE3      	RCALL       _EEPROM_Read
0x1BF4	0xF110C000  	MOVFF       R0, _num4
0x1BF8	0x0E00      	MOVLW       0
0x1BFA	0x6F11      	MOVWF       _num4+1, 1
;TCC_5.c,285 :: 		un4           =   EEPROM_Read(0x08);      //lê os dados da EEPROM para variável un4
0x1BFC	0x0E08      	MOVLW       8
0x1BFE	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1C00	0xDDDC      	RCALL       _EEPROM_Read
0x1C02	0xB000      	BTFSC       R0, 0 
0x1C04	0xD002      	BRA         L__main438
0x1C06	0x950D      	BCF         _un4, BitPos(_un4+0), 1
0x1C08	0xD001      	BRA         L__main439
L__main438:
0x1C0A	0x850D      	BSF         _un4, BitPos(_un4+0), 1
L__main439:
;TCC_5.c,286 :: 		qtd_comp      =   EEPROM_Read(0x09);      //lê os dados da EEPROM para variavel qtd_comp
0x1C0C	0x0E09      	MOVLW       9
0x1C0E	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1C10	0xDDD4      	RCALL       _EEPROM_Read
0x1C12	0xF10EC000  	MOVFF       R0, _qtd_comp
0x1C16	0x0E00      	MOVLW       0
0x1C18	0x6F0F      	MOVWF       _qtd_comp+1, 1
;TCC_5.c,287 :: 		qtd_comp2     =   EEPROM_Read(0x0A);      //lê os dados da EEPROM para variavel qtd_comp2
0x1C1A	0x0E0A      	MOVLW       10
0x1C1C	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1C1E	0xDDCD      	RCALL       _EEPROM_Read
0x1C20	0xF114C000  	MOVFF       R0, _qtd_comp2
0x1C24	0x0E00      	MOVLW       0
0x1C26	0x6F15      	MOVWF       _qtd_comp2+1, 1
;TCC_5.c,288 :: 		qtd_comp3     =   EEPROM_Read(0x0B);      //lê os dados da EEPROM para variavel qtd_comp3
0x1C28	0x0E0B      	MOVLW       11
0x1C2A	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1C2C	0xDDC6      	RCALL       _EEPROM_Read
0x1C2E	0xF112C000  	MOVFF       R0, _qtd_comp3
0x1C32	0x0E00      	MOVLW       0
0x1C34	0x6F13      	MOVWF       _qtd_comp3+1, 1
;TCC_5.c,289 :: 		qtd_comp4     =   EEPROM_Read(0x0C);      //lê os dados da EEPROM para variavel qtd_comp4
0x1C36	0x0E0C      	MOVLW       12
0x1C38	0x6F20      	MOVWF       FARG_EEPROM_Read_address, 1
0x1C3A	0xDDBF      	RCALL       _EEPROM_Read
0x1C3C	0xF116C000  	MOVFF       R0, _qtd_comp4
0x1C40	0x0E00      	MOVLW       0
0x1C42	0x6F17      	MOVWF       _qtd_comp4+1, 1
;TCC_5.c,291 :: 		if(qtd_comp==0xFF)qtd_comp=0x01;
0x1C44	0x0E00      	MOVLW       0
0x1C46	0x190F      	XORWF       _qtd_comp+1, 0, 1
0x1C48	0xE102      	BNZ         L__main440
0x1C4A	0x0EFF      	MOVLW       255
0x1C4C	0x190E      	XORWF       _qtd_comp, 0, 1
L__main440:
0x1C4E	0xE104      	BNZ         L_main1
0x1C50	0x0E01      	MOVLW       1
0x1C52	0x6F0E      	MOVWF       _qtd_comp, 1
0x1C54	0x0E00      	MOVLW       0
0x1C56	0x6F0F      	MOVWF       _qtd_comp+1, 1
L_main1:
;TCC_5.c,292 :: 		if(qtd_comp2==0xFF)qtd_comp2=0x01;
0x1C58	0x0E00      	MOVLW       0
0x1C5A	0x1915      	XORWF       _qtd_comp2+1, 0, 1
0x1C5C	0xE102      	BNZ         L__main441
0x1C5E	0x0EFF      	MOVLW       255
0x1C60	0x1914      	XORWF       _qtd_comp2, 0, 1
L__main441:
0x1C62	0xE104      	BNZ         L_main2
0x1C64	0x0E01      	MOVLW       1
0x1C66	0x6F14      	MOVWF       _qtd_comp2, 1
0x1C68	0x0E00      	MOVLW       0
0x1C6A	0x6F15      	MOVWF       _qtd_comp2+1, 1
L_main2:
;TCC_5.c,293 :: 		if(qtd_comp3==0xFF)qtd_comp3=0x01;
0x1C6C	0x0E00      	MOVLW       0
0x1C6E	0x1913      	XORWF       _qtd_comp3+1, 0, 1
0x1C70	0xE102      	BNZ         L__main442
0x1C72	0x0EFF      	MOVLW       255
0x1C74	0x1912      	XORWF       _qtd_comp3, 0, 1
L__main442:
0x1C76	0xE104      	BNZ         L_main3
0x1C78	0x0E01      	MOVLW       1
0x1C7A	0x6F12      	MOVWF       _qtd_comp3, 1
0x1C7C	0x0E00      	MOVLW       0
0x1C7E	0x6F13      	MOVWF       _qtd_comp3+1, 1
L_main3:
;TCC_5.c,294 :: 		if(qtd_comp4==0xFF)qtd_comp4=0x01;
0x1C80	0x0E00      	MOVLW       0
0x1C82	0x1917      	XORWF       _qtd_comp4+1, 0, 1
0x1C84	0xE102      	BNZ         L__main443
0x1C86	0x0EFF      	MOVLW       255
0x1C88	0x1916      	XORWF       _qtd_comp4, 0, 1
L__main443:
0x1C8A	0xE104      	BNZ         L_main4
0x1C8C	0x0E01      	MOVLW       1
0x1C8E	0x6F16      	MOVWF       _qtd_comp4, 1
0x1C90	0x0E00      	MOVLW       0
0x1C92	0x6F17      	MOVWF       _qtd_comp4+1, 1
L_main4:
;TCC_5.c,296 :: 		TRISA = 0x20;                             //seta todos os bits do TRISA como saída
0x1C94	0x0E20      	MOVLW       32
0x1C96	0x6E92      	MOVWF       TRISA 
;TCC_5.c,297 :: 		TRISC = 0xC3;                             //seta os bits 0,1,2,6,7 como entrada
0x1C98	0x0EC3      	MOVLW       195
0x1C9A	0x6E94      	MOVWF       TRISC 
;TCC_5.c,298 :: 		TRISB = 0x00;                             //seta todos os bits do TRISB como saída
0x1C9C	0x6A93      	CLRF        TRISB 
;TCC_5.c,300 :: 		LCD_Init();                               //inicia o LCD
0x1C9E	0xDD22      	RCALL       _Lcd_Init
;TCC_5.c,301 :: 		LCD_Cmd(_LCD_CLEAR);                      //limpa o LCD
0x1CA0	0x0E01      	MOVLW       1
0x1CA2	0x6F2A      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x1CA4	0xF000EC5F  	CALL        _Lcd_Cmd, 0
;TCC_5.c,302 :: 		LCD_Cmd(_LCD_CURSOR_OFF);                 //desliga cursor do LCD
0x1CA8	0x0E0C      	MOVLW       12
0x1CAA	0x6F2A      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x1CAC	0xF000EC5F  	CALL        _Lcd_Cmd, 0
;TCC_5.c,305 :: 		while(1)                                         //loop infinito
L_main5:
;TCC_5.c,307 :: 		ler_bot();                                     //executa ler_bot
0x1CB0	0xF006EC19  	CALL        _ler_bot, 0
;TCC_5.c,309 :: 		disp();                                        //executa disp
0x1CB4	0xF009ECB9  	CALL        _disp, 0
;TCC_5.c,310 :: 		}                                                //end while
0x1CB8	0xD7FB      	BRA         L_main5
;TCC_5.c,312 :: 		}                                                 //end main
L_end_main:
0x1CBA	0xD7FF      	BRA         $+0
; end of _main
0x1DAE	0xF019EE10  	LFSR        1, 25
0x1DB2	0x0EF1      	MOVLW       241
0x1DB4	0x6E00      	MOVWF       R0 
0x1DB6	0x0E01      	MOVLW       1
0x1DB8	0x6E01      	MOVWF       R1 
0x1DBA	0x0EBC      	MOVLW       188
0x1DBC	0x6EF6      	MOVWF       4086 
0x1DBE	0x0E1C      	MOVLW       28
0x1DC0	0x6EF7      	MOVWF       TBLPTRH 
0x1DC2	0x0E00      	MOVLW       0
0x1DC4	0x6EF8      	MOVWF       TBLPTRU 
0x1DC6	0xF00BECD5  	CALL        6058, 0
0x1DCA	0x0012      	RETURN      0
;TCC_5.c,0 :: ?ICS?lstr9_TCC_5
0x1CBC	0x7451 ;?ICS?lstr9_TCC_5+0
0x1CBE	0x2E64 ;?ICS?lstr9_TCC_5+2
0x1CC0	0x4320 ;?ICS?lstr9_TCC_5+4
0x1CC2	0x4D4F ;?ICS?lstr9_TCC_5+6
0x1CC4	0x5250 ;?ICS?lstr9_TCC_5+8
0x1CC6	0x4D49 ;?ICS?lstr9_TCC_5+10
0x1CC8	0x4449 ;?ICS?lstr9_TCC_5+12
0x1CCA	0x534F ;?ICS?lstr9_TCC_5+14
0x1CCC	0x00 ;?ICS?lstr9_TCC_5+16
; end of ?ICS?lstr9_TCC_5
;TCC_5.c,0 :: ?ICS?lstr10_TCC_5
0x1CCD	0x4944 ;?ICS?lstr10_TCC_5+0
0x1CCF	0x5053 ;?ICS?lstr10_TCC_5+2
0x1CD1	0x2020 ;?ICS?lstr10_TCC_5+4
0x1CD3	0x4554 ;?ICS?lstr10_TCC_5+6
0x1CD5	0x504D ;?ICS?lstr10_TCC_5+8
0x1CD7	0x204F ;?ICS?lstr10_TCC_5+10
0x1CD9	0x5120 ;?ICS?lstr10_TCC_5+12
0x1CDB	0x6474 ;?ICS?lstr10_TCC_5+14
0x1CDD	0x00 ;?ICS?lstr10_TCC_5+16
; end of ?ICS?lstr10_TCC_5
;TCC_5.c,0 :: ?ICS_temp_disp
0x1CDE	0x0000 ;?ICS_temp_disp+0
; end of ?ICS_temp_disp
;TCC_5.c,0 :: ?ICS_comp4
0x1CE0	0x0000 ;?ICS_comp4+0
; end of ?ICS_comp4
;TCC_5.c,0 :: ?ICS_comp
0x1CE2	0x0000 ;?ICS_comp+0
; end of ?ICS_comp
;TCC_5.c,0 :: ?ICS_comp2
0x1CE4	0x0000 ;?ICS_comp2+0
; end of ?ICS_comp2
;TCC_5.c,0 :: ?ICS_comp3
0x1CE6	0x0000 ;?ICS_comp3+0
; end of ?ICS_comp3
;TCC_5.c,0 :: ?ICS?lstr8_TCC_5
0x1CE8	0x5250 ;?ICS?lstr8_TCC_5+0
0x1CEA	0x474F ;?ICS?lstr8_TCC_5+2
0x1CEC	0x4152 ;?ICS?lstr8_TCC_5+4
0x1CEE	0x454D ;?ICS?lstr8_TCC_5+6
0x1CF0	0x5520 ;?ICS?lstr8_TCC_5+8
0x1CF2	0x2E6E ;?ICS?lstr8_TCC_5+10
0x1CF4	0x003A ;?ICS?lstr8_TCC_5+12
; end of ?ICS?lstr8_TCC_5
;TCC_5.c,0 :: ?ICS?lstr1_TCC_5
0x1CF6	0x2020 ;?ICS?lstr1_TCC_5+0
0x1CF8	0x4944 ;?ICS?lstr1_TCC_5+2
0x1CFA	0x5053 ;?ICS?lstr1_TCC_5+4
0x1CFC	0x4E45 ;?ICS?lstr1_TCC_5+6
0x1CFE	0x4553 ;?ICS?lstr1_TCC_5+8
0x1D00	0x2052 ;?ICS?lstr1_TCC_5+10
0x1D02	0x4544 ;?ICS?lstr1_TCC_5+12
0x1D04	0x2020 ;?ICS?lstr1_TCC_5+14
0x1D06	0x00 ;?ICS?lstr1_TCC_5+16
; end of ?ICS?lstr1_TCC_5
;TCC_5.c,0 :: ?ICS?lstr5_TCC_5
0x1D07	0x2020 ;?ICS?lstr5_TCC_5+0
0x1D09	0x2020 ;?ICS?lstr5_TCC_5+2
0x1D0B	0x5020 ;?ICS?lstr5_TCC_5+4
0x1D0D	0x5241 ;?ICS?lstr5_TCC_5+6
0x1D0F	0x4E41 ;?ICS?lstr5_TCC_5+8
0x1D11	0x4F44 ;?ICS?lstr5_TCC_5+10
0x1D13	0x2020 ;?ICS?lstr5_TCC_5+12
0x1D15	0x2020 ;?ICS?lstr5_TCC_5+14
0x1D17	0x00 ;?ICS?lstr5_TCC_5+16
; end of ?ICS?lstr5_TCC_5
;TCC_5.c,0 :: ?ICS?lstr6_TCC_5
0x1D18	0x2020 ;?ICS?lstr6_TCC_5+0
0x1D1A	0x2020 ;?ICS?lstr6_TCC_5+2
0x1D1C	0x4320 ;?ICS?lstr6_TCC_5+4
0x1D1E	0x4E4F ;?ICS?lstr6_TCC_5+6
0x1D20	0x4154 ;?ICS?lstr6_TCC_5+8
0x1D22	0x4547 ;?ICS?lstr6_TCC_5+10
0x1D24	0x204D ;?ICS?lstr6_TCC_5+12
0x1D26	0x2020 ;?ICS?lstr6_TCC_5+14
0x1D28	0x00 ;?ICS?lstr6_TCC_5+16
; end of ?ICS?lstr6_TCC_5
;TCC_5.c,0 :: ?ICS?lstr7_TCC_5
0x1D29	0x5250 ;?ICS?lstr7_TCC_5+0
0x1D2B	0x474F ;?ICS?lstr7_TCC_5+2
0x1D2D	0x4152 ;?ICS?lstr7_TCC_5+4
0x1D2F	0x454D ;?ICS?lstr7_TCC_5+6
0x1D31	0x4E20 ;?ICS?lstr7_TCC_5+8
0x1D33	0x4D55 ;?ICS?lstr7_TCC_5+10
0x1D35	0x5245 ;?ICS?lstr7_TCC_5+12
0x1D37	0x3A4F ;?ICS?lstr7_TCC_5+14
0x1D39	0x00 ;?ICS?lstr7_TCC_5+16
; end of ?ICS?lstr7_TCC_5
;TCC_5.c,0 :: ?ICS?lstr2_TCC_5
0x1D3A	0x2020 ;?ICS?lstr2_TCC_5+0
0x1D3C	0x2020 ;?ICS?lstr2_TCC_5+2
0x1D3E	0x4552 ;?ICS?lstr2_TCC_5+4
0x1D40	0x454D ;?ICS?lstr2_TCC_5+6
0x1D42	0x4944 ;?ICS?lstr2_TCC_5+8
0x1D44	0x534F ;?ICS?lstr2_TCC_5+10
0x1D46	0x2020 ;?ICS?lstr2_TCC_5+12
0x1D48	0x2020 ;?ICS?lstr2_TCC_5+14
0x1D4A	0x00 ;?ICS?lstr2_TCC_5+16
; end of ?ICS?lstr2_TCC_5
;TCC_5.c,0 :: ?ICS?lstr3_TCC_5
0x1D4B	0x5445 ;?ICS?lstr3_TCC_5+0
0x1D4D	0x4345 ;?ICS?lstr3_TCC_5+2
0x1D4F	0x4C20 ;?ICS?lstr3_TCC_5+4
0x1D51	0x5541 ;?ICS?lstr3_TCC_5+6
0x1D53	0x4F52 ;?ICS?lstr3_TCC_5+8
0x1D55	0x4720 ;?ICS?lstr3_TCC_5+10
0x1D57	0x4D4F ;?ICS?lstr3_TCC_5+12
0x1D59	0x5345 ;?ICS?lstr3_TCC_5+14
0x1D5B	0x00 ;?ICS?lstr3_TCC_5+16
; end of ?ICS?lstr3_TCC_5
;TCC_5.c,0 :: ?ICS?lstr4_TCC_5
0x1D5C	0x2020 ;?ICS?lstr4_TCC_5+0
0x1D5E	0x4133 ;?ICS?lstr4_TCC_5+2
0x1D60	0x4D20 ;?ICS?lstr4_TCC_5+4
0x1D62	0x4345 ;?ICS?lstr4_TCC_5+6
0x1D64	0x2041 ;?ICS?lstr4_TCC_5+8
0x1D66	0x3032 ;?ICS?lstr4_TCC_5+10
0x1D68	0x3132 ;?ICS?lstr4_TCC_5+12
0x1D6A	0x2020 ;?ICS?lstr4_TCC_5+14
0x1D6C	0x00 ;?ICS?lstr4_TCC_5+16
; end of ?ICS?lstr4_TCC_5
;TCC_5.c,0 :: ?ICS_temp_ligado
0x1D6D	0x0000 ;?ICS_temp_ligado+0
; end of ?ICS_temp_ligado
;TCC_5.c,0 :: ?ICS_temp_ligado2
0x1D6F	0x0000 ;?ICS_temp_ligado2+0
; end of ?ICS_temp_ligado2
;TCC_5.c,0 :: ?ICS_temp_ligado3
0x1D71	0x0000 ;?ICS_temp_ligado3+0
; end of ?ICS_temp_ligado3
;TCC_5.c,0 :: ?ICS_mult4
0x1D73	0x0000 ;?ICS_mult4+0
; end of ?ICS_mult4
;TCC_5.c,0 :: ?ICS_temp_ligado4
0x1D75	0x0000 ;?ICS_temp_ligado4+0
; end of ?ICS_temp_ligado4
;TCC_5.c,0 :: ?ICS_mult3
0x1D77	0x0000 ;?ICS_mult3+0
; end of ?ICS_mult3
;TCC_5.c,0 :: ?ICS_temp4
0x1D79	0x0000 ;?ICS_temp4+0
; end of ?ICS_temp4
;TCC_5.c,0 :: ?ICS_mult
0x1D7B	0x0000 ;?ICS_mult+0
; end of ?ICS_mult
;TCC_5.c,0 :: ?ICS_mult2
0x1D7D	0x0000 ;?ICS_mult2+0
; end of ?ICS_mult2
;TCC_5.c,0 :: ?ICS_temp
0x1D7F	0x0000 ;?ICS_temp+0
; end of ?ICS_temp
;TCC_5.c,0 :: ?ICS_temp2
0x1D81	0x0000 ;?ICS_temp2+0
; end of ?ICS_temp2
;TCC_5.c,0 :: ?ICS_temp3
0x1D83	0x0000 ;?ICS_temp3+0
; end of ?ICS_temp3
;TCC_5.c,0 :: ?ICS_vezes
0x1D85	0x0000 ;?ICS_vezes+0
; end of ?ICS_vezes
;TCC_5.c,0 :: ?ICS_x_mot3
0x1D87	0x0000 ;?ICS_x_mot3+0
; end of ?ICS_x_mot3
;TCC_5.c,0 :: ?ICS_x_mot4
0x1D89	0x0000 ;?ICS_x_mot4+0
; end of ?ICS_x_mot4
;TCC_5.c,0 :: ?ICS_temp_lcd
0x1D8B	0x0000 ;?ICS_temp_lcd+0
; end of ?ICS_temp_lcd
;TCC_5.c,0 :: ?ICS_temp_led5
0x1D8D	0x0000 ;?ICS_temp_led5+0
; end of ?ICS_temp_led5
;TCC_5.c,0 :: ?ICS_x_mot2
0x1D8F	0x0000 ;?ICS_x_mot2+0
; end of ?ICS_x_mot2
;TCC_5.c,0 :: ?ICS_temp_led
0x1D91	0x0000 ;?ICS_temp_led+0
; end of ?ICS_temp_led
;TCC_5.c,0 :: ?ICS_x_mot
0x1D93	0x0000 ;?ICS_x_mot+0
; end of ?ICS_x_mot
;TCC_5.c,0 :: ?ICS_temp_som
0x1D95	0x0000 ;?ICS_temp_som+0
; end of ?ICS_temp_som
;TCC_5.c,0 :: ?ICS_temp_led4
0x1D97	0x0000 ;?ICS_temp_led4+0
; end of ?ICS_temp_led4
;TCC_5.c,0 :: ?ICS_temp_led3
0x1D99	0x0000 ;?ICS_temp_led3+0
; end of ?ICS_temp_led3
;TCC_5.c,0 :: ?ICS_temp_led2
0x1D9B	0x0000 ;?ICS_temp_led2+0
; end of ?ICS_temp_led2
;TCC_5.c,0 :: ?ICS_dia
0x1D9D	0x6964 ;?ICS_dia+0
0x1D9F	0x0061 ;?ICS_dia+2
; end of ?ICS_dia
;TCC_5.c,0 :: ?ICS_hora
0x1DA1	0x2068 ;?ICS_hora+0
0x1DA3	0x0020 ;?ICS_hora+2
; end of ?ICS_hora
;TCC_5.c,0 :: ?ICS_prog
0x1DA5	0x0000 ;?ICS_prog+0
; end of ?ICS_prog
;TCC_5.c,0 :: ?ICS_temp_num
0x1DA7	0x0000 ;?ICS_temp_num+0
; end of ?ICS_temp_num
;TCC_5.c,0 :: ?ICS_option
0x1DA9	0x0000 ;?ICS_option+0
; end of ?ICS_option
;TCC_5.c,0 :: ?ICS_temp_inc
0x1DAB	0x0000 ;?ICS_temp_inc+0
; end of ?ICS_temp_inc
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [132]    _interrupt
0x008C      [14]    _Delay_1us
0x009A      [22]    _Delay_5500us
0x00B0      [14]    _Delay_50us
0x00BE     [126]    _Lcd_Cmd
0x013C      [14]    _abre_mot
0x014A      [14]    _fecha_mot
0x0158      [14]    _Lcd_Chr_CP
0x0166      [14]    _abre_mot2
0x0174      [14]    _abre_mot3
0x0182      [14]    _fecha_mot3
0x0190      [14]    _abre_mot4
0x019E      [14]    _fecha_mot4
0x01AC      [14]    _fecha_mot2
0x01BA     [108]    _mot_aberto2
0x0226     [108]    _mot_aberto4
0x0292     [102]    _mot_fechado4
0x02F8     [108]    _mot_aberto3
0x0364     [102]    _mot_fechado3
0x03CA     [102]    _mot_fechado
0x0430     [102]    _mot_fechado2
0x0496     [108]    _mot_aberto
0x0502      [60]    _toca_som
0x053E     [126]    _Lcd_Out
0x05BC      [94]    _Lcd_Chr
0x061A      [54]    _Div_16X16_U
0x0650      [46]    _luz_lcd
0x067E     [660]    _num_un
0x0912      [80]    _Mul_16X16_U
0x0962     [408]    _fast_incr
0x0AFA     [146]    _read_motbits
0x0B8C      [62]    _EEPROM_Write
0x0BCA     [104]    _alarme
0x0C32    [1856]    _ler_bot
0x1372     [882]    _disp
0x16E4     [198]    _Lcd_Init
0x17AA      [16]    ___CC2DW
0x17BA      [16]    _EEPROM_Read
0x17CA     [100]    _timebase4
0x182E     [100]    _timebase3
0x1892     [100]    _timebase2
0x18F6     [470]    _piscaLED
0x1ACC     [100]    _timebase
0x1B30     [396]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0019      [17]    ?lstr9_TCC_5
0x002A      [17]    ?lstr10_TCC_5
0x003B       [2]    _temp_disp
0x003D       [2]    _comp4
0x003F       [2]    _comp
0x0041       [2]    _comp2
0x0043       [2]    _comp3
0x0045      [14]    ?lstr8_TCC_5
0x0053      [17]    ?lstr1_TCC_5
0x0064      [17]    ?lstr5_TCC_5
0x0075      [17]    ?lstr6_TCC_5
0x0086      [17]    ?lstr7_TCC_5
0x0097      [17]    ?lstr2_TCC_5
0x00A8      [17]    ?lstr3_TCC_5
0x00B9      [17]    ?lstr4_TCC_5
0x00CA       [2]    _temp_ligado
0x00CC       [2]    _temp_ligado2
0x00CE       [2]    _temp_ligado3
0x00D0       [2]    _mult4
0x00D2       [2]    _temp_ligado4
0x00D4       [2]    _mult3
0x00D6       [2]    _temp4
0x00D8       [2]    _mult
0x00DA       [2]    _mult2
0x00DC       [2]    _temp
0x00DE       [2]    _temp2
0x00E0       [2]    _temp3
0x00E2       [2]    _vezes
0x00E4       [2]    _x_mot3
0x00E6       [2]    _x_mot4
0x00E8       [2]    _temp_lcd
0x00EA       [2]    _temp_led5
0x00EC       [2]    _x_mot2
0x00EE       [2]    _temp_led
0x00F0       [2]    _x_mot
0x00F2       [2]    _temp_som
0x00F4       [2]    _temp_led4
0x00F6       [2]    _temp_led3
0x00F8       [2]    _temp_led2
0x00FA       [4]    _dia
0x00FE       [4]    _hora
0x0102       [2]    _prog
0x0104       [2]    _temp_num
0x0106       [2]    _option
0x0108       [2]    _temp_inc
0x010A       [0]    _close_bit3
0x010A       [0]    _close_bit2
0x010A       [0]    _open_bit3
0x010A       [0]    _b1_flag
0x010A       [0]    _display2
0x010A       [0]    _display
0x010A       [0]    _b5_flag
0x010A       [0]    _b2_flag
0x010B       [0]    _b3_flag
0x010B       [0]    _close_bit
0x010B       [0]    _toque3
0x010B       [0]    _toque2
0x010B       [0]    _toque
0x010B       [0]    _open_bit
0x010B       [0]    _open_bit2
0x010B       [0]    _open_bit4
0x010C       [0]    _atv_mot3
0x010C       [0]    _atv_mot4
0x010C       [0]    _toque4
0x010C       [0]    _close_bit4
0x010C       [0]    _atv_mot2
0x010C       [0]    _atv_mot
0x010C       [0]    _b4_flag
0x010C       [0]    __Lib_Lcd_cmd_status
0x010D       [0]    _un4
0x010D       [0]    _block_cmd
0x010D       [0]    _un3
0x010D       [0]    _ligar
0x010D       [0]    _un
0x010D       [0]    _un2
0x010E       [2]    _qtd_comp
0x0110       [2]    _num4
0x0112       [2]    _qtd_comp3
0x0114       [2]    _qtd_comp2
0x0116       [2]    _qtd_comp4
0x0118       [2]    _num
0x011A       [2]    _fast_inc
0x011C       [2]    _num2
0x011E       [2]    _num3
0x0120       [1]    FARG_EEPROM_Read_address
0x0121       [1]    FARG_EEPROM_Write_address
0x0121       [1]    num_un_dig1_L0
0x0122       [1]    FARG_EEPROM_Write_data_
0x0122       [2]    FLOC__num_un
0x0124       [1]    FARG_Lcd_Chr_row
0x0124       [1]    FARG_Lcd_Out_row
0x0125       [1]    FARG_Lcd_Out_column
0x0125       [1]    FARG_Lcd_Chr_column
0x0126       [2]    FARG_Lcd_Out_text
0x0126       [1]    FARG_Lcd_Chr_out_char
0x0128       [1]    Lcd_Out_i_L0
0x0129       [1]    FARG_Lcd_Chr_CP_out_char
0x012A       [1]    FARG_Lcd_Cmd_out_char
0x0F80       [0]    LED5
0x0F80       [0]    LED4
0x0F80       [0]    BOTAO3
0x0F80       [0]    LED2
0x0F80       [0]    LED3
0x0F80       [1]    PORTA
0x0F80       [0]    LED
0x0F81       [0]    SM
0x0F81       [0]    SM2
0x0F81       [1]    PORTB
0x0F81       [0]    SOM
0x0F81       [0]    SM4
0x0F81       [0]    SM3
0x0F82       [0]    BOTAO4
0x0F82       [0]    BOTAO5
0x0F82       [0]    LCD_LED
0x0F82       [1]    PORTC
0x0F82       [0]    BOTAO1
0x0F82       [0]    BOTAO2
0x0F83       [0]    LCD_EN
0x0F83       [0]    LCD_D4
0x0F83       [0]    LCD_RS
0x0F83       [1]    PORTD
0x0F83       [0]    LCD_D7
0x0F83       [0]    LCD_D6
0x0F83       [0]    LCD_D5
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [0]    LCD_D4_Direction
0x0F95       [0]    LCD_RS_Direction
0x0F95       [0]    LCD_D6_Direction
0x0F95       [0]    LCD_D7_Direction
0x0F95       [0]    TRISD7_bit
0x0F95       [0]    TRISD3_bit
0x0F95       [0]    TRISD6_bit
0x0F95       [0]    TRISD5_bit
0x0F95       [0]    LCD_EN_Direction
0x0F95       [0]    LCD_D5_Direction
0x0F95       [0]    TRISD2_bit
0x0F95       [0]    TRISD4_bit
0x0FA1       [1]    PIR2
0x0FA6       [1]    EECON1
0x0FA7       [1]    EECON2
0x0FA8       [1]    EEDATA
0x0FA9       [1]    EEADR
0x0FB4       [1]    CMCON
0x0FC1       [1]    ADCON1
0x0FD5       [1]    T0CON
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF2       [0]    TMR0IF_bit
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x1CBC      [17]    ?ICS?lstr9_TCC_5
0x1CCD      [17]    ?ICS?lstr10_TCC_5
0x1CDE       [2]    ?ICS_temp_disp
0x1CE0       [2]    ?ICS_comp4
0x1CE2       [2]    ?ICS_comp
0x1CE4       [2]    ?ICS_comp2
0x1CE6       [2]    ?ICS_comp3
0x1CE8      [14]    ?ICS?lstr8_TCC_5
0x1CF6      [17]    ?ICS?lstr1_TCC_5
0x1D07      [17]    ?ICS?lstr5_TCC_5
0x1D18      [17]    ?ICS?lstr6_TCC_5
0x1D29      [17]    ?ICS?lstr7_TCC_5
0x1D3A      [17]    ?ICS?lstr2_TCC_5
0x1D4B      [17]    ?ICS?lstr3_TCC_5
0x1D5C      [17]    ?ICS?lstr4_TCC_5
0x1D6D       [2]    ?ICS_temp_ligado
0x1D6F       [2]    ?ICS_temp_ligado2
0x1D71       [2]    ?ICS_temp_ligado3
0x1D73       [2]    ?ICS_mult4
0x1D75       [2]    ?ICS_temp_ligado4
0x1D77       [2]    ?ICS_mult3
0x1D79       [2]    ?ICS_temp4
0x1D7B       [2]    ?ICS_mult
0x1D7D       [2]    ?ICS_mult2
0x1D7F       [2]    ?ICS_temp
0x1D81       [2]    ?ICS_temp2
0x1D83       [2]    ?ICS_temp3
0x1D85       [2]    ?ICS_vezes
0x1D87       [2]    ?ICS_x_mot3
0x1D89       [2]    ?ICS_x_mot4
0x1D8B       [2]    ?ICS_temp_lcd
0x1D8D       [2]    ?ICS_temp_led5
0x1D8F       [2]    ?ICS_x_mot2
0x1D91       [2]    ?ICS_temp_led
0x1D93       [2]    ?ICS_x_mot
0x1D95       [2]    ?ICS_temp_som
0x1D97       [2]    ?ICS_temp_led4
0x1D99       [2]    ?ICS_temp_led3
0x1D9B       [2]    ?ICS_temp_led2
0x1D9D       [4]    ?ICS_dia
0x1DA1       [4]    ?ICS_hora
0x1DA5       [2]    ?ICS_prog
0x1DA7       [2]    ?ICS_temp_num
0x1DA9       [2]    ?ICS_option
0x1DAB       [2]    ?ICS_temp_inc
