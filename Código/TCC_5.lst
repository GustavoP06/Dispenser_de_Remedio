;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 10/06/2021 01:18:34
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF00DEFF5  	GOTO        7146
_interrupt:
;TCC_5.c,169 :: 		void interrupt()                          //interrupção
0x0008	0xF017C000  	MOVFF       R0, 23
0x000C	0xF016C00C  	MOVFF       R12, 22
0x0010	0xF015C00D  	MOVFF       R13, 21
;TCC_5.c,171 :: 		if(TMR1IF_bit)                       //overflow em 100ms
0x0014	0xA09E      	BTFSS       TMR1IF_bit, BitPos(TMR1IF_bit+0) 
0x0016	0xD018      	BRA         L_interrupt0
;TCC_5.c,173 :: 		TMR1IF_bit  =  0x00;                //zera flag do timer1
0x0018	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;TCC_5.c,174 :: 		TMR1H       =  0x3C;
0x001A	0x0E3C      	MOVLW       60
0x001C	0x6ECF      	MOVWF       TMR1H 
;TCC_5.c,175 :: 		TMR1L       =  0xB0;                //seta timer1 em 15536
0x001E	0x0EB0      	MOVLW       176
0x0020	0x6ECE      	MOVWF       TMR1L 
;TCC_5.c,176 :: 		temp_led++;                         //incrementa temp_led
0x0022	0x0100      	MOVLB       0
0x0024	0x4BE1      	INFSNZ      _temp_led, 1, 1
0x0026	0x2BE2      	INCF        _temp_led+1, 1, 1
;TCC_5.c,177 :: 		temp_led2++;                        //incrementa temp_led2
0x0028	0x4BE7      	INFSNZ      _temp_led2, 1, 1
0x002A	0x2BE8      	INCF        _temp_led2+1, 1, 1
;TCC_5.c,178 :: 		temp_led3++;                        //incrementa temp_led3
0x002C	0x4BE5      	INFSNZ      _temp_led3, 1, 1
0x002E	0x2BE6      	INCF        _temp_led3+1, 1, 1
;TCC_5.c,179 :: 		temp_led4++;                        //incrementa temp_led4
0x0030	0x4BF5      	INFSNZ      _temp_led4, 1, 1
0x0032	0x2BF6      	INCF        _temp_led4+1, 1, 1
;TCC_5.c,180 :: 		temp_led5++;                        //incrementa temp_led5
0x0034	0x4BF3      	INFSNZ      _temp_led5, 1, 1
0x0036	0x2BF4      	INCF        _temp_led5+1, 1, 1
;TCC_5.c,181 :: 		temp_disp++;                        //incrementa temp_disp
0x0038	0x4B76      	INFSNZ      _temp_disp, 1, 1
0x003A	0x2B77      	INCF        _temp_disp+1, 1, 1
;TCC_5.c,182 :: 		temp_som++;                         //incrementa temp_som
0x003C	0x4BED      	INFSNZ      _temp_som, 1, 1
0x003E	0x2BEE      	INCF        _temp_som+1, 1, 1
;TCC_5.c,183 :: 		temp_inc++;                         //incrementa temp_inc
0x0040	0x4BFB      	INFSNZ      _temp_inc, 1, 1
0x0042	0x2BFC      	INCF        _temp_inc+1, 1, 1
;TCC_5.c,184 :: 		temp_num++;                         //icrementa temp_num
0x0044	0x4BFD      	INFSNZ      _temp_num, 1, 1
0x0046	0x2BFE      	INCF        _temp_num+1, 1, 1
;TCC_5.c,185 :: 		}
L_interrupt0:
;TCC_5.c,187 :: 		if(TMR0IF_bit)                        //overflow em 100ms overflow
0x0048	0xA4F2      	BTFSS       TMR0IF_bit, BitPos(TMR0IF_bit+0) 
0x004A	0xD00E      	BRA         L_interrupt1
;TCC_5.c,189 :: 		TMR0IF_bit =  0x00;                  //zera flag do timer0
0x004C	0x0100      	MOVLB       0
0x004E	0x94F2      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0) 
;TCC_5.c,190 :: 		TMR0H      =  0x3C;
0x0050	0x0E3C      	MOVLW       60
0x0052	0x6ED7      	MOVWF       TMR0H 
;TCC_5.c,191 :: 		TMR0L      =  0xB0;                  //seta timer0 em 15536
0x0054	0x0EB0      	MOVLW       176
0x0056	0x6ED6      	MOVWF       TMR0L 
;TCC_5.c,192 :: 		temp++;                              //incrementa temp
0x0058	0x4BD3      	INFSNZ      _temp, 1, 1
0x005A	0x2BD4      	INCF        _temp+1, 1, 1
;TCC_5.c,193 :: 		temp2++;                             //incrementa temp2
0x005C	0x4BCF      	INFSNZ      _temp2, 1, 1
0x005E	0x2BD0      	INCF        _temp2+1, 1, 1
;TCC_5.c,194 :: 		temp3++;                             //incrementa temp3
0x0060	0x4BCD      	INFSNZ      _temp3, 1, 1
0x0062	0x2BCE      	INCF        _temp3+1, 1, 1
;TCC_5.c,195 :: 		temp4++;                             //incrementa temp4
0x0064	0x4BD1      	INFSNZ      _temp4, 1, 1
0x0066	0x2BD2      	INCF        _temp4+1, 1, 1
;TCC_5.c,197 :: 		}                                     //end if TMR0IF
L_interrupt1:
;TCC_5.c,201 :: 		piscaLED();                           //executa piscaLED
0x0068	0xF00CECD3  	CALL        _piscaLED, 0
;TCC_5.c,202 :: 		timebase();                           //executa timebase
0x006C	0xF00DECC3  	CALL        _timebase, 0
;TCC_5.c,203 :: 		timebase2();                          //executa timebase2
0x0070	0xF00CECA1  	CALL        _timebase2, 0
;TCC_5.c,204 :: 		timebase3();                          //executa timebase3
0x0074	0xF00CEC71  	CALL        _timebase3, 0
;TCC_5.c,205 :: 		timebase4();                          //executa timebase4
0x0078	0xF00CEC41  	CALL        _timebase4, 0
;TCC_5.c,208 :: 		}                                          //end interrupt()
L_end_interrupt:
L__interrupt424:
0x007C	0xF000C017  	MOVFF       23, R0
0x0080	0xF00CC016  	MOVFF       22, R12
0x0084	0xF00DC015  	MOVFF       21, R13
0x0088	0x0011      	RETFIE      1
; end of _interrupt
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x008A	0x0000      	NOP
0x008C	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x008E	0x0012      	RETURN      0
; end of _Delay_1us
_Delay_5500us:
;__Lib_Delays.c,31 :: 		void Delay_5500us() {
;__Lib_Delays.c,32 :: 		Delay_us(5500);
0x0090	0x0E0F      	MOVLW       15
0x0092	0x6E0C      	MOVWF       R12, 0
0x0094	0x0E47      	MOVLW       71
0x0096	0x6E0D      	MOVWF       R13, 0
L_Delay_5500us5:
0x0098	0x2E0D      	DECFSZ      R13, 1, 0
0x009A	0xD7FE      	BRA         L_Delay_5500us5
0x009C	0x2E0C      	DECFSZ      R12, 1, 0
0x009E	0xD7FC      	BRA         L_Delay_5500us5
0x00A0	0x0000      	NOP
0x00A2	0x0000      	NOP
;__Lib_Delays.c,33 :: 		}
L_end_Delay_5500us:
0x00A4	0x0012      	RETURN      0
; end of _Delay_5500us
_Delay_50us:
;__Lib_Delays.c,19 :: 		void Delay_50us() {
;__Lib_Delays.c,20 :: 		Delay_us(50);
0x00A6	0x0E21      	MOVLW       33
0x00A8	0x6E0D      	MOVWF       R13, 0
L_Delay_50us2:
0x00AA	0x2E0D      	DECFSZ      R13, 1, 0
0x00AC	0xD7FE      	BRA         L_Delay_50us2
;__Lib_Delays.c,21 :: 		}
L_end_Delay_50us:
0x00AE	0x0012      	RETURN      0
; end of _Delay_50us
_Lcd_Cmd:
;__Lib_Lcd.c,18 :: 		
;__Lib_Lcd.c,20 :: 		
0x00B0	0x0101      	MOVLB       1
0x00B2	0xBF25      	BTFSC       FARG_Lcd_Cmd_out_char, 7, 1
0x00B4	0xD002      	BRA         L__Lcd_Cmd21
0x00B6	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x00B8	0xD001      	BRA         L__Lcd_Cmd22
L__Lcd_Cmd21:
0x00BA	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd22:
;__Lib_Lcd.c,21 :: 		
0x00BC	0xBD25      	BTFSC       FARG_Lcd_Cmd_out_char, 6, 1
0x00BE	0xD002      	BRA         L__Lcd_Cmd23
0x00C0	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x00C2	0xD001      	BRA         L__Lcd_Cmd24
L__Lcd_Cmd23:
0x00C4	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd24:
;__Lib_Lcd.c,22 :: 		
0x00C6	0xBB25      	BTFSC       FARG_Lcd_Cmd_out_char, 5, 1
0x00C8	0xD002      	BRA         L__Lcd_Cmd25
0x00CA	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x00CC	0xD001      	BRA         L__Lcd_Cmd26
L__Lcd_Cmd25:
0x00CE	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd26:
;__Lib_Lcd.c,23 :: 		
0x00D0	0xB925      	BTFSC       FARG_Lcd_Cmd_out_char, 4, 1
0x00D2	0xD002      	BRA         L__Lcd_Cmd27
0x00D4	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x00D6	0xD001      	BRA         L__Lcd_Cmd28
L__Lcd_Cmd27:
0x00D8	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd28:
;__Lib_Lcd.c,25 :: 		
0x00DA	0xBD00      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x00DC	0xD002      	BRA         L__Lcd_Cmd29
0x00DE	0x8483      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x00E0	0xD001      	BRA         L__Lcd_Cmd30
L__Lcd_Cmd29:
0x00E2	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd30:
;__Lib_Lcd.c,28 :: 		
0x00E4	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,29 :: 		
0x00E6	0xDFD1      	RCALL       _Delay_1us
;__Lib_Lcd.c,30 :: 		
0x00E8	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,33 :: 		
0x00EA	0xB725      	BTFSC       FARG_Lcd_Cmd_out_char, 3, 1
0x00EC	0xD002      	BRA         L__Lcd_Cmd31
0x00EE	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x00F0	0xD001      	BRA         L__Lcd_Cmd32
L__Lcd_Cmd31:
0x00F2	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd32:
;__Lib_Lcd.c,34 :: 		
0x00F4	0xB525      	BTFSC       FARG_Lcd_Cmd_out_char, 2, 1
0x00F6	0xD002      	BRA         L__Lcd_Cmd33
0x00F8	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x00FA	0xD001      	BRA         L__Lcd_Cmd34
L__Lcd_Cmd33:
0x00FC	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd34:
;__Lib_Lcd.c,35 :: 		
0x00FE	0xB325      	BTFSC       FARG_Lcd_Cmd_out_char, 1, 1
0x0100	0xD002      	BRA         L__Lcd_Cmd35
0x0102	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x0104	0xD001      	BRA         L__Lcd_Cmd36
L__Lcd_Cmd35:
0x0106	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd36:
;__Lib_Lcd.c,36 :: 		
0x0108	0xB125      	BTFSC       FARG_Lcd_Cmd_out_char, 0, 1
0x010A	0xD002      	BRA         L__Lcd_Cmd37
0x010C	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x010E	0xD001      	BRA         L__Lcd_Cmd38
L__Lcd_Cmd37:
0x0110	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd38:
;__Lib_Lcd.c,38 :: 		
0x0112	0xBD00      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x0114	0xD002      	BRA         L__Lcd_Cmd39
0x0116	0x8483      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x0118	0xD001      	BRA         L__Lcd_Cmd40
L__Lcd_Cmd39:
0x011A	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd40:
;__Lib_Lcd.c,40 :: 		
0x011C	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,41 :: 		
0x011E	0xDFB5      	RCALL       _Delay_1us
;__Lib_Lcd.c,42 :: 		
0x0120	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,44 :: 		
0x0122	0xAD00      	BTFSS       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x0124	0xD002      	BRA         L_Lcd_Cmd0
;__Lib_Lcd.c,45 :: 		
0x0126	0xDFB4      	RCALL       _Delay_5500us
0x0128	0xD001      	BRA         L_Lcd_Cmd1
L_Lcd_Cmd0:
;__Lib_Lcd.c,47 :: 		
0x012A	0xDFBD      	RCALL       _Delay_50us
L_Lcd_Cmd1:
;__Lib_Lcd.c,48 :: 		
L_end_Lcd_Cmd:
0x012C	0x0012      	RETURN      0
; end of _Lcd_Cmd
_abre_mot:
;TCC_5.c,1332 :: 		void abre_mot()
;TCC_5.c,1334 :: 		open_bit  = 0x01;                                //seta bit de abertura
0x012E	0x0100      	MOVLB       0
0x0130	0x8BFF      	BSF         _open_bit, BitPos(_open_bit+0), 1
;TCC_5.c,1335 :: 		close_bit = 0x00;                                //limpa bit de fechamento
0x0132	0x0101      	MOVLB       1
0x0134	0x9900      	BCF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,1336 :: 		x_mot     = 0x00;                                //zera x_mot
0x0136	0x0100      	MOVLB       0
0x0138	0x6BE3      	CLRF        _x_mot, 1
0x013A	0x6BE4      	CLRF        _x_mot+1, 1
;TCC_5.c,1338 :: 		}                                                 //end abre_mot()
L_end_abre_mot:
0x013C	0x0012      	RETURN      0
; end of _abre_mot
_Lcd_Chr_CP:
;__Lib_Lcd.c,50 :: 		
;__Lib_Lcd.c,52 :: 		
0x013E	0x0101      	MOVLB       1
0x0140	0x9D00      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,53 :: 		
0x0142	0xF125C124  	MOVFF       FARG_Lcd_Chr_CP_out_char, FARG_Lcd_Cmd_out_char
0x0146	0xDFB4      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,54 :: 		
0x0148	0x8D00      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,55 :: 		
L_end_Lcd_Chr_CP:
0x014A	0x0012      	RETURN      0
; end of _Lcd_Chr_CP
_abre_mot2:
;TCC_5.c,1345 :: 		void abre_mot2()
;TCC_5.c,1347 :: 		open_bit2  = 0x01;                               //seta bit de abertura
0x014C	0x0101      	MOVLB       1
0x014E	0x8700      	BSF         _open_bit2, BitPos(_open_bit2+0), 1
;TCC_5.c,1348 :: 		close_bit2 = 0x00;                               //limpa bit de fechamento
0x0150	0x0100      	MOVLB       0
0x0152	0x9FFF      	BCF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,1349 :: 		x_mot2     = 0x00;                               //zera x_mot
0x0154	0x6BF1      	CLRF        _x_mot2, 1
0x0156	0x6BF2      	CLRF        _x_mot2+1, 1
;TCC_5.c,1351 :: 		}                                                 //end abre_mot2()
L_end_abre_mot2:
0x0158	0x0012      	RETURN      0
; end of _abre_mot2
_abre_mot3:
;TCC_5.c,1358 :: 		void abre_mot3()
;TCC_5.c,1360 :: 		open_bit3  = 0x01;                               //seta bit de abertura
0x015A	0x0101      	MOVLB       1
0x015C	0x8500      	BSF         _open_bit3, BitPos(_open_bit3+0), 1
;TCC_5.c,1361 :: 		close_bit3 = 0x00;                               //limpa bit de fechamento
0x015E	0x0100      	MOVLB       0
0x0160	0x9DFF      	BCF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,1362 :: 		x_mot3     = 0x00;                               //zera x_mot
0x0162	0x6BE9      	CLRF        _x_mot3, 1
0x0164	0x6BEA      	CLRF        _x_mot3+1, 1
;TCC_5.c,1364 :: 		}                                                 //end abre_mot3()
L_end_abre_mot3:
0x0166	0x0012      	RETURN      0
; end of _abre_mot3
_fecha_mot3:
;TCC_5.c,1544 :: 		void fecha_mot3()
;TCC_5.c,1546 :: 		open_bit3  = 0x00;                               //limpa o bit de abertura
0x0168	0x0101      	MOVLB       1
0x016A	0x9500      	BCF         _open_bit3, BitPos(_open_bit3+0), 1
;TCC_5.c,1547 :: 		close_bit3 = 0x01;                               //seta o bit de fechamento
0x016C	0x0100      	MOVLB       0
0x016E	0x8DFF      	BSF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,1548 :: 		x_mot3     = 0x00;                               //zera x_mot3
0x0170	0x6BE9      	CLRF        _x_mot3, 1
0x0172	0x6BEA      	CLRF        _x_mot3+1, 1
;TCC_5.c,1550 :: 		}                                                 //end fecha_mot3()
L_end_fecha_mot3:
0x0174	0x0012      	RETURN      0
; end of _fecha_mot3
_abre_mot4:
;TCC_5.c,1371 :: 		void abre_mot4()
;TCC_5.c,1373 :: 		open_bit4  = 0x01;                               //seta bit de abertura
0x0176	0x0101      	MOVLB       1
0x0178	0x8B00      	BSF         _open_bit4, BitPos(_open_bit4+0), 1
;TCC_5.c,1374 :: 		close_bit4 = 0x00;                               //limpa bit de fechamento
0x017A	0x9300      	BCF         _close_bit4, BitPos(_close_bit4+0), 1
;TCC_5.c,1375 :: 		x_mot4     = 0x00;                               //zera x_mot
0x017C	0x0100      	MOVLB       0
0x017E	0x6BEB      	CLRF        _x_mot4, 1
0x0180	0x6BEC      	CLRF        _x_mot4+1, 1
;TCC_5.c,1377 :: 		}                                                 //end abre_mot4()
L_end_abre_mot4:
0x0182	0x0012      	RETURN      0
; end of _abre_mot4
_fecha_mot2:
;TCC_5.c,1531 :: 		void fecha_mot2()
;TCC_5.c,1533 :: 		open_bit2  = 0x00;                               //limpa o bit de abertura
0x0184	0x0101      	MOVLB       1
0x0186	0x9700      	BCF         _open_bit2, BitPos(_open_bit2+0), 1
;TCC_5.c,1534 :: 		close_bit2 = 0x01;                               //seta o bit de fechamento
0x0188	0x0100      	MOVLB       0
0x018A	0x8FFF      	BSF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,1535 :: 		x_mot2     = 0x00;                               //zera x_mot2
0x018C	0x6BF1      	CLRF        _x_mot2, 1
0x018E	0x6BF2      	CLRF        _x_mot2+1, 1
;TCC_5.c,1537 :: 		}                                                 //end fecha_mot2()
L_end_fecha_mot2:
0x0190	0x0012      	RETURN      0
; end of _fecha_mot2
_fecha_mot4:
;TCC_5.c,1557 :: 		void fecha_mot4()
;TCC_5.c,1559 :: 		open_bit4  = 0x00;                               //limpa o bit de abertura
0x0192	0x0101      	MOVLB       1
0x0194	0x9B00      	BCF         _open_bit4, BitPos(_open_bit4+0), 1
;TCC_5.c,1560 :: 		close_bit4 = 0x01;                               //seta o bit de fechamento
0x0196	0x8300      	BSF         _close_bit4, BitPos(_close_bit4+0), 1
;TCC_5.c,1561 :: 		x_mot4     = 0x00;                               //zera x_mot4
0x0198	0x0100      	MOVLB       0
0x019A	0x6BEB      	CLRF        _x_mot4, 1
0x019C	0x6BEC      	CLRF        _x_mot4+1, 1
;TCC_5.c,1563 :: 		}                                                 //end fecha_mot4()
L_end_fecha_mot4:
0x019E	0x0012      	RETURN      0
; end of _fecha_mot4
_fecha_mot:
;TCC_5.c,1518 :: 		void fecha_mot()
;TCC_5.c,1520 :: 		open_bit  = 0x00;                                //limpa o bit de abertura
0x01A0	0x0100      	MOVLB       0
0x01A2	0x9BFF      	BCF         _open_bit, BitPos(_open_bit+0), 1
;TCC_5.c,1521 :: 		close_bit = 0x01;                                //seta o bit de fechamento
0x01A4	0x0101      	MOVLB       1
0x01A6	0x8900      	BSF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,1522 :: 		x_mot     = 0x00;                                //zera x_mot
0x01A8	0x0100      	MOVLB       0
0x01AA	0x6BE3      	CLRF        _x_mot, 1
0x01AC	0x6BE4      	CLRF        _x_mot+1, 1
;TCC_5.c,1524 :: 		}                                                 //end fecha_mot()
L_end_fecha_mot:
0x01AE	0x0012      	RETURN      0
; end of _fecha_mot
_mot_aberto4:
;TCC_5.c,1484 :: 		void mot_aberto4()
;TCC_5.c,1486 :: 		if(comp4!=0)                                      //se a quantidade de comprimidos a serem despejados
0x01B0	0x0E00      	MOVLW       0
0x01B2	0x0101      	MOVLB       1
0x01B4	0x1908      	XORWF       _comp4+1, 0, 1
0x01B6	0xE102      	BNZ         L__mot_aberto4611
0x01B8	0x0E00      	MOVLW       0
0x01BA	0x1907      	XORWF       _comp4, 0, 1
L__mot_aberto4611:
0x01BC	0xE027      	BZ          L_mot_aberto4316
;TCC_5.c,1488 :: 		if(x_mot4<20)                                    //se x_mot4 for menor que 10...
0x01BE	0x0E00      	MOVLW       0
0x01C0	0x0100      	MOVLB       0
0x01C2	0x5DEC      	SUBWF       _x_mot4+1, 0, 1
0x01C4	0xE102      	BNZ         L__mot_aberto4612
0x01C6	0x0E14      	MOVLW       20
0x01C8	0x5DEB      	SUBWF       _x_mot4, 0, 1
L__mot_aberto4612:
0x01CA	0xE218      	BC          L_mot_aberto4317
;TCC_5.c,1490 :: 		SM4=0;                                        //  ||
0x01CC	0x9481      	BCF         PORTB, 2 
;TCC_5.c,1491 :: 		delay_us(18000);                              //  ||
0x01CE	0x0E2F      	MOVLW       47
0x01D0	0x6E0C      	MOVWF       R12, 0
0x01D2	0x0EBF      	MOVLW       191
0x01D4	0x6E0D      	MOVWF       R13, 0
L_mot_aberto4318:
0x01D6	0x2E0D      	DECFSZ      R13, 1, 0
0x01D8	0xD7FE      	BRA         L_mot_aberto4318
0x01DA	0x2E0C      	DECFSZ      R12, 1, 0
0x01DC	0xD7FC      	BRA         L_mot_aberto4318
0x01DE	0x0000      	NOP
0x01E0	0x0000      	NOP
;TCC_5.c,1492 :: 		SM4=1;                                        //  ||
0x01E2	0x8481      	BSF         PORTB, 2 
;TCC_5.c,1493 :: 		delay_us(2000);                               //  \/
0x01E4	0x0E06      	MOVLW       6
0x01E6	0x6E0C      	MOVWF       R12, 0
0x01E8	0x0E30      	MOVLW       48
0x01EA	0x6E0D      	MOVWF       R13, 0
L_mot_aberto4319:
0x01EC	0x2E0D      	DECFSZ      R13, 1, 0
0x01EE	0xD7FE      	BRA         L_mot_aberto4319
0x01F0	0x2E0C      	DECFSZ      R12, 1, 0
0x01F2	0xD7FC      	BRA         L_mot_aberto4319
0x01F4	0x0000      	NOP
;TCC_5.c,1494 :: 		SM4=0;                                        // liga motor 1 no sentido horário
0x01F6	0x9481      	BCF         PORTB, 2 
;TCC_5.c,1495 :: 		x_mot4 ++;                                    //incrementa x_mot4
0x01F8	0x4BEB      	INFSNZ      _x_mot4, 1, 1
0x01FA	0x2BEC      	INCF        _x_mot4+1, 1, 1
;TCC_5.c,1497 :: 		}                                               //end if x_mot4<10
L_mot_aberto4317:
;TCC_5.c,1499 :: 		if(x_mot4 == 20)                                //se x_mot4 for 10...
0x01FC	0x0E00      	MOVLW       0
0x01FE	0x19EC      	XORWF       _x_mot4+1, 0, 1
0x0200	0xE102      	BNZ         L__mot_aberto4613
0x0202	0x0E14      	MOVLW       20
0x0204	0x19EB      	XORWF       _x_mot4, 0, 1
L__mot_aberto4613:
0x0206	0xE101      	BNZ         L_mot_aberto4320
;TCC_5.c,1501 :: 		fecha_mot4();                                 //executa a configuração dos bits de controle do motor 4 para fechar
0x0208	0xDFC4      	RCALL       _fecha_mot4
;TCC_5.c,1503 :: 		}                                              //end if x_mot4==10
L_mot_aberto4320:
;TCC_5.c,1504 :: 		}                                                //end if comp!=0
0x020A	0xD003      	BRA         L_mot_aberto4321
L_mot_aberto4316:
;TCC_5.c,1507 :: 		open_bit4 = 0x00;                                //limpa bit de abertura
0x020C	0x0101      	MOVLB       1
0x020E	0x9B00      	BCF         _open_bit4, BitPos(_open_bit4+0), 1
;TCC_5.c,1508 :: 		close_bit4= 0x00;                                //limpa bit de fechamento
0x0210	0x9300      	BCF         _close_bit4, BitPos(_close_bit4+0), 1
;TCC_5.c,1509 :: 		}
L_mot_aberto4321:
;TCC_5.c,1511 :: 		}                                                 //end mot_aberto4()
L_end_mot_aberto4:
0x0212	0x0012      	RETURN      0
; end of _mot_aberto4
_mot_fechado4:
;TCC_5.c,1659 :: 		void mot_fechado4()
;TCC_5.c,1661 :: 		if(comp4!=0)                                      //se a quantidade de comprimidos à despejar
0x0214	0x0E00      	MOVLW       0
0x0216	0x0101      	MOVLB       1
0x0218	0x1908      	XORWF       _comp4+1, 0, 1
0x021A	0xE102      	BNZ         L__mot_fechado4631
0x021C	0x0E00      	MOVLW       0
0x021E	0x1907      	XORWF       _comp4, 0, 1
L__mot_fechado4631:
0x0220	0xE02B      	BZ          L_mot_fechado4337
;TCC_5.c,1663 :: 		if(x_mot4<20)                                   //se x_mot4 for menor que 10
0x0222	0x0E00      	MOVLW       0
0x0224	0x0100      	MOVLB       0
0x0226	0x5DEC      	SUBWF       _x_mot4+1, 0, 1
0x0228	0xE102      	BNZ         L__mot_fechado4632
0x022A	0x0E14      	MOVLW       20
0x022C	0x5DEB      	SUBWF       _x_mot4, 0, 1
L__mot_fechado4632:
0x022E	0xE218      	BC          L_mot_fechado4338
;TCC_5.c,1665 :: 		SM4=0;                                        //  ||
0x0230	0x9481      	BCF         PORTB, 2 
;TCC_5.c,1666 :: 		delay_us(18500);                              //  ||
0x0232	0x0E31      	MOVLW       49
0x0234	0x6E0C      	MOVWF       R12, 0
0x0236	0x0E0B      	MOVLW       11
0x0238	0x6E0D      	MOVWF       R13, 0
L_mot_fechado4339:
0x023A	0x2E0D      	DECFSZ      R13, 1, 0
0x023C	0xD7FE      	BRA         L_mot_fechado4339
0x023E	0x2E0C      	DECFSZ      R12, 1, 0
0x0240	0xD7FC      	BRA         L_mot_fechado4339
0x0242	0x0000      	NOP
0x0244	0x0000      	NOP
;TCC_5.c,1667 :: 		SM4=1;                                        //  ||
0x0246	0x8481      	BSF         PORTB, 2 
;TCC_5.c,1668 :: 		delay_us(1500);                               //  \/
0x0248	0x0E04      	MOVLW       4
0x024A	0x6E0C      	MOVWF       R12, 0
0x024C	0x0EE4      	MOVLW       228
0x024E	0x6E0D      	MOVWF       R13, 0
L_mot_fechado4340:
0x0250	0x2E0D      	DECFSZ      R13, 1, 0
0x0252	0xD7FE      	BRA         L_mot_fechado4340
0x0254	0x2E0C      	DECFSZ      R12, 1, 0
0x0256	0xD7FC      	BRA         L_mot_fechado4340
0x0258	0x0000      	NOP
;TCC_5.c,1669 :: 		SM4=0;                                        //leva o motor 4 para a posição inicial
0x025A	0x9481      	BCF         PORTB, 2 
;TCC_5.c,1670 :: 		x_mot4++;                                     //incrementa x_mot4
0x025C	0x4BEB      	INFSNZ      _x_mot4, 1, 1
0x025E	0x2BEC      	INCF        _x_mot4+1, 1, 1
;TCC_5.c,1672 :: 		}                                               //end if x_mot4<10
L_mot_fechado4338:
;TCC_5.c,1674 :: 		if(x_mot4==20)                                  //se x_mot4 for 10
0x0260	0x0E00      	MOVLW       0
0x0262	0x19EC      	XORWF       _x_mot4+1, 0, 1
0x0264	0xE102      	BNZ         L__mot_fechado4633
0x0266	0x0E14      	MOVLW       20
0x0268	0x19EB      	XORWF       _x_mot4, 0, 1
L__mot_fechado4633:
0x026A	0xE106      	BNZ         L_mot_fechado4341
;TCC_5.c,1676 :: 		abre_mot4();                                 //define os bit de controle do motor para abrir
0x026C	0xDF84      	RCALL       _abre_mot4
;TCC_5.c,1677 :: 		comp4--;                                     //decrementa comp4
0x026E	0x0E01      	MOVLW       1
0x0270	0x0101      	MOVLB       1
0x0272	0x5F07      	SUBWF       _comp4, 1, 1
0x0274	0x0E00      	MOVLW       0
0x0276	0x5B08      	SUBWFB      _comp4+1, 1, 1
;TCC_5.c,1679 :: 		}                                             //end if x_mot4==10
L_mot_fechado4341:
;TCC_5.c,1681 :: 		}                                                //end if comp4!=0
L_mot_fechado4337:
;TCC_5.c,1683 :: 		}                                                 //end mot_fechado4()
L_end_mot_fechado4:
0x0278	0x0012      	RETURN      0
; end of _mot_fechado4
_mot_aberto2:
;TCC_5.c,1418 :: 		void mot_aberto2()
;TCC_5.c,1420 :: 		if(comp2!=0)                                      //se a quantidade de comprimidos a serem despejados
0x027A	0x0E00      	MOVLW       0
0x027C	0x0101      	MOVLB       1
0x027E	0x1904      	XORWF       _comp2+1, 0, 1
0x0280	0xE102      	BNZ         L__mot_aberto2603
0x0282	0x0E00      	MOVLW       0
0x0284	0x1903      	XORWF       _comp2, 0, 1
L__mot_aberto2603:
0x0286	0xE027      	BZ          L_mot_aberto2304
;TCC_5.c,1422 :: 		if(x_mot2<20)                                    //se x_mot2 for menor que 10...
0x0288	0x0E00      	MOVLW       0
0x028A	0x0100      	MOVLB       0
0x028C	0x5DF2      	SUBWF       _x_mot2+1, 0, 1
0x028E	0xE102      	BNZ         L__mot_aberto2604
0x0290	0x0E14      	MOVLW       20
0x0292	0x5DF1      	SUBWF       _x_mot2, 0, 1
L__mot_aberto2604:
0x0294	0xE218      	BC          L_mot_aberto2305
;TCC_5.c,1424 :: 		SM2=0;                                        //  ||
0x0296	0x9880      	BCF         PORTA, 4 
;TCC_5.c,1425 :: 		delay_us(18000);                              //  ||
0x0298	0x0E2F      	MOVLW       47
0x029A	0x6E0C      	MOVWF       R12, 0
0x029C	0x0EBF      	MOVLW       191
0x029E	0x6E0D      	MOVWF       R13, 0
L_mot_aberto2306:
0x02A0	0x2E0D      	DECFSZ      R13, 1, 0
0x02A2	0xD7FE      	BRA         L_mot_aberto2306
0x02A4	0x2E0C      	DECFSZ      R12, 1, 0
0x02A6	0xD7FC      	BRA         L_mot_aberto2306
0x02A8	0x0000      	NOP
0x02AA	0x0000      	NOP
;TCC_5.c,1426 :: 		SM2=1;                                        //  ||
0x02AC	0x8880      	BSF         PORTA, 4 
;TCC_5.c,1427 :: 		delay_us(2000);                               //  \/
0x02AE	0x0E06      	MOVLW       6
0x02B0	0x6E0C      	MOVWF       R12, 0
0x02B2	0x0E30      	MOVLW       48
0x02B4	0x6E0D      	MOVWF       R13, 0
L_mot_aberto2307:
0x02B6	0x2E0D      	DECFSZ      R13, 1, 0
0x02B8	0xD7FE      	BRA         L_mot_aberto2307
0x02BA	0x2E0C      	DECFSZ      R12, 1, 0
0x02BC	0xD7FC      	BRA         L_mot_aberto2307
0x02BE	0x0000      	NOP
;TCC_5.c,1428 :: 		SM2=0;                                        //liga motor 2 no sentido horário
0x02C0	0x9880      	BCF         PORTA, 4 
;TCC_5.c,1429 :: 		x_mot2 ++;                                    //incrementa x_mot2
0x02C2	0x4BF1      	INFSNZ      _x_mot2, 1, 1
0x02C4	0x2BF2      	INCF        _x_mot2+1, 1, 1
;TCC_5.c,1431 :: 		}                                               //end if x_mot2<10
L_mot_aberto2305:
;TCC_5.c,1433 :: 		if(x_mot2 == 20)                                //se x_mot2 for 10...
0x02C6	0x0E00      	MOVLW       0
0x02C8	0x19F2      	XORWF       _x_mot2+1, 0, 1
0x02CA	0xE102      	BNZ         L__mot_aberto2605
0x02CC	0x0E14      	MOVLW       20
0x02CE	0x19F1      	XORWF       _x_mot2, 0, 1
L__mot_aberto2605:
0x02D0	0xE101      	BNZ         L_mot_aberto2308
;TCC_5.c,1435 :: 		fecha_mot2();                                 //executa a configuração dos bits de controle do motor 2 para fechar
0x02D2	0xDF58      	RCALL       _fecha_mot2
;TCC_5.c,1437 :: 		}                                              //end if x_mot2==10
L_mot_aberto2308:
;TCC_5.c,1438 :: 		}                                                //end if comp!=0
0x02D4	0xD004      	BRA         L_mot_aberto2309
L_mot_aberto2304:
;TCC_5.c,1441 :: 		open_bit2 = 0x00;                                //limpa bit de abertura
0x02D6	0x0101      	MOVLB       1
0x02D8	0x9700      	BCF         _open_bit2, BitPos(_open_bit2+0), 1
;TCC_5.c,1442 :: 		close_bit2= 0x00;                                //limpa bit de fechamento
0x02DA	0x0100      	MOVLB       0
0x02DC	0x9FFF      	BCF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,1443 :: 		}
L_mot_aberto2309:
;TCC_5.c,1445 :: 		}                                                 //end mot_aberto2()
L_end_mot_aberto2:
0x02DE	0x0012      	RETURN      0
; end of _mot_aberto2
_mot_aberto3:
;TCC_5.c,1451 :: 		void mot_aberto3()
;TCC_5.c,1453 :: 		if(comp3!=0)                                     //se a quantidade de comprimidos a serem despejados
0x02E0	0x0E00      	MOVLW       0
0x02E2	0x0101      	MOVLB       1
0x02E4	0x1906      	XORWF       _comp3+1, 0, 1
0x02E6	0xE102      	BNZ         L__mot_aberto3607
0x02E8	0x0E00      	MOVLW       0
0x02EA	0x1905      	XORWF       _comp3, 0, 1
L__mot_aberto3607:
0x02EC	0xE027      	BZ          L_mot_aberto3310
;TCC_5.c,1455 :: 		if(x_mot3<20)                                    //se x_mot3 for menor que 10...
0x02EE	0x0E00      	MOVLW       0
0x02F0	0x0100      	MOVLB       0
0x02F2	0x5DEA      	SUBWF       _x_mot3+1, 0, 1
0x02F4	0xE102      	BNZ         L__mot_aberto3608
0x02F6	0x0E14      	MOVLW       20
0x02F8	0x5DE9      	SUBWF       _x_mot3, 0, 1
L__mot_aberto3608:
0x02FA	0xE218      	BC          L_mot_aberto3311
;TCC_5.c,1457 :: 		SM3=0;                                        //  ||
0x02FC	0x9A80      	BCF         PORTA, 5 
;TCC_5.c,1458 :: 		delay_us(18000);                              //  ||
0x02FE	0x0E2F      	MOVLW       47
0x0300	0x6E0C      	MOVWF       R12, 0
0x0302	0x0EBF      	MOVLW       191
0x0304	0x6E0D      	MOVWF       R13, 0
L_mot_aberto3312:
0x0306	0x2E0D      	DECFSZ      R13, 1, 0
0x0308	0xD7FE      	BRA         L_mot_aberto3312
0x030A	0x2E0C      	DECFSZ      R12, 1, 0
0x030C	0xD7FC      	BRA         L_mot_aberto3312
0x030E	0x0000      	NOP
0x0310	0x0000      	NOP
;TCC_5.c,1459 :: 		SM3=1;                                        //  ||
0x0312	0x8A80      	BSF         PORTA, 5 
;TCC_5.c,1460 :: 		delay_us(2000);                               //  \/
0x0314	0x0E06      	MOVLW       6
0x0316	0x6E0C      	MOVWF       R12, 0
0x0318	0x0E30      	MOVLW       48
0x031A	0x6E0D      	MOVWF       R13, 0
L_mot_aberto3313:
0x031C	0x2E0D      	DECFSZ      R13, 1, 0
0x031E	0xD7FE      	BRA         L_mot_aberto3313
0x0320	0x2E0C      	DECFSZ      R12, 1, 0
0x0322	0xD7FC      	BRA         L_mot_aberto3313
0x0324	0x0000      	NOP
;TCC_5.c,1461 :: 		SM3=0;                                        // liga motor 1 no sentido horário
0x0326	0x9A80      	BCF         PORTA, 5 
;TCC_5.c,1462 :: 		x_mot3 ++;                                    //incrementa x_mot3
0x0328	0x4BE9      	INFSNZ      _x_mot3, 1, 1
0x032A	0x2BEA      	INCF        _x_mot3+1, 1, 1
;TCC_5.c,1464 :: 		}                                               //end if x_mot3<10
L_mot_aberto3311:
;TCC_5.c,1466 :: 		if(x_mot3 == 20)                                //se x_mot3 for 10...
0x032C	0x0E00      	MOVLW       0
0x032E	0x19EA      	XORWF       _x_mot3+1, 0, 1
0x0330	0xE102      	BNZ         L__mot_aberto3609
0x0332	0x0E14      	MOVLW       20
0x0334	0x19E9      	XORWF       _x_mot3, 0, 1
L__mot_aberto3609:
0x0336	0xE101      	BNZ         L_mot_aberto3314
;TCC_5.c,1468 :: 		fecha_mot3();                                 //executa a configuração dos bits de controle do motor 3 para fechar
0x0338	0xDF17      	RCALL       _fecha_mot3
;TCC_5.c,1470 :: 		}                                              //end if x_mot3==10
L_mot_aberto3314:
;TCC_5.c,1471 :: 		}                                                //end if comp!=0
0x033A	0xD004      	BRA         L_mot_aberto3315
L_mot_aberto3310:
;TCC_5.c,1474 :: 		open_bit3 = 0x00;                               //limpa bit de abertura
0x033C	0x0101      	MOVLB       1
0x033E	0x9500      	BCF         _open_bit3, BitPos(_open_bit3+0), 1
;TCC_5.c,1475 :: 		close_bit3= 0x00;                               //limpa bit de fechamento
0x0340	0x0100      	MOVLB       0
0x0342	0x9DFF      	BCF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,1476 :: 		}
L_mot_aberto3315:
;TCC_5.c,1478 :: 		}                                                 //end mot_aberto3()
L_end_mot_aberto3:
0x0344	0x0012      	RETURN      0
; end of _mot_aberto3
_mot_fechado3:
;TCC_5.c,1629 :: 		void mot_fechado3()
;TCC_5.c,1631 :: 		if(comp3!=0)                                      //se a quantidade de comprimidos à despejar
0x0346	0x0E00      	MOVLW       0
0x0348	0x0101      	MOVLB       1
0x034A	0x1906      	XORWF       _comp3+1, 0, 1
0x034C	0xE102      	BNZ         L__mot_fechado3627
0x034E	0x0E00      	MOVLW       0
0x0350	0x1905      	XORWF       _comp3, 0, 1
L__mot_fechado3627:
0x0352	0xE02B      	BZ          L_mot_fechado3332
;TCC_5.c,1633 :: 		if(x_mot3<20)                                   //se x_mot3 for menor que 10
0x0354	0x0E00      	MOVLW       0
0x0356	0x0100      	MOVLB       0
0x0358	0x5DEA      	SUBWF       _x_mot3+1, 0, 1
0x035A	0xE102      	BNZ         L__mot_fechado3628
0x035C	0x0E14      	MOVLW       20
0x035E	0x5DE9      	SUBWF       _x_mot3, 0, 1
L__mot_fechado3628:
0x0360	0xE218      	BC          L_mot_fechado3333
;TCC_5.c,1635 :: 		SM3=0;                                        //  ||
0x0362	0x9A80      	BCF         PORTA, 5 
;TCC_5.c,1636 :: 		delay_us(18500);                              //  ||
0x0364	0x0E31      	MOVLW       49
0x0366	0x6E0C      	MOVWF       R12, 0
0x0368	0x0E0B      	MOVLW       11
0x036A	0x6E0D      	MOVWF       R13, 0
L_mot_fechado3334:
0x036C	0x2E0D      	DECFSZ      R13, 1, 0
0x036E	0xD7FE      	BRA         L_mot_fechado3334
0x0370	0x2E0C      	DECFSZ      R12, 1, 0
0x0372	0xD7FC      	BRA         L_mot_fechado3334
0x0374	0x0000      	NOP
0x0376	0x0000      	NOP
;TCC_5.c,1637 :: 		SM3=1;                                        //  ||
0x0378	0x8A80      	BSF         PORTA, 5 
;TCC_5.c,1638 :: 		delay_us(1500);                               //  \/
0x037A	0x0E04      	MOVLW       4
0x037C	0x6E0C      	MOVWF       R12, 0
0x037E	0x0EE4      	MOVLW       228
0x0380	0x6E0D      	MOVWF       R13, 0
L_mot_fechado3335:
0x0382	0x2E0D      	DECFSZ      R13, 1, 0
0x0384	0xD7FE      	BRA         L_mot_fechado3335
0x0386	0x2E0C      	DECFSZ      R12, 1, 0
0x0388	0xD7FC      	BRA         L_mot_fechado3335
0x038A	0x0000      	NOP
;TCC_5.c,1639 :: 		SM3=0;                                        //leva o motor 3 para a posição inicial
0x038C	0x9A80      	BCF         PORTA, 5 
;TCC_5.c,1640 :: 		x_mot3++;                                     //incrementa x_mot3
0x038E	0x4BE9      	INFSNZ      _x_mot3, 1, 1
0x0390	0x2BEA      	INCF        _x_mot3+1, 1, 1
;TCC_5.c,1642 :: 		}                                               //end if x_mot2<10
L_mot_fechado3333:
;TCC_5.c,1644 :: 		if(x_mot3==20)                                  //se x_mot3 for 10
0x0392	0x0E00      	MOVLW       0
0x0394	0x19EA      	XORWF       _x_mot3+1, 0, 1
0x0396	0xE102      	BNZ         L__mot_fechado3629
0x0398	0x0E14      	MOVLW       20
0x039A	0x19E9      	XORWF       _x_mot3, 0, 1
L__mot_fechado3629:
0x039C	0xE106      	BNZ         L_mot_fechado3336
;TCC_5.c,1646 :: 		abre_mot3();                                 //define os bit de controle do motor para abrir
0x039E	0xDEDD      	RCALL       _abre_mot3
;TCC_5.c,1647 :: 		comp3--;                                     //decrementa comp3
0x03A0	0x0E01      	MOVLW       1
0x03A2	0x0101      	MOVLB       1
0x03A4	0x5F05      	SUBWF       _comp3, 1, 1
0x03A6	0x0E00      	MOVLW       0
0x03A8	0x5B06      	SUBWFB      _comp3+1, 1, 1
;TCC_5.c,1649 :: 		}                                             //end if x_mot3==10
L_mot_fechado3336:
;TCC_5.c,1651 :: 		}                                                //end if comp3!=0
L_mot_fechado3332:
;TCC_5.c,1653 :: 		}                                                 //end mot_fechado3()
L_end_mot_fechado3:
0x03AA	0x0012      	RETURN      0
; end of _mot_fechado3
_mot_fechado:
;TCC_5.c,1569 :: 		void mot_fechado()
;TCC_5.c,1571 :: 		if(comp!=0)                                      //se a quantidade de comprimidos à despejar
0x03AC	0x0E00      	MOVLW       0
0x03AE	0x0101      	MOVLB       1
0x03B0	0x1902      	XORWF       _comp+1, 0, 1
0x03B2	0xE102      	BNZ         L__mot_fechado619
0x03B4	0x0E00      	MOVLW       0
0x03B6	0x1901      	XORWF       _comp, 0, 1
L__mot_fechado619:
0x03B8	0xE02B      	BZ          L_mot_fechado322
;TCC_5.c,1573 :: 		if(x_mot<20)                                     //se x_mot for menor que 10
0x03BA	0x0E00      	MOVLW       0
0x03BC	0x0100      	MOVLB       0
0x03BE	0x5DE4      	SUBWF       _x_mot+1, 0, 1
0x03C0	0xE102      	BNZ         L__mot_fechado620
0x03C2	0x0E14      	MOVLW       20
0x03C4	0x5DE3      	SUBWF       _x_mot, 0, 1
L__mot_fechado620:
0x03C6	0xE218      	BC          L_mot_fechado323
;TCC_5.c,1575 :: 		SM=0;                                         //  ||
0x03C8	0x9280      	BCF         PORTA, 1 
;TCC_5.c,1576 :: 		delay_us(18500);                              //  ||
0x03CA	0x0E31      	MOVLW       49
0x03CC	0x6E0C      	MOVWF       R12, 0
0x03CE	0x0E0B      	MOVLW       11
0x03D0	0x6E0D      	MOVWF       R13, 0
L_mot_fechado324:
0x03D2	0x2E0D      	DECFSZ      R13, 1, 0
0x03D4	0xD7FE      	BRA         L_mot_fechado324
0x03D6	0x2E0C      	DECFSZ      R12, 1, 0
0x03D8	0xD7FC      	BRA         L_mot_fechado324
0x03DA	0x0000      	NOP
0x03DC	0x0000      	NOP
;TCC_5.c,1577 :: 		SM=1;                                         //  ||
0x03DE	0x8280      	BSF         PORTA, 1 
;TCC_5.c,1578 :: 		delay_us(1500);                               //  \/
0x03E0	0x0E04      	MOVLW       4
0x03E2	0x6E0C      	MOVWF       R12, 0
0x03E4	0x0EE4      	MOVLW       228
0x03E6	0x6E0D      	MOVWF       R13, 0
L_mot_fechado325:
0x03E8	0x2E0D      	DECFSZ      R13, 1, 0
0x03EA	0xD7FE      	BRA         L_mot_fechado325
0x03EC	0x2E0C      	DECFSZ      R12, 1, 0
0x03EE	0xD7FC      	BRA         L_mot_fechado325
0x03F0	0x0000      	NOP
;TCC_5.c,1579 :: 		SM=0;                                         //leva o motor para a posição inicial
0x03F2	0x9280      	BCF         PORTA, 1 
;TCC_5.c,1580 :: 		x_mot++;                                      //incrementa x_mot
0x03F4	0x4BE3      	INFSNZ      _x_mot, 1, 1
0x03F6	0x2BE4      	INCF        _x_mot+1, 1, 1
;TCC_5.c,1582 :: 		}                                               //end if x_mot<10
L_mot_fechado323:
;TCC_5.c,1584 :: 		if(x_mot==20)                                   //se x_mot for 10
0x03F8	0x0E00      	MOVLW       0
0x03FA	0x19E4      	XORWF       _x_mot+1, 0, 1
0x03FC	0xE102      	BNZ         L__mot_fechado621
0x03FE	0x0E14      	MOVLW       20
0x0400	0x19E3      	XORWF       _x_mot, 0, 1
L__mot_fechado621:
0x0402	0xE106      	BNZ         L_mot_fechado326
;TCC_5.c,1586 :: 		abre_mot();                                  //define os bit de controle do motor para abrir
0x0404	0xDE94      	RCALL       _abre_mot
;TCC_5.c,1587 :: 		comp--;                                      //decrementa comp
0x0406	0x0E01      	MOVLW       1
0x0408	0x0101      	MOVLB       1
0x040A	0x5F01      	SUBWF       _comp, 1, 1
0x040C	0x0E00      	MOVLW       0
0x040E	0x5B02      	SUBWFB      _comp+1, 1, 1
;TCC_5.c,1589 :: 		}                                             //end if x_mot==10
L_mot_fechado326:
;TCC_5.c,1591 :: 		}                                                //end if comp!=0
L_mot_fechado322:
;TCC_5.c,1593 :: 		}                                                 //end mot_fechado
L_end_mot_fechado:
0x0410	0x0012      	RETURN      0
; end of _mot_fechado
_mot_fechado2:
;TCC_5.c,1599 :: 		void mot_fechado2()
;TCC_5.c,1601 :: 		if(comp2!=0)                                      //se a quantidade de comprimidos à despejar
0x0412	0x0E00      	MOVLW       0
0x0414	0x0101      	MOVLB       1
0x0416	0x1904      	XORWF       _comp2+1, 0, 1
0x0418	0xE102      	BNZ         L__mot_fechado2623
0x041A	0x0E00      	MOVLW       0
0x041C	0x1903      	XORWF       _comp2, 0, 1
L__mot_fechado2623:
0x041E	0xE02B      	BZ          L_mot_fechado2327
;TCC_5.c,1603 :: 		if(x_mot2<20)                                   //se x_mot2 for menor que 10
0x0420	0x0E00      	MOVLW       0
0x0422	0x0100      	MOVLB       0
0x0424	0x5DF2      	SUBWF       _x_mot2+1, 0, 1
0x0426	0xE102      	BNZ         L__mot_fechado2624
0x0428	0x0E14      	MOVLW       20
0x042A	0x5DF1      	SUBWF       _x_mot2, 0, 1
L__mot_fechado2624:
0x042C	0xE218      	BC          L_mot_fechado2328
;TCC_5.c,1605 :: 		SM2=0;                                        //  ||
0x042E	0x9880      	BCF         PORTA, 4 
;TCC_5.c,1606 :: 		delay_us(18500);                              //  ||
0x0430	0x0E31      	MOVLW       49
0x0432	0x6E0C      	MOVWF       R12, 0
0x0434	0x0E0B      	MOVLW       11
0x0436	0x6E0D      	MOVWF       R13, 0
L_mot_fechado2329:
0x0438	0x2E0D      	DECFSZ      R13, 1, 0
0x043A	0xD7FE      	BRA         L_mot_fechado2329
0x043C	0x2E0C      	DECFSZ      R12, 1, 0
0x043E	0xD7FC      	BRA         L_mot_fechado2329
0x0440	0x0000      	NOP
0x0442	0x0000      	NOP
;TCC_5.c,1607 :: 		SM2=1;                                        //  ||
0x0444	0x8880      	BSF         PORTA, 4 
;TCC_5.c,1608 :: 		delay_us(1500);                               //  \/
0x0446	0x0E04      	MOVLW       4
0x0448	0x6E0C      	MOVWF       R12, 0
0x044A	0x0EE4      	MOVLW       228
0x044C	0x6E0D      	MOVWF       R13, 0
L_mot_fechado2330:
0x044E	0x2E0D      	DECFSZ      R13, 1, 0
0x0450	0xD7FE      	BRA         L_mot_fechado2330
0x0452	0x2E0C      	DECFSZ      R12, 1, 0
0x0454	0xD7FC      	BRA         L_mot_fechado2330
0x0456	0x0000      	NOP
;TCC_5.c,1609 :: 		SM2=0;                                        //leva o motor 2 para a posição inicial
0x0458	0x9880      	BCF         PORTA, 4 
;TCC_5.c,1610 :: 		x_mot2++;                                     //incrementa x_mot2
0x045A	0x4BF1      	INFSNZ      _x_mot2, 1, 1
0x045C	0x2BF2      	INCF        _x_mot2+1, 1, 1
;TCC_5.c,1612 :: 		}                                               //end if x_mot2<10
L_mot_fechado2328:
;TCC_5.c,1614 :: 		if(x_mot2==20)                                  //se x_mot2 for 10
0x045E	0x0E00      	MOVLW       0
0x0460	0x19F2      	XORWF       _x_mot2+1, 0, 1
0x0462	0xE102      	BNZ         L__mot_fechado2625
0x0464	0x0E14      	MOVLW       20
0x0466	0x19F1      	XORWF       _x_mot2, 0, 1
L__mot_fechado2625:
0x0468	0xE106      	BNZ         L_mot_fechado2331
;TCC_5.c,1616 :: 		abre_mot2();                                 //define os bit de controle do motor para abrir
0x046A	0xDE70      	RCALL       _abre_mot2
;TCC_5.c,1617 :: 		comp2--;                                     //decrementa comp2
0x046C	0x0E01      	MOVLW       1
0x046E	0x0101      	MOVLB       1
0x0470	0x5F03      	SUBWF       _comp2, 1, 1
0x0472	0x0E00      	MOVLW       0
0x0474	0x5B04      	SUBWFB      _comp2+1, 1, 1
;TCC_5.c,1619 :: 		}                                             //end if x_mot2==10
L_mot_fechado2331:
;TCC_5.c,1621 :: 		}                                               //end if comp!=0
L_mot_fechado2327:
;TCC_5.c,1623 :: 		}                                                 //end mot_fechado2()
L_end_mot_fechado2:
0x0476	0x0012      	RETURN      0
; end of _mot_fechado2
_mot_aberto:
;TCC_5.c,1383 :: 		void mot_aberto()
;TCC_5.c,1385 :: 		if(comp!=0)                                      //se a quantidade de comprimidos a serem despejados
0x0478	0x0E00      	MOVLW       0
0x047A	0x0101      	MOVLB       1
0x047C	0x1902      	XORWF       _comp+1, 0, 1
0x047E	0xE102      	BNZ         L__mot_aberto599
0x0480	0x0E00      	MOVLW       0
0x0482	0x1901      	XORWF       _comp, 0, 1
L__mot_aberto599:
0x0484	0xE027      	BZ          L_mot_aberto298
;TCC_5.c,1388 :: 		if(x_mot<20)                                     //se x_mot for menor que 10...
0x0486	0x0E00      	MOVLW       0
0x0488	0x0100      	MOVLB       0
0x048A	0x5DE4      	SUBWF       _x_mot+1, 0, 1
0x048C	0xE102      	BNZ         L__mot_aberto600
0x048E	0x0E14      	MOVLW       20
0x0490	0x5DE3      	SUBWF       _x_mot, 0, 1
L__mot_aberto600:
0x0492	0xE218      	BC          L_mot_aberto299
;TCC_5.c,1390 :: 		SM=0;                                         //  ||
0x0494	0x9280      	BCF         PORTA, 1 
;TCC_5.c,1391 :: 		delay_us(18000);                              //  ||
0x0496	0x0E2F      	MOVLW       47
0x0498	0x6E0C      	MOVWF       R12, 0
0x049A	0x0EBF      	MOVLW       191
0x049C	0x6E0D      	MOVWF       R13, 0
L_mot_aberto300:
0x049E	0x2E0D      	DECFSZ      R13, 1, 0
0x04A0	0xD7FE      	BRA         L_mot_aberto300
0x04A2	0x2E0C      	DECFSZ      R12, 1, 0
0x04A4	0xD7FC      	BRA         L_mot_aberto300
0x04A6	0x0000      	NOP
0x04A8	0x0000      	NOP
;TCC_5.c,1392 :: 		SM=1;                                         //  ||
0x04AA	0x8280      	BSF         PORTA, 1 
;TCC_5.c,1393 :: 		delay_us(2000);                               //  \/
0x04AC	0x0E06      	MOVLW       6
0x04AE	0x6E0C      	MOVWF       R12, 0
0x04B0	0x0E30      	MOVLW       48
0x04B2	0x6E0D      	MOVWF       R13, 0
L_mot_aberto301:
0x04B4	0x2E0D      	DECFSZ      R13, 1, 0
0x04B6	0xD7FE      	BRA         L_mot_aberto301
0x04B8	0x2E0C      	DECFSZ      R12, 1, 0
0x04BA	0xD7FC      	BRA         L_mot_aberto301
0x04BC	0x0000      	NOP
;TCC_5.c,1394 :: 		SM=0;                                         // liga motor 1 no sentido horário
0x04BE	0x9280      	BCF         PORTA, 1 
;TCC_5.c,1395 :: 		x_mot ++;                                     //incrementa x_mot
0x04C0	0x4BE3      	INFSNZ      _x_mot, 1, 1
0x04C2	0x2BE4      	INCF        _x_mot+1, 1, 1
;TCC_5.c,1397 :: 		}                                               //end if x_mot<10
L_mot_aberto299:
;TCC_5.c,1399 :: 		if(x_mot == 20)                                 //se x_mot for 10...
0x04C4	0x0E00      	MOVLW       0
0x04C6	0x19E4      	XORWF       _x_mot+1, 0, 1
0x04C8	0xE102      	BNZ         L__mot_aberto601
0x04CA	0x0E14      	MOVLW       20
0x04CC	0x19E3      	XORWF       _x_mot, 0, 1
L__mot_aberto601:
0x04CE	0xE101      	BNZ         L_mot_aberto302
;TCC_5.c,1401 :: 		fecha_mot();                                  //executa a configuração dos bits de controle do motor 1 para fechar
0x04D0	0xDE67      	RCALL       _fecha_mot
;TCC_5.c,1403 :: 		}                                              //end if x_mot==10
L_mot_aberto302:
;TCC_5.c,1405 :: 		}                                                //end if comp!=0
0x04D2	0xD004      	BRA         L_mot_aberto303
L_mot_aberto298:
0x04D4	0x0100      	MOVLB       0
;TCC_5.c,1408 :: 		open_bit = 0x00;                                //limpa bit de abertura
0x04D6	0x9BFF      	BCF         _open_bit, BitPos(_open_bit+0), 1
;TCC_5.c,1409 :: 		close_bit= 0x00;                                //limpa bit de fechamento
0x04D8	0x0101      	MOVLB       1
0x04DA	0x9900      	BCF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,1410 :: 		}
L_mot_aberto303:
;TCC_5.c,1412 :: 		}                                                 //end mot_aberto()
L_end_mot_aberto:
0x04DC	0x0012      	RETURN      0
; end of _mot_aberto
_Lcd_Chr:
;__Lib_Lcd.c,65 :: 		
;__Lib_Lcd.c,66 :: 		
0x04DE	0xD010      	BRA         L_Lcd_Chr4
;__Lib_Lcd.c,67 :: 		
L_Lcd_Chr6:
0x04E0	0x0E80      	MOVLW       128
0x04E2	0x0101      	MOVLB       1
0x04E4	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x04E6	0xD01A      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,68 :: 		
L_Lcd_Chr7:
0x04E8	0x0EC0      	MOVLW       192
0x04EA	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x04EC	0xD017      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,69 :: 		
L_Lcd_Chr8:
0x04EE	0x0E94      	MOVLW       148
0x04F0	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x04F2	0xD014      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,70 :: 		
L_Lcd_Chr9:
0x04F4	0x0ED4      	MOVLW       212
0x04F6	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x04F8	0xD011      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,71 :: 		
L_Lcd_Chr10:
0x04FA	0x0E80      	MOVLW       128
0x04FC	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
;__Lib_Lcd.c,72 :: 		
0x04FE	0xD00E      	BRA         L_Lcd_Chr5
L_Lcd_Chr4:
0x0500	0x0101      	MOVLB       1
0x0502	0x511F      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x0504	0x0A01      	XORLW       1
0x0506	0xE0EC      	BZ          L_Lcd_Chr6
0x0508	0x511F      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x050A	0x0A02      	XORLW       2
0x050C	0xE0ED      	BZ          L_Lcd_Chr7
0x050E	0x511F      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x0510	0x0A03      	XORLW       3
0x0512	0xE0ED      	BZ          L_Lcd_Chr8
0x0514	0x511F      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x0516	0x0A04      	XORLW       4
0x0518	0xE0ED      	BZ          L_Lcd_Chr9
0x051A	0xD7EF      	BRA         L_Lcd_Chr10
L_Lcd_Chr5:
;__Lib_Lcd.c,74 :: 		
0x051C	0x0520      	DECF        FARG_Lcd_Chr_column, 0, 1
0x051E	0x6E00      	MOVWF       R0 
0x0520	0x511F      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x0522	0x2600      	ADDWF       R0, 1 
0x0524	0xF11FC000  	MOVFF       R0, FARG_Lcd_Chr_row
;__Lib_Lcd.c,76 :: 		
0x0528	0x8D00      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,77 :: 		
0x052A	0xF125C000  	MOVFF       R0, FARG_Lcd_Cmd_out_char
0x052E	0xDDC0      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,79 :: 		
0x0530	0x9D00      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,80 :: 		
0x0532	0xF125C121  	MOVFF       FARG_Lcd_Chr_out_char, FARG_Lcd_Cmd_out_char
0x0536	0xDDBC      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,81 :: 		
0x0538	0x8D00      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,82 :: 		
L_end_Lcd_Chr:
0x053A	0x0012      	RETURN      0
; end of _Lcd_Chr
_Lcd_Out:
;__Lib_Lcd.c,184 :: 		
;__Lib_Lcd.c,187 :: 		
0x053C	0xD010      	BRA         L_Lcd_Out11
;__Lib_Lcd.c,188 :: 		
L_Lcd_Out13:
0x053E	0x0E80      	MOVLW       128
0x0540	0x0101      	MOVLB       1
0x0542	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x0544	0xD01A      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,189 :: 		
L_Lcd_Out14:
0x0546	0x0EC0      	MOVLW       192
0x0548	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x054A	0xD017      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,190 :: 		
L_Lcd_Out15:
0x054C	0x0E94      	MOVLW       148
0x054E	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x0550	0xD014      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,191 :: 		
L_Lcd_Out16:
0x0552	0x0ED4      	MOVLW       212
0x0554	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x0556	0xD011      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,192 :: 		
L_Lcd_Out17:
0x0558	0x0E80      	MOVLW       128
0x055A	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
;__Lib_Lcd.c,193 :: 		
0x055C	0xD00E      	BRA         L_Lcd_Out12
L_Lcd_Out11:
0x055E	0x0101      	MOVLB       1
0x0560	0x511F      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0562	0x0A01      	XORLW       1
0x0564	0xE0EC      	BZ          L_Lcd_Out13
0x0566	0x511F      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0568	0x0A02      	XORLW       2
0x056A	0xE0ED      	BZ          L_Lcd_Out14
0x056C	0x511F      	MOVF        FARG_Lcd_Out_row, 0, 1
0x056E	0x0A03      	XORLW       3
0x0570	0xE0ED      	BZ          L_Lcd_Out15
0x0572	0x511F      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0574	0x0A04      	XORLW       4
0x0576	0xE0ED      	BZ          L_Lcd_Out16
0x0578	0xD7EF      	BRA         L_Lcd_Out17
L_Lcd_Out12:
;__Lib_Lcd.c,194 :: 		
0x057A	0x0520      	DECF        FARG_Lcd_Out_column, 0, 1
0x057C	0x6E00      	MOVWF       R0 
0x057E	0x511F      	MOVF        FARG_Lcd_Out_row, 0, 1
0x0580	0x2600      	ADDWF       R0, 1 
0x0582	0xF11FC000  	MOVFF       R0, FARG_Lcd_Out_row
;__Lib_Lcd.c,196 :: 		
0x0586	0xF125C000  	MOVFF       R0, FARG_Lcd_Cmd_out_char
0x058A	0xDD92      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,197 :: 		
0x058C	0x9D00      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,198 :: 		
0x058E	0x6B23      	CLRF        Lcd_Out_i_L0, 1
;__Lib_Lcd.c,199 :: 		
L_Lcd_Out18:
0x0590	0x5123      	MOVF        Lcd_Out_i_L0, 0, 1
0x0592	0x2521      	ADDWF       FARG_Lcd_Out_text, 0, 1
0x0594	0x6EE9      	MOVWF       FSR0L 
0x0596	0x0E00      	MOVLW       0
0x0598	0x2122      	ADDWFC      FARG_Lcd_Out_text+1, 0, 1
0x059A	0x6EEA      	MOVWF       FSR0L+1 
0x059C	0x52EE      	MOVF        POSTINC0, 1 
0x059E	0xE00B      	BZ          L_Lcd_Out19
;__Lib_Lcd.c,200 :: 		
0x05A0	0x5123      	MOVF        Lcd_Out_i_L0, 0, 1
0x05A2	0x2521      	ADDWF       FARG_Lcd_Out_text, 0, 1
0x05A4	0x6EE9      	MOVWF       FSR0L 
0x05A6	0x0E00      	MOVLW       0
0x05A8	0x2122      	ADDWFC      FARG_Lcd_Out_text+1, 0, 1
0x05AA	0x6EEA      	MOVWF       FSR0L+1 
0x05AC	0xF124CFEE  	MOVFF       POSTINC0, FARG_Lcd_Chr_CP_out_char
0x05B0	0xDDC6      	RCALL       _Lcd_Chr_CP
0x05B2	0x2B23      	INCF        Lcd_Out_i_L0, 1, 1
0x05B4	0xD7ED      	BRA         L_Lcd_Out18
L_Lcd_Out19:
;__Lib_Lcd.c,201 :: 		
0x05B6	0x8D00      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,202 :: 		
L_end_Lcd_Out:
0x05B8	0x0012      	RETURN      0
; end of _Lcd_Out
_toca_som:
;TCC_5.c,1307 :: 		void toca_som()
;TCC_5.c,1309 :: 		if(temp_som>3) temp_som=0x00;                    //se temp_som for maior que 3, zera temp_som
0x05BA	0x0E00      	MOVLW       0
0x05BC	0x6E00      	MOVWF       R0 
0x05BE	0x0100      	MOVLB       0
0x05C0	0x51EE      	MOVF        _temp_som+1, 0, 1
0x05C2	0x5C00      	SUBWF       R0, 0 
0x05C4	0xE102      	BNZ         L__toca_som592
0x05C6	0x51ED      	MOVF        _temp_som, 0, 1
0x05C8	0x0803      	SUBLW       3
L__toca_som592:
0x05CA	0xE202      	BC          L_toca_som295
0x05CC	0x6BED      	CLRF        _temp_som, 1
0x05CE	0x6BEE      	CLRF        _temp_som+1, 1
L_toca_som295:
;TCC_5.c,1310 :: 		if(temp_som==3)                               //conta 300 milisegundos...
0x05D0	0x0E00      	MOVLW       0
0x05D2	0x19EE      	XORWF       _temp_som+1, 0, 1
0x05D4	0xE102      	BNZ         L__toca_som593
0x05D6	0x0E03      	MOVLW       3
0x05D8	0x19ED      	XORWF       _temp_som, 0, 1
L__toca_som593:
0x05DA	0xE10C      	BNZ         L_toca_som296
;TCC_5.c,1312 :: 		temp_som = 0x00;                             //zera temp_som
0x05DC	0x6BED      	CLRF        _temp_som, 1
0x05DE	0x6BEE      	CLRF        _temp_som+1, 1
;TCC_5.c,1313 :: 		SOM = ~SOM;                                  //inverte o estado do buzzer
0x05E0	0x7480      	BTG         PORTA, 2 
;TCC_5.c,1314 :: 		vezes++;                                     //incrementa vezes
0x05E2	0x4BEF      	INFSNZ      _vezes, 1, 1
0x05E4	0x2BF0      	INCF        _vezes+1, 1, 1
;TCC_5.c,1316 :: 		if(!ligar)                                   //se ligar for 0 (desligado)
0x05E6	0x0101      	MOVLB       1
0x05E8	0xB709      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x05EA	0xD004      	BRA         L_toca_som297
;TCC_5.c,1318 :: 		vezes = 0x00;                               //zera vezes
0x05EC	0x0100      	MOVLB       0
0x05EE	0x6BEF      	CLRF        _vezes, 1
0x05F0	0x6BF0      	CLRF        _vezes+1, 1
;TCC_5.c,1319 :: 		SOM   = 0x00;                               //desliga o buzzer
0x05F2	0x9480      	BCF         PORTA, 2 
;TCC_5.c,1321 :: 		}                                            //end if !ligar
L_toca_som297:
;TCC_5.c,1323 :: 		}                                             //end if temp_som==3
L_toca_som296:
;TCC_5.c,1325 :: 		}                                                 //end toca_som()
L_end_toca_som:
0x05F4	0x0012      	RETURN      0
; end of _toca_som
_Div_16X16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x05F6	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x05F8	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x05FA	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x05FC	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x05FE	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x0600	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x0602	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x0604	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x0606	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x0608	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x060A	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x060C	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x060E	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x0610	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x0612	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x0614	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x0616	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x0618	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x061A	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x061C	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x061E	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x0620	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x0622	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x0624	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x0626	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x0628	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16X16_U:
0x062A	0x0012      	RETURN      0
; end of _Div_16X16_U
_Mul_16X16_U:
;__Lib_Math.c,440 :: 		
;__Lib_Math.c,447 :: 		
0x062C	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,448 :: 		
0x062E	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,449 :: 		
0x0630	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,450 :: 		
0x0632	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,451 :: 		
0x0634	0x0204      	MULWF       R4, 0
;__Lib_Math.c,453 :: 		
0x0636	0xF009CFF4  	MOVFF       PRODH, R9
;__Lib_Math.c,454 :: 		
0x063A	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_Math.c,455 :: 		
0x063E	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,456 :: 		
0x0640	0x0205      	MULWF       R5, 0
;__Lib_Math.c,458 :: 		
0x0642	0xF00BCFF4  	MOVFF       PRODH, R11
;__Lib_Math.c,459 :: 		
0x0646	0xF00ACFF3  	MOVFF       PRODL, R10
;__Lib_Math.c,460 :: 		
0x064A	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,461 :: 		
0x064C	0x0205      	MULWF       R5, 0
;__Lib_Math.c,463 :: 		
0x064E	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,464 :: 		
0x0650	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,465 :: 		
0x0652	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,466 :: 		
0x0654	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,467 :: 		
0x0656	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,468 :: 		
0x0658	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,469 :: 		
0x065A	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,470 :: 		
0x065C	0x0204      	MULWF       R4, 0
;__Lib_Math.c,472 :: 		
0x065E	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,473 :: 		
0x0660	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,474 :: 		
0x0662	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,475 :: 		
0x0664	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,476 :: 		
0x0666	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,477 :: 		
0x0668	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,479 :: 		
0x066A	0xF000C008  	MOVFF       R8, R0
;__Lib_Math.c,480 :: 		
0x066E	0xF001C009  	MOVFF       R9, R1
;__Lib_Math.c,481 :: 		
0x0672	0xF002C00A  	MOVFF       R10, R2
;__Lib_Math.c,482 :: 		
0x0676	0xF003C00B  	MOVFF       R11, R3
;__Lib_Math.c,485 :: 		
L_end_Mul_16X16_U:
0x067A	0x0012      	RETURN      0
; end of _Mul_16X16_U
_num_un:
;TCC_5.c,816 :: 		void num_un()
;TCC_5.c,820 :: 		if(option==0)                                    //se option for 0 (dispenser n° 1 selecionado)
0x067C	0x0E00      	MOVLW       0
0x067E	0x0100      	MOVLB       0
0x0680	0x19F8      	XORWF       _option+1, 0, 1
0x0682	0xE102      	BNZ         L__num_un543
0x0684	0x0E00      	MOVLW       0
0x0686	0x19F7      	XORWF       _option, 0, 1
L__num_un543:
0x0688	0xE13F      	BNZ         L_num_un181
;TCC_5.c,822 :: 		dig2 = num/10;                                  //dígito 2 é igual a num dividido por 10
0x068A	0x0E0A      	MOVLW       10
0x068C	0x6E04      	MOVWF       R4 
0x068E	0x0E00      	MOVLW       0
0x0690	0x6E05      	MOVWF       R5 
0x0692	0xF000C111  	MOVFF       _num, R0
0x0696	0xF001C112  	MOVFF       _num+1, R1
0x069A	0xDFAD      	RCALL       _Div_16X16_U
0x069C	0xF11DC000  	MOVFF       R0, FLOC__num_un
0x06A0	0xF11EC001  	MOVFF       R1, FLOC__num_un+1
0x06A4	0x0E0A      	MOVLW       10
0x06A6	0x6E04      	MOVWF       R4 
0x06A8	0x0E00      	MOVLW       0
0x06AA	0x6E05      	MOVWF       R5 
0x06AC	0xF000C111  	MOVFF       _num, R0
0x06B0	0xF001C112  	MOVFF       _num+1, R1
0x06B4	0xDFA0      	RCALL       _Div_16X16_U
0x06B6	0xF000C008  	MOVFF       R8, R0
0x06BA	0xF001C009  	MOVFF       R9, R1
;TCC_5.c,823 :: 		dig1 = num%10;                                  //digito 1 é igual a sobra da divisão de num por 10
0x06BE	0xF11CC000  	MOVFF       R0, num_un_dig1_L0
;TCC_5.c,825 :: 		LCD_Chr(2,7,dig2+0x30);                         //soma digito 2 com 30 hexa para exibição no display
0x06C2	0x0E02      	MOVLW       2
0x06C4	0x0101      	MOVLB       1
0x06C6	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x06C8	0x0E07      	MOVLW       7
0x06CA	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x06CC	0x0E30      	MOVLW       48
0x06CE	0x251D      	ADDWF       FLOC__num_un, 0, 1
0x06D0	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x06D2	0xDF05      	RCALL       _Lcd_Chr
;TCC_5.c,826 :: 		LCD_Chr_Cp (dig1+0x30);                         //soma digito 1 com 30 hexa para exibição no display
0x06D4	0x0E30      	MOVLW       48
0x06D6	0x251C      	ADDWF       num_un_dig1_L0, 0, 1
0x06D8	0x6F24      	MOVWF       FARG_Lcd_Chr_CP_out_char, 1
0x06DA	0xDD31      	RCALL       _Lcd_Chr_CP
;TCC_5.c,828 :: 		if(!un) LCD_Out(2,10,hora);                      //se un for zero, exibe "hora"
0x06DC	0xBD09      	BTFSC       _un, BitPos(_un+0), 1
0x06DE	0xD009      	BRA         L_num_un182
0x06E0	0x0E02      	MOVLW       2
0x06E2	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x06E4	0x0E0A      	MOVLW       10
0x06E6	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x06E8	0x0E53      	MOVLW       _hora
0x06EA	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x06EC	0x0E00      	MOVLW       hi_addr(_hora)
0x06EE	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x06F0	0xDF25      	RCALL       _Lcd_Out
L_num_un182:
;TCC_5.c,830 :: 		if(un) LCD_Out(2,10,dia);                        //se un for um, exibe "dia"
0x06F2	0xAD09      	BTFSS       _un, BitPos(_un+0), 1
0x06F4	0xD009      	BRA         L_num_un183
0x06F6	0x0E02      	MOVLW       2
0x06F8	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x06FA	0x0E0A      	MOVLW       10
0x06FC	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x06FE	0x0E29      	MOVLW       _dia
0x0700	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x0702	0x0E00      	MOVLW       hi_addr(_dia)
0x0704	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0706	0xDF1A      	RCALL       _Lcd_Out
L_num_un183:
;TCC_5.c,832 :: 		}                                                //end if option==0
L_num_un181:
;TCC_5.c,835 :: 		if(option==1)                                    //se option for 1 (dispenser n°2 selecionado)
0x0708	0x0E00      	MOVLW       0
0x070A	0x0100      	MOVLB       0
0x070C	0x19F8      	XORWF       _option+1, 0, 1
0x070E	0xE102      	BNZ         L__num_un544
0x0710	0x0E01      	MOVLW       1
0x0712	0x19F7      	XORWF       _option, 0, 1
L__num_un544:
0x0714	0xE13F      	BNZ         L_num_un184
;TCC_5.c,837 :: 		dig2 = num2/10;                                 //digito 2 é igual a num2 dividido por 10
0x0716	0x0E0A      	MOVLW       10
0x0718	0x6E04      	MOVWF       R4 
0x071A	0x0E00      	MOVLW       0
0x071C	0x6E05      	MOVWF       R5 
0x071E	0xF000C10D  	MOVFF       _num2, R0
0x0722	0xF001C10E  	MOVFF       _num2+1, R1
0x0726	0xDF67      	RCALL       _Div_16X16_U
0x0728	0xF11DC000  	MOVFF       R0, FLOC__num_un
0x072C	0xF11EC001  	MOVFF       R1, FLOC__num_un+1
0x0730	0x0E0A      	MOVLW       10
0x0732	0x6E04      	MOVWF       R4 
0x0734	0x0E00      	MOVLW       0
0x0736	0x6E05      	MOVWF       R5 
0x0738	0xF000C10D  	MOVFF       _num2, R0
0x073C	0xF001C10E  	MOVFF       _num2+1, R1
0x0740	0xDF5A      	RCALL       _Div_16X16_U
0x0742	0xF000C008  	MOVFF       R8, R0
0x0746	0xF001C009  	MOVFF       R9, R1
;TCC_5.c,838 :: 		dig1 = num2%10;                                 //digito 1 é igual a sobra da divisão de num2 por 10
0x074A	0xF11CC000  	MOVFF       R0, num_un_dig1_L0
;TCC_5.c,840 :: 		LCD_Chr(2,7,dig2+0x30);                         //soma digito 2 com 30 hexa para exibição no display
0x074E	0x0E02      	MOVLW       2
0x0750	0x0101      	MOVLB       1
0x0752	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x0754	0x0E07      	MOVLW       7
0x0756	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x0758	0x0E30      	MOVLW       48
0x075A	0x251D      	ADDWF       FLOC__num_un, 0, 1
0x075C	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x075E	0xDEBF      	RCALL       _Lcd_Chr
;TCC_5.c,841 :: 		LCD_Chr_Cp (dig1+0x30);                         //soma digito 1 com 30 hexa para exibição no display
0x0760	0x0E30      	MOVLW       48
0x0762	0x251C      	ADDWF       num_un_dig1_L0, 0, 1
0x0764	0x6F24      	MOVWF       FARG_Lcd_Chr_CP_out_char, 1
0x0766	0xDCEB      	RCALL       _Lcd_Chr_CP
;TCC_5.c,843 :: 		if(!un2) LCD_Out(2,10,hora);                     //se un2 for zero, exibe "hora"
0x0768	0xBF09      	BTFSC       _un2, BitPos(_un2+0), 1
0x076A	0xD009      	BRA         L_num_un185
0x076C	0x0E02      	MOVLW       2
0x076E	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x0770	0x0E0A      	MOVLW       10
0x0772	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x0774	0x0E53      	MOVLW       _hora
0x0776	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x0778	0x0E00      	MOVLW       hi_addr(_hora)
0x077A	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x077C	0xDEDF      	RCALL       _Lcd_Out
L_num_un185:
;TCC_5.c,845 :: 		if(un2) LCD_Out(2,10,dia);                       //se un2 for um, exibe "dia"
0x077E	0xAF09      	BTFSS       _un2, BitPos(_un2+0), 1
0x0780	0xD009      	BRA         L_num_un186
0x0782	0x0E02      	MOVLW       2
0x0784	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x0786	0x0E0A      	MOVLW       10
0x0788	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x078A	0x0E29      	MOVLW       _dia
0x078C	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x078E	0x0E00      	MOVLW       hi_addr(_dia)
0x0790	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0792	0xDED4      	RCALL       _Lcd_Out
L_num_un186:
;TCC_5.c,847 :: 		}                                                //end if option==1
L_num_un184:
;TCC_5.c,849 :: 		if(option==2)                                    //se option for 2 (dispenser n°3 selecionado)
0x0794	0x0E00      	MOVLW       0
0x0796	0x0100      	MOVLB       0
0x0798	0x19F8      	XORWF       _option+1, 0, 1
0x079A	0xE102      	BNZ         L__num_un545
0x079C	0x0E02      	MOVLW       2
0x079E	0x19F7      	XORWF       _option, 0, 1
L__num_un545:
0x07A0	0xE13F      	BNZ         L_num_un187
;TCC_5.c,851 :: 		dig2 = num3/10;                                 //digito 2 é igual a num3 dividido por 10
0x07A2	0x0E0A      	MOVLW       10
0x07A4	0x6E04      	MOVWF       R4 
0x07A6	0x0E00      	MOVLW       0
0x07A8	0x6E05      	MOVWF       R5 
0x07AA	0xF000C10F  	MOVFF       _num3, R0
0x07AE	0xF001C110  	MOVFF       _num3+1, R1
0x07B2	0xDF21      	RCALL       _Div_16X16_U
0x07B4	0xF11DC000  	MOVFF       R0, FLOC__num_un
0x07B8	0xF11EC001  	MOVFF       R1, FLOC__num_un+1
0x07BC	0x0E0A      	MOVLW       10
0x07BE	0x6E04      	MOVWF       R4 
0x07C0	0x0E00      	MOVLW       0
0x07C2	0x6E05      	MOVWF       R5 
0x07C4	0xF000C10F  	MOVFF       _num3, R0
0x07C8	0xF001C110  	MOVFF       _num3+1, R1
0x07CC	0xDF14      	RCALL       _Div_16X16_U
0x07CE	0xF000C008  	MOVFF       R8, R0
0x07D2	0xF001C009  	MOVFF       R9, R1
;TCC_5.c,852 :: 		dig1 = num3%10;                                 //digito 1 é igual a sobra da divisão de num3 por 10
0x07D6	0xF11CC000  	MOVFF       R0, num_un_dig1_L0
;TCC_5.c,854 :: 		LCD_Chr(2,7,dig2+0x30);                         //soma digito 2 com 30 hexa para exibição no display
0x07DA	0x0E02      	MOVLW       2
0x07DC	0x0101      	MOVLB       1
0x07DE	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x07E0	0x0E07      	MOVLW       7
0x07E2	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x07E4	0x0E30      	MOVLW       48
0x07E6	0x251D      	ADDWF       FLOC__num_un, 0, 1
0x07E8	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x07EA	0xDE79      	RCALL       _Lcd_Chr
;TCC_5.c,855 :: 		LCD_Chr_Cp (dig1+0x30);                         //soma digito 1 com 30 hexa para exibição no display
0x07EC	0x0E30      	MOVLW       48
0x07EE	0x251C      	ADDWF       num_un_dig1_L0, 0, 1
0x07F0	0x6F24      	MOVWF       FARG_Lcd_Chr_CP_out_char, 1
0x07F2	0xDCA5      	RCALL       _Lcd_Chr_CP
;TCC_5.c,857 :: 		if(!un3) LCD_Out(2,10,hora);                     //se un3 for zero, exibe "hora"
0x07F4	0xB909      	BTFSC       _un3, BitPos(_un3+0), 1
0x07F6	0xD009      	BRA         L_num_un188
0x07F8	0x0E02      	MOVLW       2
0x07FA	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x07FC	0x0E0A      	MOVLW       10
0x07FE	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x0800	0x0E53      	MOVLW       _hora
0x0802	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x0804	0x0E00      	MOVLW       hi_addr(_hora)
0x0806	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0808	0xDE99      	RCALL       _Lcd_Out
L_num_un188:
;TCC_5.c,859 :: 		if(un3) LCD_Out(2,10,dia);                       //se un3 for um, exibe "dia"
0x080A	0xA909      	BTFSS       _un3, BitPos(_un3+0), 1
0x080C	0xD009      	BRA         L_num_un189
0x080E	0x0E02      	MOVLW       2
0x0810	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x0812	0x0E0A      	MOVLW       10
0x0814	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x0816	0x0E29      	MOVLW       _dia
0x0818	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x081A	0x0E00      	MOVLW       hi_addr(_dia)
0x081C	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x081E	0xDE8E      	RCALL       _Lcd_Out
L_num_un189:
;TCC_5.c,861 :: 		}                                                //end if option==2
L_num_un187:
;TCC_5.c,863 :: 		if(option==3)                                    //se option for 3 (dispenser n°4 selecionado)
0x0820	0x0E00      	MOVLW       0
0x0822	0x0100      	MOVLB       0
0x0824	0x19F8      	XORWF       _option+1, 0, 1
0x0826	0xE102      	BNZ         L__num_un546
0x0828	0x0E03      	MOVLW       3
0x082A	0x19F7      	XORWF       _option, 0, 1
L__num_un546:
0x082C	0xE13F      	BNZ         L_num_un190
;TCC_5.c,865 :: 		dig2 = num4/10;                                 //digito 2 é igual a num4 dividido por 10
0x082E	0x0E0A      	MOVLW       10
0x0830	0x6E04      	MOVWF       R4 
0x0832	0x0E00      	MOVLW       0
0x0834	0x6E05      	MOVWF       R5 
0x0836	0xF000C10A  	MOVFF       _num4, R0
0x083A	0xF001C10B  	MOVFF       _num4+1, R1
0x083E	0xDEDB      	RCALL       _Div_16X16_U
0x0840	0xF11DC000  	MOVFF       R0, FLOC__num_un
0x0844	0xF11EC001  	MOVFF       R1, FLOC__num_un+1
0x0848	0x0E0A      	MOVLW       10
0x084A	0x6E04      	MOVWF       R4 
0x084C	0x0E00      	MOVLW       0
0x084E	0x6E05      	MOVWF       R5 
0x0850	0xF000C10A  	MOVFF       _num4, R0
0x0854	0xF001C10B  	MOVFF       _num4+1, R1
0x0858	0xDECE      	RCALL       _Div_16X16_U
0x085A	0xF000C008  	MOVFF       R8, R0
0x085E	0xF001C009  	MOVFF       R9, R1
;TCC_5.c,866 :: 		dig1 = num4%10;                                 //digito 1 é igual a sobra da divisão de num4 por 10
0x0862	0xF11CC000  	MOVFF       R0, num_un_dig1_L0
;TCC_5.c,868 :: 		LCD_Chr(2,7,dig2+0x30);                         //soma digito 2 com 30 hexa para exibição no display
0x0866	0x0E02      	MOVLW       2
0x0868	0x0101      	MOVLB       1
0x086A	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x086C	0x0E07      	MOVLW       7
0x086E	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x0870	0x0E30      	MOVLW       48
0x0872	0x251D      	ADDWF       FLOC__num_un, 0, 1
0x0874	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0876	0xDE33      	RCALL       _Lcd_Chr
;TCC_5.c,869 :: 		LCD_Chr_Cp (dig1+0x30);                         //soma digito 1 com 30 hexa para exibição no display
0x0878	0x0E30      	MOVLW       48
0x087A	0x251C      	ADDWF       num_un_dig1_L0, 0, 1
0x087C	0x6F24      	MOVWF       FARG_Lcd_Chr_CP_out_char, 1
0x087E	0xDC5F      	RCALL       _Lcd_Chr_CP
;TCC_5.c,871 :: 		if(!un4) LCD_Out(2,10,hora);                     //se u4 for zero, exibe "hora"
0x0880	0xBB09      	BTFSC       _un4, BitPos(_un4+0), 1
0x0882	0xD009      	BRA         L_num_un191
0x0884	0x0E02      	MOVLW       2
0x0886	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x0888	0x0E0A      	MOVLW       10
0x088A	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x088C	0x0E53      	MOVLW       _hora
0x088E	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x0890	0x0E00      	MOVLW       hi_addr(_hora)
0x0892	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x0894	0xDE53      	RCALL       _Lcd_Out
L_num_un191:
;TCC_5.c,873 :: 		if(un4) LCD_Out(2,10,dia);                       //se un4 for um, exibe "dia"
0x0896	0xAB09      	BTFSS       _un4, BitPos(_un4+0), 1
0x0898	0xD009      	BRA         L_num_un192
0x089A	0x0E02      	MOVLW       2
0x089C	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x089E	0x0E0A      	MOVLW       10
0x08A0	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x08A2	0x0E29      	MOVLW       _dia
0x08A4	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x08A6	0x0E00      	MOVLW       hi_addr(_dia)
0x08A8	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x08AA	0xDE48      	RCALL       _Lcd_Out
L_num_un192:
;TCC_5.c,875 :: 		}                                                //end if option==3
L_num_un190:
;TCC_5.c,878 :: 		if(option==0)                                   //se dispenser n°1 selecionado
0x08AC	0x0E00      	MOVLW       0
0x08AE	0x0100      	MOVLB       0
0x08B0	0x19F8      	XORWF       _option+1, 0, 1
0x08B2	0xE102      	BNZ         L__num_un547
0x08B4	0x0E00      	MOVLW       0
0x08B6	0x19F7      	XORWF       _option, 0, 1
L__num_un547:
0x08B8	0xE109      	BNZ         L_num_un193
;TCC_5.c,881 :: 		LCD_Chr(2,15,digcomp+0x30);                    //soma digito 1 com 30 hexa para exibição no display
0x08BA	0x0E02      	MOVLW       2
0x08BC	0x0101      	MOVLB       1
0x08BE	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x08C0	0x0E0F      	MOVLW       15
0x08C2	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x08C4	0x0E30      	MOVLW       48
0x08C6	0x2517      	ADDWF       _qtd_comp, 0, 1
0x08C8	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x08CA	0xDE09      	RCALL       _Lcd_Chr
;TCC_5.c,882 :: 		}
L_num_un193:
;TCC_5.c,884 :: 		if(option==1)                                   //se dispenser n°2 selecionado
0x08CC	0x0E00      	MOVLW       0
0x08CE	0x0100      	MOVLB       0
0x08D0	0x19F8      	XORWF       _option+1, 0, 1
0x08D2	0xE102      	BNZ         L__num_un548
0x08D4	0x0E01      	MOVLW       1
0x08D6	0x19F7      	XORWF       _option, 0, 1
L__num_un548:
0x08D8	0xE109      	BNZ         L_num_un194
;TCC_5.c,887 :: 		LCD_Chr(2,15,digcomp+0x30);                    //soma digito 1 com 30 hexa para exibição no display
0x08DA	0x0E02      	MOVLW       2
0x08DC	0x0101      	MOVLB       1
0x08DE	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x08E0	0x0E0F      	MOVLW       15
0x08E2	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x08E4	0x0E30      	MOVLW       48
0x08E6	0x2519      	ADDWF       _qtd_comp2, 0, 1
0x08E8	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x08EA	0xDDF9      	RCALL       _Lcd_Chr
;TCC_5.c,888 :: 		}
L_num_un194:
;TCC_5.c,890 :: 		if(option==2)                                   //se dispenser n°3 selecionado
0x08EC	0x0E00      	MOVLW       0
0x08EE	0x0100      	MOVLB       0
0x08F0	0x19F8      	XORWF       _option+1, 0, 1
0x08F2	0xE102      	BNZ         L__num_un549
0x08F4	0x0E02      	MOVLW       2
0x08F6	0x19F7      	XORWF       _option, 0, 1
L__num_un549:
0x08F8	0xE109      	BNZ         L_num_un195
;TCC_5.c,893 :: 		LCD_Chr(2,15,digcomp+0x30);                    //soma digito 1 com 30 hexa para exibição no display
0x08FA	0x0E02      	MOVLW       2
0x08FC	0x0101      	MOVLB       1
0x08FE	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x0900	0x0E0F      	MOVLW       15
0x0902	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x0904	0x0E30      	MOVLW       48
0x0906	0x2513      	ADDWF       _qtd_comp3, 0, 1
0x0908	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x090A	0xDDE9      	RCALL       _Lcd_Chr
;TCC_5.c,894 :: 		}
L_num_un195:
;TCC_5.c,896 :: 		if(option==3)                                   //se dispenser n°4 selecionado
0x090C	0x0E00      	MOVLW       0
0x090E	0x0100      	MOVLB       0
0x0910	0x19F8      	XORWF       _option+1, 0, 1
0x0912	0xE102      	BNZ         L__num_un550
0x0914	0x0E03      	MOVLW       3
0x0916	0x19F7      	XORWF       _option, 0, 1
L__num_un550:
0x0918	0xE109      	BNZ         L_num_un196
;TCC_5.c,899 :: 		LCD_Chr(2,15,digcomp+0x30);                    //soma digito 1 com 30 hexa para exibição no display
0x091A	0x0E02      	MOVLW       2
0x091C	0x0101      	MOVLB       1
0x091E	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x0920	0x0E0F      	MOVLW       15
0x0922	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x0924	0x0E30      	MOVLW       48
0x0926	0x2515      	ADDWF       _qtd_comp4, 0, 1
0x0928	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x092A	0xDDD9      	RCALL       _Lcd_Chr
;TCC_5.c,900 :: 		}
L_num_un196:
;TCC_5.c,903 :: 		}                                                 //end num_un()
L_end_num_un:
0x092C	0x0012      	RETURN      0
; end of _num_un
_read_motbits:
;TCC_5.c,1690 :: 		void read_motbits()
;TCC_5.c,1692 :: 		if(!open_bit && !close_bit) atv_mot = 0x00;    //se os bits de abertura e fechamento do motor 1 forem 0,
0x092E	0x0100      	MOVLB       0
0x0930	0xBBFF      	BTFSC       _open_bit, BitPos(_open_bit+0), 1
0x0932	0xD004      	BRA         L_read_motbits344
0x0934	0x0101      	MOVLB       1
0x0936	0xB900      	BTFSC       _close_bit, BitPos(_close_bit+0), 1
0x0938	0xD001      	BRA         L_read_motbits344
L__read_motbits422:
0x093A	0x9100      	BCF         _atv_mot, BitPos(_atv_mot+0), 1
L_read_motbits344:
;TCC_5.c,1695 :: 		if(open_bit && !close_bit)                     //se o bit de abertura for 1 e o de fechamento for 0...
0x093C	0x0100      	MOVLB       0
0x093E	0xABFF      	BTFSS       _open_bit, BitPos(_open_bit+0), 1
0x0940	0xD004      	BRA         L_read_motbits347
0x0942	0x0101      	MOVLB       1
0x0944	0xB900      	BTFSC       _close_bit, BitPos(_close_bit+0), 1
0x0946	0xD001      	BRA         L_read_motbits347
L__read_motbits421:
;TCC_5.c,1697 :: 		mot_aberto();                                 //executa a abertura do motor 1
0x0948	0xDD97      	RCALL       _mot_aberto
;TCC_5.c,1699 :: 		}                                              //end if open_bit && !close_bit
L_read_motbits347:
;TCC_5.c,1701 :: 		if(!open_bit && close_bit)                     //se o bit de abertura for 0 e o de fechamento for 1...
0x094A	0x0100      	MOVLB       0
0x094C	0xBBFF      	BTFSC       _open_bit, BitPos(_open_bit+0), 1
0x094E	0xD004      	BRA         L_read_motbits350
0x0950	0x0101      	MOVLB       1
0x0952	0xA900      	BTFSS       _close_bit, BitPos(_close_bit+0), 1
0x0954	0xD001      	BRA         L_read_motbits350
L__read_motbits420:
;TCC_5.c,1703 :: 		mot_fechado();                                //executa o fechamento do motor 1
0x0956	0xDD2A      	RCALL       _mot_fechado
;TCC_5.c,1705 :: 		}                                              //end if !open_bit && close_bit
L_read_motbits350:
;TCC_5.c,1708 :: 		if(!open_bit2 && !close_bit2) atv_mot2 = 0x00; //se os bits de abertura e fechamento do motor 2 forem 0,
0x0958	0x0101      	MOVLB       1
0x095A	0xB700      	BTFSC       _open_bit2, BitPos(_open_bit2+0), 1
0x095C	0xD005      	BRA         L_read_motbits353
0x095E	0x0100      	MOVLB       0
0x0960	0xBFFF      	BTFSC       _close_bit2, BitPos(_close_bit2+0), 1
0x0962	0xD002      	BRA         L_read_motbits353
L__read_motbits419:
0x0964	0x0101      	MOVLB       1
0x0966	0x9109      	BCF         _atv_mot2, BitPos(_atv_mot2+0), 1
L_read_motbits353:
0x0968	0x0101      	MOVLB       1
;TCC_5.c,1711 :: 		if(open_bit2 && !close_bit2)                   //se o bit de abertura for 1 e o de fechamento for 0...
0x096A	0xA700      	BTFSS       _open_bit2, BitPos(_open_bit2+0), 1
0x096C	0xD004      	BRA         L_read_motbits356
0x096E	0x0100      	MOVLB       0
0x0970	0xBFFF      	BTFSC       _close_bit2, BitPos(_close_bit2+0), 1
0x0972	0xD001      	BRA         L_read_motbits356
L__read_motbits418:
;TCC_5.c,1713 :: 		mot_aberto2();                                //executa a abertura do motor 2
0x0974	0xDC82      	RCALL       _mot_aberto2
;TCC_5.c,1715 :: 		}                                              //end if open_bit2 && !close_bit2
L_read_motbits356:
;TCC_5.c,1717 :: 		if(!open_bit2 && close_bit2)                   //se o bit de abertura for 0 e o de fechamento for 1...
0x0976	0x0101      	MOVLB       1
0x0978	0xB700      	BTFSC       _open_bit2, BitPos(_open_bit2+0), 1
0x097A	0xD004      	BRA         L_read_motbits359
0x097C	0x0100      	MOVLB       0
0x097E	0xAFFF      	BTFSS       _close_bit2, BitPos(_close_bit2+0), 1
0x0980	0xD001      	BRA         L_read_motbits359
L__read_motbits417:
;TCC_5.c,1719 :: 		mot_fechado2();                               //executa o fechamento do motor 2
0x0982	0xDD47      	RCALL       _mot_fechado2
;TCC_5.c,1721 :: 		}                                              //end if !open_bit2 && close_bit2
L_read_motbits359:
;TCC_5.c,1724 :: 		if(!open_bit3 && !close_bit3) atv_mot3 = 0x00; //se os bits de abertura e fechamento do motor 3 forem 0,
0x0984	0x0101      	MOVLB       1
0x0986	0xB500      	BTFSC       _open_bit3, BitPos(_open_bit3+0), 1
0x0988	0xD005      	BRA         L_read_motbits362
0x098A	0x0100      	MOVLB       0
0x098C	0xBDFF      	BTFSC       _close_bit3, BitPos(_close_bit3+0), 1
0x098E	0xD002      	BRA         L_read_motbits362
L__read_motbits416:
0x0990	0x0101      	MOVLB       1
0x0992	0x9F00      	BCF         _atv_mot3, BitPos(_atv_mot3+0), 1
L_read_motbits362:
0x0994	0x0101      	MOVLB       1
;TCC_5.c,1727 :: 		if(open_bit3 && !close_bit3)                   //se o bit de abertura for 1 e o de fechamento for 0...
0x0996	0xA500      	BTFSS       _open_bit3, BitPos(_open_bit3+0), 1
0x0998	0xD004      	BRA         L_read_motbits365
0x099A	0x0100      	MOVLB       0
0x099C	0xBDFF      	BTFSC       _close_bit3, BitPos(_close_bit3+0), 1
0x099E	0xD001      	BRA         L_read_motbits365
L__read_motbits415:
;TCC_5.c,1729 :: 		mot_aberto3();                                //executa a abertura do motor 3
0x09A0	0xDC9F      	RCALL       _mot_aberto3
;TCC_5.c,1731 :: 		}                                              //end if open_bit3 && !close_bit3
L_read_motbits365:
;TCC_5.c,1733 :: 		if(!open_bit3 && close_bit3)                   //se o bit de abertura for 0 e o de fechamento for 1...
0x09A2	0x0101      	MOVLB       1
0x09A4	0xB500      	BTFSC       _open_bit3, BitPos(_open_bit3+0), 1
0x09A6	0xD004      	BRA         L_read_motbits368
0x09A8	0x0100      	MOVLB       0
0x09AA	0xADFF      	BTFSS       _close_bit3, BitPos(_close_bit3+0), 1
0x09AC	0xD001      	BRA         L_read_motbits368
L__read_motbits414:
;TCC_5.c,1735 :: 		mot_fechado3();                               //executa o fechamento do motor 3
0x09AE	0xDCCB      	RCALL       _mot_fechado3
;TCC_5.c,1737 :: 		}                                              //end if !open_bit3 && close_bit3
L_read_motbits368:
;TCC_5.c,1740 :: 		if(!open_bit4 && !close_bit4) atv_mot4 = 0x00; //se os bits de abertura e fechamento do motor 4 forem 0,
0x09B0	0x0101      	MOVLB       1
0x09B2	0xBB00      	BTFSC       _open_bit4, BitPos(_open_bit4+0), 1
0x09B4	0xD003      	BRA         L_read_motbits371
0x09B6	0xB300      	BTFSC       _close_bit4, BitPos(_close_bit4+0), 1
0x09B8	0xD001      	BRA         L_read_motbits371
L__read_motbits413:
0x09BA	0x9309      	BCF         _atv_mot4, BitPos(_atv_mot4+0), 1
L_read_motbits371:
;TCC_5.c,1743 :: 		if(open_bit4 && !close_bit4)                   //se o bit de abertura for 1 e o de fechamento for 0...
0x09BC	0xAB00      	BTFSS       _open_bit4, BitPos(_open_bit4+0), 1
0x09BE	0xD004      	BRA         L_read_motbits374
0x09C0	0xB300      	BTFSC       _close_bit4, BitPos(_close_bit4+0), 1
0x09C2	0xD002      	BRA         L_read_motbits374
L__read_motbits412:
;TCC_5.c,1745 :: 		mot_aberto4();                                //executa a abertura do motor 4
0x09C4	0xF000ECD8  	CALL        _mot_aberto4, 0
;TCC_5.c,1747 :: 		}                                              //end if open_bit4 && !close_bit4
L_read_motbits374:
;TCC_5.c,1749 :: 		if(!open_bit4 && close_bit4)                   //se o bit de abertura for 0 e o de fechamento for 1...
0x09C8	0x0101      	MOVLB       1
0x09CA	0xBB00      	BTFSC       _open_bit4, BitPos(_open_bit4+0), 1
0x09CC	0xD003      	BRA         L_read_motbits377
0x09CE	0xA300      	BTFSS       _close_bit4, BitPos(_close_bit4+0), 1
0x09D0	0xD001      	BRA         L_read_motbits377
L__read_motbits411:
;TCC_5.c,1751 :: 		mot_fechado4();                               //executa o fechamento do motor 4
0x09D2	0xDC20      	RCALL       _mot_fechado4
;TCC_5.c,1753 :: 		}                                              //end if !open_bit4 && close_bit4
L_read_motbits377:
;TCC_5.c,1755 :: 		}                                                 //end read_motbits()
L_end_read_motbits:
0x09D4	0x0012      	RETURN      0
; end of _read_motbits
_EEPROM_Write:
;__Lib_EEPROM_256.c,21 :: 		
;__Lib_EEPROM_256.c,24 :: 		
L_EEPROM_Write0:
0x09D6	0xA2A6      	BTFSS       EECON1, 1 
0x09D8	0xD002      	BRA         L_EEPROM_Write1
;__Lib_EEPROM_256.c,25 :: 		
0x09DA	0x0000      	NOP
0x09DC	0xD7FC      	BRA         L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM_256.c,26 :: 		
0x09DE	0x9CA6      	BCF         EECON1, 6 
;__Lib_EEPROM_256.c,27 :: 		
0x09E0	0xFFA9C11C  	MOVFF       FARG_EEPROM_Write_address, EEADR
;__Lib_EEPROM_256.c,28 :: 		
0x09E4	0xFFA8C11D  	MOVFF       FARG_EEPROM_Write_data_, EEDATA
;__Lib_EEPROM_256.c,29 :: 		
0x09E8	0x9EA6      	BCF         EECON1, 7 
;__Lib_EEPROM_256.c,30 :: 		
0x09EA	0x84A6      	BSF         EECON1, 2 
;__Lib_EEPROM_256.c,32 :: 		
0x09EC	0xF000CFF2  	MOVFF       INTCON, R0
;__Lib_EEPROM_256.c,35 :: 		
0x09F0	0x9EF2      	BCF         INTCON, 7 
;__Lib_EEPROM_256.c,36 :: 		
0x09F2	0x0E55      	MOVLW       85
0x09F4	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_256.c,37 :: 		
0x09F6	0x0EAA      	MOVLW       170
0x09F8	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_256.c,38 :: 		
0x09FA	0x82A6      	BSF         EECON1, 1 
;__Lib_EEPROM_256.c,42 :: 		
0x09FC	0xBE00      	BTFSC       R0, 7 
0x09FE	0xD002      	BRA         L__EEPROM_Write6
0x0A00	0x9EF2      	BCF         INTCON, 7 
0x0A02	0xD001      	BRA         L__EEPROM_Write7
L__EEPROM_Write6:
0x0A04	0x8EF2      	BSF         INTCON, 7 
L__EEPROM_Write7:
;__Lib_EEPROM_256.c,44 :: 		
0x0A06	0x94A6      	BCF         EECON1, 2 
;__Lib_EEPROM_256.c,46 :: 		
L_EEPROM_Write2:
0x0A08	0xB8A1      	BTFSC       PIR2, 4 
0x0A0A	0xD002      	BRA         L_EEPROM_Write3
;__Lib_EEPROM_256.c,47 :: 		
0x0A0C	0x0000      	NOP
0x0A0E	0xD7FC      	BRA         L_EEPROM_Write2
L_EEPROM_Write3:
;__Lib_EEPROM_256.c,49 :: 		
0x0A10	0x98A1      	BCF         PIR2, 4 
;__Lib_EEPROM_256.c,50 :: 		
L_end_EEPROM_Write:
0x0A12	0x0012      	RETURN      0
; end of _EEPROM_Write
_fast_incr:
;TCC_5.c,659 :: 		void fast_incr()
;TCC_5.c,661 :: 		if(temp_inc>7)temp_inc=0x00;                     //se temp_inc maior que 7, zera temp_inc
0x0A14	0x0E00      	MOVLW       0
0x0A16	0x6E00      	MOVWF       R0 
0x0A18	0x0100      	MOVLB       0
0x0A1A	0x51FC      	MOVF        _temp_inc+1, 0, 1
0x0A1C	0x5C00      	SUBWF       R0, 0 
0x0A1E	0xE102      	BNZ         L__fast_incr496
0x0A20	0x51FB      	MOVF        _temp_inc, 0, 1
0x0A22	0x0807      	SUBLW       7
L__fast_incr496:
0x0A24	0xE202      	BC          L_fast_incr116
0x0A26	0x6BFB      	CLRF        _temp_inc, 1
0x0A28	0x6BFC      	CLRF        _temp_inc+1, 1
L_fast_incr116:
;TCC_5.c,662 :: 		if(temp_inc==7)                                  //conta 700ms...
0x0A2A	0x0E00      	MOVLW       0
0x0A2C	0x19FC      	XORWF       _temp_inc+1, 0, 1
0x0A2E	0xE102      	BNZ         L__fast_incr497
0x0A30	0x0E07      	MOVLW       7
0x0A32	0x19FB      	XORWF       _temp_inc, 0, 1
L__fast_incr497:
0x0A34	0xE104      	BNZ         L_fast_incr117
;TCC_5.c,664 :: 		temp_inc=0x00;                                  //zera temp_inc
0x0A36	0x6BFB      	CLRF        _temp_inc, 1
0x0A38	0x6BFC      	CLRF        _temp_inc+1, 1
;TCC_5.c,665 :: 		fast_inc=0x01;                                  //ativa fast_inc
0x0A3A	0x0101      	MOVLB       1
0x0A3C	0x810C      	BSF         _fast_inc, BitPos(_fast_inc+0), 1
;TCC_5.c,666 :: 		}                                                //end if temp_inc==7
L_fast_incr117:
0x0A3E	0x0101      	MOVLB       1
;TCC_5.c,668 :: 		if(fast_inc)                                     //se fast_inc for ativado...
0x0A40	0xA10C      	BTFSS       _fast_inc, BitPos(_fast_inc+0), 1
0x0A42	0xD0B9      	BRA         L_fast_incr118
;TCC_5.c,670 :: 		if(option==0 && prog==1)                        //se dispenser n°1 selecionado e programção de número
0x0A44	0x0E00      	MOVLW       0
0x0A46	0x0100      	MOVLB       0
0x0A48	0x19F8      	XORWF       _option+1, 0, 1
0x0A4A	0xE102      	BNZ         L__fast_incr498
0x0A4C	0x0E00      	MOVLW       0
0x0A4E	0x19F7      	XORWF       _option, 0, 1
L__fast_incr498:
0x0A50	0xE11D      	BNZ         L_fast_incr121
0x0A52	0x0E00      	MOVLW       0
0x0A54	0x19FA      	XORWF       _prog+1, 0, 1
0x0A56	0xE102      	BNZ         L__fast_incr499
0x0A58	0x0E01      	MOVLW       1
0x0A5A	0x19F9      	XORWF       _prog, 0, 1
L__fast_incr499:
0x0A5C	0xE117      	BNZ         L_fast_incr121
L__fast_incr389:
;TCC_5.c,672 :: 		if(temp_num>5)temp_num=0x00;                   //se temp_num maior que 5, zera temp_num
0x0A5E	0x0E00      	MOVLW       0
0x0A60	0x6E00      	MOVWF       R0 
0x0A62	0x51FE      	MOVF        _temp_num+1, 0, 1
0x0A64	0x5C00      	SUBWF       R0, 0 
0x0A66	0xE102      	BNZ         L__fast_incr500
0x0A68	0x51FD      	MOVF        _temp_num, 0, 1
0x0A6A	0x0805      	SUBLW       5
L__fast_incr500:
0x0A6C	0xE202      	BC          L_fast_incr122
0x0A6E	0x6BFD      	CLRF        _temp_num, 1
0x0A70	0x6BFE      	CLRF        _temp_num+1, 1
L_fast_incr122:
;TCC_5.c,673 :: 		if(temp_num==5)                                //conta 500ms...
0x0A72	0x0E00      	MOVLW       0
0x0A74	0x19FE      	XORWF       _temp_num+1, 0, 1
0x0A76	0xE102      	BNZ         L__fast_incr501
0x0A78	0x0E05      	MOVLW       5
0x0A7A	0x19FD      	XORWF       _temp_num, 0, 1
L__fast_incr501:
0x0A7C	0xE107      	BNZ         L_fast_incr123
;TCC_5.c,675 :: 		temp_num=0x00;                                //zera temp_num
0x0A7E	0x6BFD      	CLRF        _temp_num, 1
0x0A80	0x6BFE      	CLRF        _temp_num+1, 1
;TCC_5.c,676 :: 		num += 2;                                     //acrescenta 2 em num
0x0A82	0x0E02      	MOVLW       2
0x0A84	0x0101      	MOVLB       1
0x0A86	0x2711      	ADDWF       _num, 1, 1
0x0A88	0x0E00      	MOVLW       0
0x0A8A	0x2312      	ADDWFC      _num+1, 1, 1
;TCC_5.c,678 :: 		}                                              //end if temp_num==5
L_fast_incr123:
;TCC_5.c,680 :: 		}                                               //end if option==0 && prog=1
L_fast_incr121:
;TCC_5.c,683 :: 		if(option==1 && prog==1)                        //se dispenser n°2 selecionado e programção de número
0x0A8C	0x0E00      	MOVLW       0
0x0A8E	0x0100      	MOVLB       0
0x0A90	0x19F8      	XORWF       _option+1, 0, 1
0x0A92	0xE102      	BNZ         L__fast_incr502
0x0A94	0x0E01      	MOVLW       1
0x0A96	0x19F7      	XORWF       _option, 0, 1
L__fast_incr502:
0x0A98	0xE11D      	BNZ         L_fast_incr126
0x0A9A	0x0E00      	MOVLW       0
0x0A9C	0x19FA      	XORWF       _prog+1, 0, 1
0x0A9E	0xE102      	BNZ         L__fast_incr503
0x0AA0	0x0E01      	MOVLW       1
0x0AA2	0x19F9      	XORWF       _prog, 0, 1
L__fast_incr503:
0x0AA4	0xE117      	BNZ         L_fast_incr126
L__fast_incr388:
;TCC_5.c,685 :: 		if(temp_num>5)temp_num=0x00;                   //se temp_num maior que 5, zera temp_num
0x0AA6	0x0E00      	MOVLW       0
0x0AA8	0x6E00      	MOVWF       R0 
0x0AAA	0x51FE      	MOVF        _temp_num+1, 0, 1
0x0AAC	0x5C00      	SUBWF       R0, 0 
0x0AAE	0xE102      	BNZ         L__fast_incr504
0x0AB0	0x51FD      	MOVF        _temp_num, 0, 1
0x0AB2	0x0805      	SUBLW       5
L__fast_incr504:
0x0AB4	0xE202      	BC          L_fast_incr127
0x0AB6	0x6BFD      	CLRF        _temp_num, 1
0x0AB8	0x6BFE      	CLRF        _temp_num+1, 1
L_fast_incr127:
;TCC_5.c,686 :: 		if(temp_num==5)                                //conta 500ms...
0x0ABA	0x0E00      	MOVLW       0
0x0ABC	0x19FE      	XORWF       _temp_num+1, 0, 1
0x0ABE	0xE102      	BNZ         L__fast_incr505
0x0AC0	0x0E05      	MOVLW       5
0x0AC2	0x19FD      	XORWF       _temp_num, 0, 1
L__fast_incr505:
0x0AC4	0xE107      	BNZ         L_fast_incr128
;TCC_5.c,688 :: 		temp_num=0x00;                                //zera temp_num
0x0AC6	0x6BFD      	CLRF        _temp_num, 1
0x0AC8	0x6BFE      	CLRF        _temp_num+1, 1
;TCC_5.c,689 :: 		num2 += 2;                                    //acrescenta 2 em num2
0x0ACA	0x0E02      	MOVLW       2
0x0ACC	0x0101      	MOVLB       1
0x0ACE	0x270D      	ADDWF       _num2, 1, 1
0x0AD0	0x0E00      	MOVLW       0
0x0AD2	0x230E      	ADDWFC      _num2+1, 1, 1
;TCC_5.c,691 :: 		}                                              //end if temp_num==5
L_fast_incr128:
;TCC_5.c,693 :: 		}                                               //end if option==1 && prog=1
L_fast_incr126:
;TCC_5.c,695 :: 		if(option==2 && prog==1)                       //se dispenser n°3 selecionado e programção de número
0x0AD4	0x0E00      	MOVLW       0
0x0AD6	0x0100      	MOVLB       0
0x0AD8	0x19F8      	XORWF       _option+1, 0, 1
0x0ADA	0xE102      	BNZ         L__fast_incr506
0x0ADC	0x0E02      	MOVLW       2
0x0ADE	0x19F7      	XORWF       _option, 0, 1
L__fast_incr506:
0x0AE0	0xE11D      	BNZ         L_fast_incr131
0x0AE2	0x0E00      	MOVLW       0
0x0AE4	0x19FA      	XORWF       _prog+1, 0, 1
0x0AE6	0xE102      	BNZ         L__fast_incr507
0x0AE8	0x0E01      	MOVLW       1
0x0AEA	0x19F9      	XORWF       _prog, 0, 1
L__fast_incr507:
0x0AEC	0xE117      	BNZ         L_fast_incr131
L__fast_incr387:
;TCC_5.c,697 :: 		if(temp_num>5)temp_num=0x00;                   //se temp_num maior que 5, zera temp_num
0x0AEE	0x0E00      	MOVLW       0
0x0AF0	0x6E00      	MOVWF       R0 
0x0AF2	0x51FE      	MOVF        _temp_num+1, 0, 1
0x0AF4	0x5C00      	SUBWF       R0, 0 
0x0AF6	0xE102      	BNZ         L__fast_incr508
0x0AF8	0x51FD      	MOVF        _temp_num, 0, 1
0x0AFA	0x0805      	SUBLW       5
L__fast_incr508:
0x0AFC	0xE202      	BC          L_fast_incr132
0x0AFE	0x6BFD      	CLRF        _temp_num, 1
0x0B00	0x6BFE      	CLRF        _temp_num+1, 1
L_fast_incr132:
;TCC_5.c,698 :: 		if(temp_num==5)                                //conta 500ms...
0x0B02	0x0E00      	MOVLW       0
0x0B04	0x19FE      	XORWF       _temp_num+1, 0, 1
0x0B06	0xE102      	BNZ         L__fast_incr509
0x0B08	0x0E05      	MOVLW       5
0x0B0A	0x19FD      	XORWF       _temp_num, 0, 1
L__fast_incr509:
0x0B0C	0xE107      	BNZ         L_fast_incr133
;TCC_5.c,700 :: 		temp_num=0x00;                                //zera temp_num
0x0B0E	0x6BFD      	CLRF        _temp_num, 1
0x0B10	0x6BFE      	CLRF        _temp_num+1, 1
;TCC_5.c,701 :: 		num3 += 2;                                    //acrescenta 2 em num3
0x0B12	0x0E02      	MOVLW       2
0x0B14	0x0101      	MOVLB       1
0x0B16	0x270F      	ADDWF       _num3, 1, 1
0x0B18	0x0E00      	MOVLW       0
0x0B1A	0x2310      	ADDWFC      _num3+1, 1, 1
;TCC_5.c,703 :: 		}                                              //end if temp_num==5
L_fast_incr133:
;TCC_5.c,705 :: 		}                                               //end if option==2 && prog=1
L_fast_incr131:
;TCC_5.c,707 :: 		if(option==3 && prog==1)                       //se dispenser n°4 selecionado e programção de número
0x0B1C	0x0E00      	MOVLW       0
0x0B1E	0x0100      	MOVLB       0
0x0B20	0x19F8      	XORWF       _option+1, 0, 1
0x0B22	0xE102      	BNZ         L__fast_incr510
0x0B24	0x0E03      	MOVLW       3
0x0B26	0x19F7      	XORWF       _option, 0, 1
L__fast_incr510:
0x0B28	0xE11D      	BNZ         L_fast_incr136
0x0B2A	0x0E00      	MOVLW       0
0x0B2C	0x19FA      	XORWF       _prog+1, 0, 1
0x0B2E	0xE102      	BNZ         L__fast_incr511
0x0B30	0x0E01      	MOVLW       1
0x0B32	0x19F9      	XORWF       _prog, 0, 1
L__fast_incr511:
0x0B34	0xE117      	BNZ         L_fast_incr136
L__fast_incr386:
;TCC_5.c,709 :: 		if(temp_num>5)temp_num=0x00;                   //se temp_num maior que 5, zera temp_num
0x0B36	0x0E00      	MOVLW       0
0x0B38	0x6E00      	MOVWF       R0 
0x0B3A	0x51FE      	MOVF        _temp_num+1, 0, 1
0x0B3C	0x5C00      	SUBWF       R0, 0 
0x0B3E	0xE102      	BNZ         L__fast_incr512
0x0B40	0x51FD      	MOVF        _temp_num, 0, 1
0x0B42	0x0805      	SUBLW       5
L__fast_incr512:
0x0B44	0xE202      	BC          L_fast_incr137
0x0B46	0x6BFD      	CLRF        _temp_num, 1
0x0B48	0x6BFE      	CLRF        _temp_num+1, 1
L_fast_incr137:
;TCC_5.c,710 :: 		if(temp_num==5)                                //conta 500ms...
0x0B4A	0x0E00      	MOVLW       0
0x0B4C	0x19FE      	XORWF       _temp_num+1, 0, 1
0x0B4E	0xE102      	BNZ         L__fast_incr513
0x0B50	0x0E05      	MOVLW       5
0x0B52	0x19FD      	XORWF       _temp_num, 0, 1
L__fast_incr513:
0x0B54	0xE107      	BNZ         L_fast_incr138
;TCC_5.c,712 :: 		temp_num=0x00;                                //zera temp_num
0x0B56	0x6BFD      	CLRF        _temp_num, 1
0x0B58	0x6BFE      	CLRF        _temp_num+1, 1
;TCC_5.c,713 :: 		num4 += 2;                                    //acrescenta 2 em num4
0x0B5A	0x0E02      	MOVLW       2
0x0B5C	0x0101      	MOVLB       1
0x0B5E	0x270A      	ADDWF       _num4, 1, 1
0x0B60	0x0E00      	MOVLW       0
0x0B62	0x230B      	ADDWFC      _num4+1, 1, 1
;TCC_5.c,715 :: 		}                                              //end if temp_num==5
L_fast_incr138:
;TCC_5.c,717 :: 		}                                               //end if option==3 && prog=1
L_fast_incr136:
0x0B64	0x0101      	MOVLB       1
;TCC_5.c,719 :: 		if(num >24) num =0x00;                          //se o numero passar de 24, retorna para 0
0x0B66	0x0E00      	MOVLW       0
0x0B68	0x6E00      	MOVWF       R0 
0x0B6A	0x5112      	MOVF        _num+1, 0, 1
0x0B6C	0x5C00      	SUBWF       R0, 0 
0x0B6E	0xE102      	BNZ         L__fast_incr514
0x0B70	0x5111      	MOVF        _num, 0, 1
0x0B72	0x0818      	SUBLW       24
L__fast_incr514:
0x0B74	0xE202      	BC          L_fast_incr139
0x0B76	0x6B11      	CLRF        _num, 1
0x0B78	0x6B12      	CLRF        _num+1, 1
L_fast_incr139:
;TCC_5.c,720 :: 		if(num2>24) num2=0x00;                          //se o numero passar de 24, retorna para 0
0x0B7A	0x0E00      	MOVLW       0
0x0B7C	0x6E00      	MOVWF       R0 
0x0B7E	0x510E      	MOVF        _num2+1, 0, 1
0x0B80	0x5C00      	SUBWF       R0, 0 
0x0B82	0xE102      	BNZ         L__fast_incr515
0x0B84	0x510D      	MOVF        _num2, 0, 1
0x0B86	0x0818      	SUBLW       24
L__fast_incr515:
0x0B88	0xE202      	BC          L_fast_incr140
0x0B8A	0x6B0D      	CLRF        _num2, 1
0x0B8C	0x6B0E      	CLRF        _num2+1, 1
L_fast_incr140:
;TCC_5.c,721 :: 		if(num3>24) num3=0x00;                          //se o numero passar de 24, retorna para 0
0x0B8E	0x0E00      	MOVLW       0
0x0B90	0x6E00      	MOVWF       R0 
0x0B92	0x5110      	MOVF        _num3+1, 0, 1
0x0B94	0x5C00      	SUBWF       R0, 0 
0x0B96	0xE102      	BNZ         L__fast_incr516
0x0B98	0x510F      	MOVF        _num3, 0, 1
0x0B9A	0x0818      	SUBLW       24
L__fast_incr516:
0x0B9C	0xE202      	BC          L_fast_incr141
0x0B9E	0x6B0F      	CLRF        _num3, 1
0x0BA0	0x6B10      	CLRF        _num3+1, 1
L_fast_incr141:
;TCC_5.c,722 :: 		if(num4>24) num4=0x00;                          //se o numero passar de 24, retorna para 0
0x0BA2	0x0E00      	MOVLW       0
0x0BA4	0x6E00      	MOVWF       R0 
0x0BA6	0x510B      	MOVF        _num4+1, 0, 1
0x0BA8	0x5C00      	SUBWF       R0, 0 
0x0BAA	0xE102      	BNZ         L__fast_incr517
0x0BAC	0x510A      	MOVF        _num4, 0, 1
0x0BAE	0x0818      	SUBLW       24
L__fast_incr517:
0x0BB0	0xE202      	BC          L_fast_incr142
0x0BB2	0x6B0A      	CLRF        _num4, 1
0x0BB4	0x6B0B      	CLRF        _num4+1, 1
L_fast_incr142:
;TCC_5.c,724 :: 		}                                                //end if fast_inc
L_fast_incr118:
;TCC_5.c,729 :: 		}                                                 //end void fast_incr()
L_end_fast_incr:
0x0BB6	0x0012      	RETURN      0
; end of _fast_incr
_alarme:
;TCC_5.c,1255 :: 		void alarme()
;TCC_5.c,1257 :: 		if(toque || toque2 || toque3 || toque4)          //se toque, toque2, toque3 ou toque4 for 1
0x0BB8	0x0101      	MOVLB       1
0x0BBA	0xB90C      	BTFSC       _toque, BitPos(_toque+0), 1
0x0BBC	0xD008      	BRA         L__alarme410
0x0BBE	0x0100      	MOVLB       0
0x0BC0	0xB5FF      	BTFSC       _toque2, BitPos(_toque2+0), 1
0x0BC2	0xD005      	BRA         L__alarme410
0x0BC4	0xB3FF      	BTFSC       _toque3, BitPos(_toque3+0), 1
0x0BC6	0xD003      	BRA         L__alarme410
0x0BC8	0xB7FF      	BTFSC       _toque4, BitPos(_toque4+0), 1
0x0BCA	0xD001      	BRA         L__alarme410
0x0BCC	0xD023      	BRA         L_alarme288
L__alarme410:
0x0BCE	0x0100      	MOVLB       0
;TCC_5.c,1259 :: 		if(vezes <200)                                 //se vezes for menor que 200 (toca por 1 minuto)
0x0BD0	0x0E00      	MOVLW       0
0x0BD2	0x5DF0      	SUBWF       _vezes+1, 0, 1
0x0BD4	0xE102      	BNZ         L__alarme590
0x0BD6	0x0EC8      	MOVLW       200
0x0BD8	0x5DEF      	SUBWF       _vezes, 0, 1
L__alarme590:
0x0BDA	0xE202      	BC          L_alarme289
;TCC_5.c,1261 :: 		toca_som();                                   //executa a toca do SOM
0x0BDC	0xDCEE      	RCALL       _toca_som
;TCC_5.c,1262 :: 		}                                              //end if vezes<10
0x0BDE	0xD01A      	BRA         L_alarme290
L_alarme289:
;TCC_5.c,1266 :: 		if(toque)                                     //se toque for 1
0x0BE0	0x0101      	MOVLB       1
0x0BE2	0xA90C      	BTFSS       _toque, BitPos(_toque+0), 1
0x0BE4	0xD004      	BRA         L_alarme291
;TCC_5.c,1268 :: 		toque=0x00;                                  //limpa o bit toque
0x0BE6	0x990C      	BCF         _toque, BitPos(_toque+0), 1
;TCC_5.c,1269 :: 		temp_ligado=0x00;                            //zera temp_ligado para recomeçar a contagem
0x0BE8	0x0100      	MOVLB       0
0x0BEA	0x6BD7      	CLRF        _temp_ligado, 1
0x0BEC	0x6BD8      	CLRF        _temp_ligado+1, 1
;TCC_5.c,1271 :: 		}                                             //end if toque
L_alarme291:
0x0BEE	0x0100      	MOVLB       0
;TCC_5.c,1273 :: 		if(toque2)                                    //se toque2 for 1
0x0BF0	0xA5FF      	BTFSS       _toque2, BitPos(_toque2+0), 1
0x0BF2	0xD003      	BRA         L_alarme292
;TCC_5.c,1275 :: 		toque2=0x00;                                 //limpa o bit toque 2
0x0BF4	0x95FF      	BCF         _toque2, BitPos(_toque2+0), 1
;TCC_5.c,1276 :: 		temp_ligado2=0x00;                           //zera temp_ligado2 para recomeçar a contagem
0x0BF6	0x6BD5      	CLRF        _temp_ligado2, 1
0x0BF8	0x6BD6      	CLRF        _temp_ligado2+1, 1
;TCC_5.c,1278 :: 		}                                             //end if toque2
L_alarme292:
;TCC_5.c,1280 :: 		if(toque3)                                    //se toque3 for 1
0x0BFA	0xA3FF      	BTFSS       _toque3, BitPos(_toque3+0), 1
0x0BFC	0xD003      	BRA         L_alarme293
;TCC_5.c,1282 :: 		toque3=0x00;                                 //limpa o bit toque3
0x0BFE	0x93FF      	BCF         _toque3, BitPos(_toque3+0), 1
;TCC_5.c,1283 :: 		temp_ligado3=0x00;                           //zera temp_ligado3 para recomeçar a contagem
0x0C00	0x6A51      	CLRF        _temp_ligado3 
0x0C02	0x6A52      	CLRF        _temp_ligado3+1 
;TCC_5.c,1285 :: 		}                                             //end if toque3
L_alarme293:
;TCC_5.c,1287 :: 		if(toque4)                                    //se toque4 for 1
0x0C04	0xA7FF      	BTFSS       _toque4, BitPos(_toque4+0), 1
0x0C06	0xD003      	BRA         L_alarme294
;TCC_5.c,1289 :: 		toque4=0x00;                                 //limpa o bit toque4
0x0C08	0x97FF      	BCF         _toque4, BitPos(_toque4+0), 1
;TCC_5.c,1290 :: 		temp_ligado4=0x00;                           //zera temp_ligado4 para recomeçar a contagem
0x0C0A	0x6A4F      	CLRF        _temp_ligado4 
0x0C0C	0x6A50      	CLRF        _temp_ligado4+1 
;TCC_5.c,1292 :: 		}                                             //end if toque4
L_alarme294:
;TCC_5.c,1294 :: 		vezes=0x00;                                  //zera vezes
0x0C0E	0x6BEF      	CLRF        _vezes, 1
0x0C10	0x6BF0      	CLRF        _vezes+1, 1
;TCC_5.c,1295 :: 		SOM = 0x00;                                  //desliga o som
0x0C12	0x9480      	BCF         PORTA, 2 
;TCC_5.c,1297 :: 		}                                              //end else
L_alarme290:
;TCC_5.c,1299 :: 		}                                                //end if toque || toque2 || toque3 || toque4
L_alarme288:
;TCC_5.c,1301 :: 		}                                                 //end alarme()
L_end_alarme:
0x0C14	0x0012      	RETURN      0
; end of _alarme
_ler_bot:
;TCC_5.c,309 :: 		void ler_bot()
;TCC_5.c,312 :: 		if(!BOTAO1) b1_flag=0x01;                       //se botão1 for pressionado, flag do botão1 = 1
0x0C16	0xB082      	BTFSC       PORTC, 0 
0x0C18	0xD002      	BRA         L_ler_bot8
0x0C1A	0x0101      	MOVLB       1
0x0C1C	0x8509      	BSF         _b1_flag, BitPos(_b1_flag+0), 1
L_ler_bot8:
;TCC_5.c,314 :: 		if(BOTAO1 && b1_flag)                           //se botão1 estiver solto e flag do botão1 = 1
0x0C1E	0xA082      	BTFSS       PORTC, 0 
0x0C20	0xD0D4      	BRA         L_ler_bot11
0x0C22	0x0101      	MOVLB       1
0x0C24	0xA509      	BTFSS       _b1_flag, BitPos(_b1_flag+0), 1
0x0C26	0xD0D1      	BRA         L_ler_bot11
L__ler_bot385:
;TCC_5.c,316 :: 		LCD_Cmd(_LCD_CLEAR);                           //limpa o LCD
0x0C28	0x0E01      	MOVLW       1
0x0C2A	0x6F25      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x0C2C	0xF000EC58  	CALL        _Lcd_Cmd, 0
;TCC_5.c,317 :: 		b1_flag = 0x00;                                //lmpa a flag do botão1
0x0C30	0x9509      	BCF         _b1_flag, BitPos(_b1_flag+0), 1
;TCC_5.c,318 :: 		if(!ligar)                                     //se bit ligar = 0
0x0C32	0xB709      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x0C34	0xD0CA      	BRA         L_ler_bot12
;TCC_5.c,320 :: 		prog++;                                       //incrementa prog, muda a programação
0x0C36	0x0100      	MOVLB       0
0x0C38	0x4BF9      	INFSNZ      _prog, 1, 1
0x0C3A	0x2BFA      	INCF        _prog+1, 1, 1
;TCC_5.c,321 :: 		if(prog==4)                                   //se prog = 3
0x0C3C	0x0E00      	MOVLW       0
0x0C3E	0x19FA      	XORWF       _prog+1, 0, 1
0x0C40	0xE102      	BNZ         L__ler_bot439
0x0C42	0x0E04      	MOVLW       4
0x0C44	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot439:
0x0C46	0xA4D8      	BTFSS       STATUS, 2 
0x0C48	0xD0C0      	BRA         L_ler_bot13
;TCC_5.c,323 :: 		prog=0x00;                                   //zera a variável prog
0x0C4A	0x6BF9      	CLRF        _prog, 1
0x0C4C	0x6BFA      	CLRF        _prog+1, 1
;TCC_5.c,324 :: 		EEPROM_Write(0x01,num);                      //grava num na EEPROM
0x0C4E	0x0E01      	MOVLW       1
0x0C50	0x0101      	MOVLB       1
0x0C52	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0C54	0xF11DC111  	MOVFF       _num, FARG_EEPROM_Write_data_
0x0C58	0xDEBE      	RCALL       _EEPROM_Write
;TCC_5.c,325 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0C5A	0x0E1A      	MOVLW       26
0x0C5C	0x6E0C      	MOVWF       R12, 0
0x0C5E	0x0EF8      	MOVLW       248
0x0C60	0x6E0D      	MOVWF       R13, 0
L_ler_bot14:
0x0C62	0x2E0D      	DECFSZ      R13, 1, 0
0x0C64	0xD7FE      	BRA         L_ler_bot14
0x0C66	0x2E0C      	DECFSZ      R12, 1, 0
0x0C68	0xD7FC      	BRA         L_ler_bot14
0x0C6A	0x0000      	NOP
;TCC_5.c,326 :: 		EEPROM_Write(0x03,un);                       //grava un na EEPROM
0x0C6C	0x0E03      	MOVLW       3
0x0C6E	0x0101      	MOVLB       1
0x0C70	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0C72	0x0E00      	MOVLW       0
0x0C74	0xBD09      	BTFSC       _un, BitPos(_un+0), 1
0x0C76	0x0E01      	MOVLW       1
0x0C78	0x6F1D      	MOVWF       FARG_EEPROM_Write_data_, 1
0x0C7A	0xDEAD      	RCALL       _EEPROM_Write
;TCC_5.c,327 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0C7C	0x0E1A      	MOVLW       26
0x0C7E	0x6E0C      	MOVWF       R12, 0
0x0C80	0x0EF8      	MOVLW       248
0x0C82	0x6E0D      	MOVWF       R13, 0
L_ler_bot15:
0x0C84	0x2E0D      	DECFSZ      R13, 1, 0
0x0C86	0xD7FE      	BRA         L_ler_bot15
0x0C88	0x2E0C      	DECFSZ      R12, 1, 0
0x0C8A	0xD7FC      	BRA         L_ler_bot15
0x0C8C	0x0000      	NOP
;TCC_5.c,328 :: 		EEPROM_Write(0x02,num2);                     //grava num2 na EEPROM
0x0C8E	0x0E02      	MOVLW       2
0x0C90	0x0101      	MOVLB       1
0x0C92	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0C94	0xF11DC10D  	MOVFF       _num2, FARG_EEPROM_Write_data_
0x0C98	0xDE9E      	RCALL       _EEPROM_Write
;TCC_5.c,329 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0C9A	0x0E1A      	MOVLW       26
0x0C9C	0x6E0C      	MOVWF       R12, 0
0x0C9E	0x0EF8      	MOVLW       248
0x0CA0	0x6E0D      	MOVWF       R13, 0
L_ler_bot16:
0x0CA2	0x2E0D      	DECFSZ      R13, 1, 0
0x0CA4	0xD7FE      	BRA         L_ler_bot16
0x0CA6	0x2E0C      	DECFSZ      R12, 1, 0
0x0CA8	0xD7FC      	BRA         L_ler_bot16
0x0CAA	0x0000      	NOP
;TCC_5.c,330 :: 		EEPROM_Write(0x04,un2);                      //grava un2 na EEPROM
0x0CAC	0x0E04      	MOVLW       4
0x0CAE	0x0101      	MOVLB       1
0x0CB0	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0CB2	0x0E00      	MOVLW       0
0x0CB4	0xBF09      	BTFSC       _un2, BitPos(_un2+0), 1
0x0CB6	0x0E01      	MOVLW       1
0x0CB8	0x6F1D      	MOVWF       FARG_EEPROM_Write_data_, 1
0x0CBA	0xDE8D      	RCALL       _EEPROM_Write
;TCC_5.c,331 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0CBC	0x0E1A      	MOVLW       26
0x0CBE	0x6E0C      	MOVWF       R12, 0
0x0CC0	0x0EF8      	MOVLW       248
0x0CC2	0x6E0D      	MOVWF       R13, 0
L_ler_bot17:
0x0CC4	0x2E0D      	DECFSZ      R13, 1, 0
0x0CC6	0xD7FE      	BRA         L_ler_bot17
0x0CC8	0x2E0C      	DECFSZ      R12, 1, 0
0x0CCA	0xD7FC      	BRA         L_ler_bot17
0x0CCC	0x0000      	NOP
;TCC_5.c,332 :: 		EEPROM_Write(0x05,num3);                     //grava num3 na EEPROM
0x0CCE	0x0E05      	MOVLW       5
0x0CD0	0x0101      	MOVLB       1
0x0CD2	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0CD4	0xF11DC10F  	MOVFF       _num3, FARG_EEPROM_Write_data_
0x0CD8	0xDE7E      	RCALL       _EEPROM_Write
;TCC_5.c,333 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0CDA	0x0E1A      	MOVLW       26
0x0CDC	0x6E0C      	MOVWF       R12, 0
0x0CDE	0x0EF8      	MOVLW       248
0x0CE0	0x6E0D      	MOVWF       R13, 0
L_ler_bot18:
0x0CE2	0x2E0D      	DECFSZ      R13, 1, 0
0x0CE4	0xD7FE      	BRA         L_ler_bot18
0x0CE6	0x2E0C      	DECFSZ      R12, 1, 0
0x0CE8	0xD7FC      	BRA         L_ler_bot18
0x0CEA	0x0000      	NOP
;TCC_5.c,334 :: 		EEPROM_Write(0x06,un3);                      //grava un3 na EEPROM
0x0CEC	0x0E06      	MOVLW       6
0x0CEE	0x0101      	MOVLB       1
0x0CF0	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0CF2	0x0E00      	MOVLW       0
0x0CF4	0xB909      	BTFSC       _un3, BitPos(_un3+0), 1
0x0CF6	0x0E01      	MOVLW       1
0x0CF8	0x6F1D      	MOVWF       FARG_EEPROM_Write_data_, 1
0x0CFA	0xDE6D      	RCALL       _EEPROM_Write
;TCC_5.c,335 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0CFC	0x0E1A      	MOVLW       26
0x0CFE	0x6E0C      	MOVWF       R12, 0
0x0D00	0x0EF8      	MOVLW       248
0x0D02	0x6E0D      	MOVWF       R13, 0
L_ler_bot19:
0x0D04	0x2E0D      	DECFSZ      R13, 1, 0
0x0D06	0xD7FE      	BRA         L_ler_bot19
0x0D08	0x2E0C      	DECFSZ      R12, 1, 0
0x0D0A	0xD7FC      	BRA         L_ler_bot19
0x0D0C	0x0000      	NOP
;TCC_5.c,336 :: 		EEPROM_Write(0x07,num4);                     //grava num4 na EEPROM
0x0D0E	0x0E07      	MOVLW       7
0x0D10	0x0101      	MOVLB       1
0x0D12	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0D14	0xF11DC10A  	MOVFF       _num4, FARG_EEPROM_Write_data_
0x0D18	0xDE5E      	RCALL       _EEPROM_Write
;TCC_5.c,337 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0D1A	0x0E1A      	MOVLW       26
0x0D1C	0x6E0C      	MOVWF       R12, 0
0x0D1E	0x0EF8      	MOVLW       248
0x0D20	0x6E0D      	MOVWF       R13, 0
L_ler_bot20:
0x0D22	0x2E0D      	DECFSZ      R13, 1, 0
0x0D24	0xD7FE      	BRA         L_ler_bot20
0x0D26	0x2E0C      	DECFSZ      R12, 1, 0
0x0D28	0xD7FC      	BRA         L_ler_bot20
0x0D2A	0x0000      	NOP
;TCC_5.c,338 :: 		EEPROM_Write(0x08,un4);                      //grava un4 na EEPROM
0x0D2C	0x0E08      	MOVLW       8
0x0D2E	0x0101      	MOVLB       1
0x0D30	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0D32	0x0E00      	MOVLW       0
0x0D34	0xBB09      	BTFSC       _un4, BitPos(_un4+0), 1
0x0D36	0x0E01      	MOVLW       1
0x0D38	0x6F1D      	MOVWF       FARG_EEPROM_Write_data_, 1
0x0D3A	0xDE4D      	RCALL       _EEPROM_Write
;TCC_5.c,339 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0D3C	0x0E1A      	MOVLW       26
0x0D3E	0x6E0C      	MOVWF       R12, 0
0x0D40	0x0EF8      	MOVLW       248
0x0D42	0x6E0D      	MOVWF       R13, 0
L_ler_bot21:
0x0D44	0x2E0D      	DECFSZ      R13, 1, 0
0x0D46	0xD7FE      	BRA         L_ler_bot21
0x0D48	0x2E0C      	DECFSZ      R12, 1, 0
0x0D4A	0xD7FC      	BRA         L_ler_bot21
0x0D4C	0x0000      	NOP
;TCC_5.c,340 :: 		EEPROM_Write(0x09,qtd_comp);                 //grava qtd_comp na EEPROM
0x0D4E	0x0E09      	MOVLW       9
0x0D50	0x0101      	MOVLB       1
0x0D52	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0D54	0xF11DC117  	MOVFF       _qtd_comp, FARG_EEPROM_Write_data_
0x0D58	0xDE3E      	RCALL       _EEPROM_Write
;TCC_5.c,341 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0D5A	0x0E1A      	MOVLW       26
0x0D5C	0x6E0C      	MOVWF       R12, 0
0x0D5E	0x0EF8      	MOVLW       248
0x0D60	0x6E0D      	MOVWF       R13, 0
L_ler_bot22:
0x0D62	0x2E0D      	DECFSZ      R13, 1, 0
0x0D64	0xD7FE      	BRA         L_ler_bot22
0x0D66	0x2E0C      	DECFSZ      R12, 1, 0
0x0D68	0xD7FC      	BRA         L_ler_bot22
0x0D6A	0x0000      	NOP
;TCC_5.c,342 :: 		EEPROM_Write(0x0A,qtd_comp2);                //grava qtd_comp2 na EEPROM
0x0D6C	0x0E0A      	MOVLW       10
0x0D6E	0x0101      	MOVLB       1
0x0D70	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0D72	0xF11DC119  	MOVFF       _qtd_comp2, FARG_EEPROM_Write_data_
0x0D76	0xDE2F      	RCALL       _EEPROM_Write
;TCC_5.c,343 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0D78	0x0E1A      	MOVLW       26
0x0D7A	0x6E0C      	MOVWF       R12, 0
0x0D7C	0x0EF8      	MOVLW       248
0x0D7E	0x6E0D      	MOVWF       R13, 0
L_ler_bot23:
0x0D80	0x2E0D      	DECFSZ      R13, 1, 0
0x0D82	0xD7FE      	BRA         L_ler_bot23
0x0D84	0x2E0C      	DECFSZ      R12, 1, 0
0x0D86	0xD7FC      	BRA         L_ler_bot23
0x0D88	0x0000      	NOP
;TCC_5.c,344 :: 		EEPROM_Write(0x0B,qtd_comp3);                //grava qtd_comp3 na EEPROM
0x0D8A	0x0E0B      	MOVLW       11
0x0D8C	0x0101      	MOVLB       1
0x0D8E	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0D90	0xF11DC113  	MOVFF       _qtd_comp3, FARG_EEPROM_Write_data_
0x0D94	0xDE20      	RCALL       _EEPROM_Write
;TCC_5.c,345 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0D96	0x0E1A      	MOVLW       26
0x0D98	0x6E0C      	MOVWF       R12, 0
0x0D9A	0x0EF8      	MOVLW       248
0x0D9C	0x6E0D      	MOVWF       R13, 0
L_ler_bot24:
0x0D9E	0x2E0D      	DECFSZ      R13, 1, 0
0x0DA0	0xD7FE      	BRA         L_ler_bot24
0x0DA2	0x2E0C      	DECFSZ      R12, 1, 0
0x0DA4	0xD7FC      	BRA         L_ler_bot24
0x0DA6	0x0000      	NOP
;TCC_5.c,346 :: 		EEPROM_Write(0x0C,qtd_comp4);                //grava qtd_comp4 na EEPROM
0x0DA8	0x0E0C      	MOVLW       12
0x0DAA	0x0101      	MOVLB       1
0x0DAC	0x6F1C      	MOVWF       FARG_EEPROM_Write_address, 1
0x0DAE	0xF11DC115  	MOVFF       _qtd_comp4, FARG_EEPROM_Write_data_
0x0DB2	0xDE11      	RCALL       _EEPROM_Write
;TCC_5.c,347 :: 		delay_ms(10);                                //espera 10 micro segundos
0x0DB4	0x0E1A      	MOVLW       26
0x0DB6	0x6E0C      	MOVWF       R12, 0
0x0DB8	0x0EF8      	MOVLW       248
0x0DBA	0x6E0D      	MOVWF       R13, 0
L_ler_bot25:
0x0DBC	0x2E0D      	DECFSZ      R13, 1, 0
0x0DBE	0xD7FE      	BRA         L_ler_bot25
0x0DC0	0x2E0C      	DECFSZ      R12, 1, 0
0x0DC2	0xD7FC      	BRA         L_ler_bot25
0x0DC4	0x0000      	NOP
;TCC_5.c,348 :: 		display=0x01;                                //bit display em 1
0x0DC6	0x0101      	MOVLB       1
0x0DC8	0x8B0C      	BSF         _display, BitPos(_display+0), 1
;TCC_5.c,350 :: 		}                                             //end if prog = 3
L_ler_bot13:
;TCC_5.c,352 :: 		}                                              //end if !ligar
L_ler_bot12:
;TCC_5.c,354 :: 		}                                               //end if BOTAO1 && b1_flag
L_ler_bot11:
;TCC_5.c,359 :: 		if(!BOTAO2)
0x0DCA	0xB282      	BTFSC       PORTC, 1 
0x0DCC	0xD003      	BRA         L_ler_bot26
;TCC_5.c,361 :: 		b2_flag=0x01;                                  //se botão2 for pressionado, flag do botão2 = 1
0x0DCE	0x0101      	MOVLB       1
0x0DD0	0x850C      	BSF         _b2_flag, BitPos(_b2_flag+0), 1
;TCC_5.c,362 :: 		fast_incr();                                   //executa fast_incr
0x0DD2	0xDE20      	RCALL       _fast_incr
;TCC_5.c,363 :: 		}
L_ler_bot26:
;TCC_5.c,365 :: 		if(BOTAO2 && b2_flag)                           //se botão2 for solto e flag do botão2 for 1
0x0DD4	0xA282      	BTFSS       PORTC, 1 
0x0DD6	0xD101      	BRA         L_ler_bot29
0x0DD8	0x0101      	MOVLB       1
0x0DDA	0xA50C      	BTFSS       _b2_flag, BitPos(_b2_flag+0), 1
0x0DDC	0xD0FE      	BRA         L_ler_bot29
L__ler_bot384:
;TCC_5.c,367 :: 		LCD_Cmd(_LCD_CLEAR);                          //limpa LCD
0x0DDE	0x0E01      	MOVLW       1
0x0DE0	0x6F25      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x0DE2	0xF000EC58  	CALL        _Lcd_Cmd, 0
;TCC_5.c,368 :: 		b2_flag    =  0x00;                           //limpa flag do botão
0x0DE6	0x950C      	BCF         _b2_flag, BitPos(_b2_flag+0), 1
;TCC_5.c,369 :: 		fast_inc   =  0x00;                           //limpa bit de incremento rápido
0x0DE8	0x910C      	BCF         _fast_inc, BitPos(_fast_inc+0), 1
;TCC_5.c,370 :: 		if(option==0)                                  //dispenser n°1
0x0DEA	0x0E00      	MOVLW       0
0x0DEC	0x0100      	MOVLB       0
0x0DEE	0x19F8      	XORWF       _option+1, 0, 1
0x0DF0	0xE102      	BNZ         L__ler_bot440
0x0DF2	0x0E00      	MOVLW       0
0x0DF4	0x19F7      	XORWF       _option, 0, 1
L__ler_bot440:
0x0DF6	0xE133      	BNZ         L_ler_bot30
;TCC_5.c,372 :: 		if(prog==1)                                   //programação de numero
0x0DF8	0x0E00      	MOVLW       0
0x0DFA	0x19FA      	XORWF       _prog+1, 0, 1
0x0DFC	0xE102      	BNZ         L__ler_bot441
0x0DFE	0x0E01      	MOVLW       1
0x0E00	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot441:
0x0E02	0xE103      	BNZ         L_ler_bot31
;TCC_5.c,374 :: 		num++;                                       //incrementa num
0x0E04	0x0101      	MOVLB       1
0x0E06	0x4B11      	INFSNZ      _num, 1, 1
0x0E08	0x2B12      	INCF        _num+1, 1, 1
;TCC_5.c,375 :: 		}
L_ler_bot31:
;TCC_5.c,376 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0E0A	0x0E00      	MOVLW       0
0x0E0C	0x0100      	MOVLB       0
0x0E0E	0x19FA      	XORWF       _prog+1, 0, 1
0x0E10	0xE102      	BNZ         L__ler_bot442
0x0E12	0x0E02      	MOVLW       2
0x0E14	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot442:
0x0E16	0xE102      	BNZ         L_ler_bot32
;TCC_5.c,378 :: 		un = ~un;                                   //inverte un
0x0E18	0x0101      	MOVLB       1
0x0E1A	0x7D09      	BTG         _un, BitPos(_un+0), 1
;TCC_5.c,379 :: 		}                                             //end if prog==2
L_ler_bot32:
;TCC_5.c,381 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x0E1C	0x0E00      	MOVLW       0
0x0E1E	0x0100      	MOVLB       0
0x0E20	0x19FA      	XORWF       _prog+1, 0, 1
0x0E22	0xE102      	BNZ         L__ler_bot443
0x0E24	0x0E03      	MOVLW       3
0x0E26	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot443:
0x0E28	0xE103      	BNZ         L_ler_bot33
;TCC_5.c,383 :: 		qtd_comp++;                                  //incrementa qtd_comp
0x0E2A	0x0101      	MOVLB       1
0x0E2C	0x4B17      	INFSNZ      _qtd_comp, 1, 1
0x0E2E	0x2B18      	INCF        _qtd_comp+1, 1, 1
;TCC_5.c,384 :: 		}
L_ler_bot33:
0x0E30	0x0101      	MOVLB       1
;TCC_5.c,386 :: 		if(qtd_comp>4) qtd_comp = 0x01;               //se quantidade de comprimidos passar de 4, retorna para 1
0x0E32	0x0E00      	MOVLW       0
0x0E34	0x6E00      	MOVWF       R0 
0x0E36	0x5118      	MOVF        _qtd_comp+1, 0, 1
0x0E38	0x5C00      	SUBWF       R0, 0 
0x0E3A	0xE102      	BNZ         L__ler_bot444
0x0E3C	0x5117      	MOVF        _qtd_comp, 0, 1
0x0E3E	0x0804      	SUBLW       4
L__ler_bot444:
0x0E40	0xE204      	BC          L_ler_bot34
0x0E42	0x0E01      	MOVLW       1
0x0E44	0x6F17      	MOVWF       _qtd_comp, 1
0x0E46	0x0E00      	MOVLW       0
0x0E48	0x6F18      	MOVWF       _qtd_comp+1, 1
L_ler_bot34:
;TCC_5.c,387 :: 		if(num>24) num=0x00;                          //se o numero passar de 24, retorna para 0
0x0E4A	0x0E00      	MOVLW       0
0x0E4C	0x6E00      	MOVWF       R0 
0x0E4E	0x5112      	MOVF        _num+1, 0, 1
0x0E50	0x5C00      	SUBWF       R0, 0 
0x0E52	0xE102      	BNZ         L__ler_bot445
0x0E54	0x5111      	MOVF        _num, 0, 1
0x0E56	0x0818      	SUBLW       24
L__ler_bot445:
0x0E58	0xE202      	BC          L_ler_bot35
0x0E5A	0x6B11      	CLRF        _num, 1
0x0E5C	0x6B12      	CLRF        _num+1, 1
L_ler_bot35:
;TCC_5.c,389 :: 		}                                              //end if option==0
L_ler_bot30:
;TCC_5.c,391 :: 		if(option==1)                                  //dispenser n°2
0x0E5E	0x0E00      	MOVLW       0
0x0E60	0x0100      	MOVLB       0
0x0E62	0x19F8      	XORWF       _option+1, 0, 1
0x0E64	0xE102      	BNZ         L__ler_bot446
0x0E66	0x0E01      	MOVLW       1
0x0E68	0x19F7      	XORWF       _option, 0, 1
L__ler_bot446:
0x0E6A	0xE133      	BNZ         L_ler_bot36
;TCC_5.c,393 :: 		if(prog==1)                                   //programação do numero
0x0E6C	0x0E00      	MOVLW       0
0x0E6E	0x19FA      	XORWF       _prog+1, 0, 1
0x0E70	0xE102      	BNZ         L__ler_bot447
0x0E72	0x0E01      	MOVLW       1
0x0E74	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot447:
0x0E76	0xE103      	BNZ         L_ler_bot37
;TCC_5.c,395 :: 		num2++;                                      //incrementa num2
0x0E78	0x0101      	MOVLB       1
0x0E7A	0x4B0D      	INFSNZ      _num2, 1, 1
0x0E7C	0x2B0E      	INCF        _num2+1, 1, 1
;TCC_5.c,396 :: 		}
L_ler_bot37:
;TCC_5.c,397 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0E7E	0x0E00      	MOVLW       0
0x0E80	0x0100      	MOVLB       0
0x0E82	0x19FA      	XORWF       _prog+1, 0, 1
0x0E84	0xE102      	BNZ         L__ler_bot448
0x0E86	0x0E02      	MOVLW       2
0x0E88	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot448:
0x0E8A	0xE102      	BNZ         L_ler_bot38
;TCC_5.c,399 :: 		un2 = ~un2;                                 //inverte un2
0x0E8C	0x0101      	MOVLB       1
0x0E8E	0x7F09      	BTG         _un2, BitPos(_un2+0), 1
;TCC_5.c,400 :: 		}
L_ler_bot38:
;TCC_5.c,401 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x0E90	0x0E00      	MOVLW       0
0x0E92	0x0100      	MOVLB       0
0x0E94	0x19FA      	XORWF       _prog+1, 0, 1
0x0E96	0xE102      	BNZ         L__ler_bot449
0x0E98	0x0E03      	MOVLW       3
0x0E9A	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot449:
0x0E9C	0xE103      	BNZ         L_ler_bot39
;TCC_5.c,403 :: 		qtd_comp2++;                                 //incrementa qtd_comp2
0x0E9E	0x0101      	MOVLB       1
0x0EA0	0x4B19      	INFSNZ      _qtd_comp2, 1, 1
0x0EA2	0x2B1A      	INCF        _qtd_comp2+1, 1, 1
;TCC_5.c,404 :: 		}
L_ler_bot39:
0x0EA4	0x0101      	MOVLB       1
;TCC_5.c,406 :: 		if(qtd_comp2>4) qtd_comp2 = 0x01;             //se quantidade de comprimidos passar de 4, retorna para 1
0x0EA6	0x0E00      	MOVLW       0
0x0EA8	0x6E00      	MOVWF       R0 
0x0EAA	0x511A      	MOVF        _qtd_comp2+1, 0, 1
0x0EAC	0x5C00      	SUBWF       R0, 0 
0x0EAE	0xE102      	BNZ         L__ler_bot450
0x0EB0	0x5119      	MOVF        _qtd_comp2, 0, 1
0x0EB2	0x0804      	SUBLW       4
L__ler_bot450:
0x0EB4	0xE204      	BC          L_ler_bot40
0x0EB6	0x0E01      	MOVLW       1
0x0EB8	0x6F19      	MOVWF       _qtd_comp2, 1
0x0EBA	0x0E00      	MOVLW       0
0x0EBC	0x6F1A      	MOVWF       _qtd_comp2+1, 1
L_ler_bot40:
;TCC_5.c,407 :: 		if(num2>24) num2=0x00;                        //se o numero passar de 24, retorna para 0
0x0EBE	0x0E00      	MOVLW       0
0x0EC0	0x6E00      	MOVWF       R0 
0x0EC2	0x510E      	MOVF        _num2+1, 0, 1
0x0EC4	0x5C00      	SUBWF       R0, 0 
0x0EC6	0xE102      	BNZ         L__ler_bot451
0x0EC8	0x510D      	MOVF        _num2, 0, 1
0x0ECA	0x0818      	SUBLW       24
L__ler_bot451:
0x0ECC	0xE202      	BC          L_ler_bot41
0x0ECE	0x6B0D      	CLRF        _num2, 1
0x0ED0	0x6B0E      	CLRF        _num2+1, 1
L_ler_bot41:
;TCC_5.c,409 :: 		}                                              //end if option==1
L_ler_bot36:
;TCC_5.c,411 :: 		if(option==2)                                  //dispenser n°3
0x0ED2	0x0E00      	MOVLW       0
0x0ED4	0x0100      	MOVLB       0
0x0ED6	0x19F8      	XORWF       _option+1, 0, 1
0x0ED8	0xE102      	BNZ         L__ler_bot452
0x0EDA	0x0E02      	MOVLW       2
0x0EDC	0x19F7      	XORWF       _option, 0, 1
L__ler_bot452:
0x0EDE	0xE133      	BNZ         L_ler_bot42
;TCC_5.c,413 :: 		if(prog==1)                                   //programação do numero
0x0EE0	0x0E00      	MOVLW       0
0x0EE2	0x19FA      	XORWF       _prog+1, 0, 1
0x0EE4	0xE102      	BNZ         L__ler_bot453
0x0EE6	0x0E01      	MOVLW       1
0x0EE8	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot453:
0x0EEA	0xE103      	BNZ         L_ler_bot43
;TCC_5.c,415 :: 		num3++;                                      //incrementa num3
0x0EEC	0x0101      	MOVLB       1
0x0EEE	0x4B0F      	INFSNZ      _num3, 1, 1
0x0EF0	0x2B10      	INCF        _num3+1, 1, 1
;TCC_5.c,416 :: 		}
L_ler_bot43:
;TCC_5.c,417 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0EF2	0x0E00      	MOVLW       0
0x0EF4	0x0100      	MOVLB       0
0x0EF6	0x19FA      	XORWF       _prog+1, 0, 1
0x0EF8	0xE102      	BNZ         L__ler_bot454
0x0EFA	0x0E02      	MOVLW       2
0x0EFC	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot454:
0x0EFE	0xE102      	BNZ         L_ler_bot44
;TCC_5.c,419 :: 		un3 = ~un3;                                 //inverte un3
0x0F00	0x0101      	MOVLB       1
0x0F02	0x7909      	BTG         _un3, BitPos(_un3+0), 1
;TCC_5.c,420 :: 		}
L_ler_bot44:
;TCC_5.c,421 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x0F04	0x0E00      	MOVLW       0
0x0F06	0x0100      	MOVLB       0
0x0F08	0x19FA      	XORWF       _prog+1, 0, 1
0x0F0A	0xE102      	BNZ         L__ler_bot455
0x0F0C	0x0E03      	MOVLW       3
0x0F0E	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot455:
0x0F10	0xE103      	BNZ         L_ler_bot45
;TCC_5.c,423 :: 		qtd_comp3++;                                 //incrementa qtd_comp3
0x0F12	0x0101      	MOVLB       1
0x0F14	0x4B13      	INFSNZ      _qtd_comp3, 1, 1
0x0F16	0x2B14      	INCF        _qtd_comp3+1, 1, 1
;TCC_5.c,424 :: 		}
L_ler_bot45:
0x0F18	0x0101      	MOVLB       1
;TCC_5.c,426 :: 		if(qtd_comp3>4) qtd_comp3 = 0x01;             //se quantidade de comprimidos passar de 4, retorna para 1
0x0F1A	0x0E00      	MOVLW       0
0x0F1C	0x6E00      	MOVWF       R0 
0x0F1E	0x5114      	MOVF        _qtd_comp3+1, 0, 1
0x0F20	0x5C00      	SUBWF       R0, 0 
0x0F22	0xE102      	BNZ         L__ler_bot456
0x0F24	0x5113      	MOVF        _qtd_comp3, 0, 1
0x0F26	0x0804      	SUBLW       4
L__ler_bot456:
0x0F28	0xE204      	BC          L_ler_bot46
0x0F2A	0x0E01      	MOVLW       1
0x0F2C	0x6F13      	MOVWF       _qtd_comp3, 1
0x0F2E	0x0E00      	MOVLW       0
0x0F30	0x6F14      	MOVWF       _qtd_comp3+1, 1
L_ler_bot46:
;TCC_5.c,427 :: 		if(num3>24) num3=0x00;                        //se o numero passar de 24, retorna para 0
0x0F32	0x0E00      	MOVLW       0
0x0F34	0x6E00      	MOVWF       R0 
0x0F36	0x5110      	MOVF        _num3+1, 0, 1
0x0F38	0x5C00      	SUBWF       R0, 0 
0x0F3A	0xE102      	BNZ         L__ler_bot457
0x0F3C	0x510F      	MOVF        _num3, 0, 1
0x0F3E	0x0818      	SUBLW       24
L__ler_bot457:
0x0F40	0xE202      	BC          L_ler_bot47
0x0F42	0x6B0F      	CLRF        _num3, 1
0x0F44	0x6B10      	CLRF        _num3+1, 1
L_ler_bot47:
;TCC_5.c,429 :: 		}                                              //end if option==2
L_ler_bot42:
;TCC_5.c,431 :: 		if(option==3)                                  //dispenser n°4
0x0F46	0x0E00      	MOVLW       0
0x0F48	0x0100      	MOVLB       0
0x0F4A	0x19F8      	XORWF       _option+1, 0, 1
0x0F4C	0xE102      	BNZ         L__ler_bot458
0x0F4E	0x0E03      	MOVLW       3
0x0F50	0x19F7      	XORWF       _option, 0, 1
L__ler_bot458:
0x0F52	0xE133      	BNZ         L_ler_bot48
;TCC_5.c,433 :: 		if(prog==1)                                   //programação do numero
0x0F54	0x0E00      	MOVLW       0
0x0F56	0x19FA      	XORWF       _prog+1, 0, 1
0x0F58	0xE102      	BNZ         L__ler_bot459
0x0F5A	0x0E01      	MOVLW       1
0x0F5C	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot459:
0x0F5E	0xE103      	BNZ         L_ler_bot49
;TCC_5.c,435 :: 		num4++;                                      //incrementa num4
0x0F60	0x0101      	MOVLB       1
0x0F62	0x4B0A      	INFSNZ      _num4, 1, 1
0x0F64	0x2B0B      	INCF        _num4+1, 1, 1
;TCC_5.c,436 :: 		}
L_ler_bot49:
;TCC_5.c,437 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x0F66	0x0E00      	MOVLW       0
0x0F68	0x0100      	MOVLB       0
0x0F6A	0x19FA      	XORWF       _prog+1, 0, 1
0x0F6C	0xE102      	BNZ         L__ler_bot460
0x0F6E	0x0E02      	MOVLW       2
0x0F70	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot460:
0x0F72	0xE102      	BNZ         L_ler_bot50
;TCC_5.c,439 :: 		un4 = ~un4;                                 //inverte un4
0x0F74	0x0101      	MOVLB       1
0x0F76	0x7B09      	BTG         _un4, BitPos(_un4+0), 1
;TCC_5.c,440 :: 		}
L_ler_bot50:
;TCC_5.c,441 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x0F78	0x0E00      	MOVLW       0
0x0F7A	0x0100      	MOVLB       0
0x0F7C	0x19FA      	XORWF       _prog+1, 0, 1
0x0F7E	0xE102      	BNZ         L__ler_bot461
0x0F80	0x0E03      	MOVLW       3
0x0F82	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot461:
0x0F84	0xE103      	BNZ         L_ler_bot51
;TCC_5.c,443 :: 		qtd_comp4++;                                 //incrementa qtd_comp4
0x0F86	0x0101      	MOVLB       1
0x0F88	0x4B15      	INFSNZ      _qtd_comp4, 1, 1
0x0F8A	0x2B16      	INCF        _qtd_comp4+1, 1, 1
;TCC_5.c,444 :: 		}
L_ler_bot51:
0x0F8C	0x0101      	MOVLB       1
;TCC_5.c,446 :: 		if(qtd_comp4>4) qtd_comp4 = 0x01;             //se quantidade de comprimidos passar de 4, retorna para 1
0x0F8E	0x0E00      	MOVLW       0
0x0F90	0x6E00      	MOVWF       R0 
0x0F92	0x5116      	MOVF        _qtd_comp4+1, 0, 1
0x0F94	0x5C00      	SUBWF       R0, 0 
0x0F96	0xE102      	BNZ         L__ler_bot462
0x0F98	0x5115      	MOVF        _qtd_comp4, 0, 1
0x0F9A	0x0804      	SUBLW       4
L__ler_bot462:
0x0F9C	0xE204      	BC          L_ler_bot52
0x0F9E	0x0E01      	MOVLW       1
0x0FA0	0x6F15      	MOVWF       _qtd_comp4, 1
0x0FA2	0x0E00      	MOVLW       0
0x0FA4	0x6F16      	MOVWF       _qtd_comp4+1, 1
L_ler_bot52:
;TCC_5.c,447 :: 		if(num4>24) num4=0x00;                        //se o numero passar de 24, retorna para 0
0x0FA6	0x0E00      	MOVLW       0
0x0FA8	0x6E00      	MOVWF       R0 
0x0FAA	0x510B      	MOVF        _num4+1, 0, 1
0x0FAC	0x5C00      	SUBWF       R0, 0 
0x0FAE	0xE102      	BNZ         L__ler_bot463
0x0FB0	0x510A      	MOVF        _num4, 0, 1
0x0FB2	0x0818      	SUBLW       24
L__ler_bot463:
0x0FB4	0xE202      	BC          L_ler_bot53
0x0FB6	0x6B0A      	CLRF        _num4, 1
0x0FB8	0x6B0B      	CLRF        _num4+1, 1
L_ler_bot53:
;TCC_5.c,449 :: 		}                                              //end if option==3
L_ler_bot48:
;TCC_5.c,451 :: 		comp  = qtd_comp;
0x0FBA	0xF101C117  	MOVFF       _qtd_comp, _comp
0x0FBE	0xF102C118  	MOVFF       _qtd_comp+1, _comp+1
;TCC_5.c,452 :: 		comp2 = qtd_comp2;
0x0FC2	0xF103C119  	MOVFF       _qtd_comp2, _comp2
0x0FC6	0xF104C11A  	MOVFF       _qtd_comp2+1, _comp2+1
;TCC_5.c,453 :: 		comp3 = qtd_comp3;
0x0FCA	0xF105C113  	MOVFF       _qtd_comp3, _comp3
0x0FCE	0xF106C114  	MOVFF       _qtd_comp3+1, _comp3+1
;TCC_5.c,454 :: 		comp4 = qtd_comp4;                             //igualando as variaveis para despejar o numero certo de comprimidos
0x0FD2	0xF107C115  	MOVFF       _qtd_comp4, _comp4
0x0FD6	0xF108C116  	MOVFF       _qtd_comp4+1, _comp4+1
;TCC_5.c,456 :: 		}                                               //end if BOTAO2 e b2_flag
L_ler_bot29:
;TCC_5.c,459 :: 		if(!BOTAO3) b3_flag=0x01;                       //se botão3 for pressionado, flag do botão3 = 1
0x0FDA	0xB482      	BTFSC       PORTC, 2 
0x0FDC	0xD002      	BRA         L_ler_bot54
0x0FDE	0x0101      	MOVLB       1
0x0FE0	0x870C      	BSF         _b3_flag, BitPos(_b3_flag+0), 1
L_ler_bot54:
;TCC_5.c,461 :: 		if(BOTAO3 && b3_flag)                           //se botão3 for solto e flag do botão3 for 1
0x0FE2	0xA482      	BTFSS       PORTC, 2 
0x0FE4	0xD110      	BRA         L_ler_bot57
0x0FE6	0x0101      	MOVLB       1
0x0FE8	0xA70C      	BTFSS       _b3_flag, BitPos(_b3_flag+0), 1
0x0FEA	0xD10D      	BRA         L_ler_bot57
L__ler_bot383:
;TCC_5.c,463 :: 		LCD_Cmd(_LCD_CLEAR);                           //limpa LCD
0x0FEC	0x0E01      	MOVLW       1
0x0FEE	0x6F25      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x0FF0	0xF000EC58  	CALL        _Lcd_Cmd, 0
;TCC_5.c,464 :: 		b3_flag     =  0x00;                           //limpa flag do botão3
0x0FF4	0x970C      	BCF         _b3_flag, BitPos(_b3_flag+0), 1
;TCC_5.c,465 :: 		if(option==0)                                  //dispenser n°1
0x0FF6	0x0E00      	MOVLW       0
0x0FF8	0x0100      	MOVLB       0
0x0FFA	0x19F8      	XORWF       _option+1, 0, 1
0x0FFC	0xE102      	BNZ         L__ler_bot464
0x0FFE	0x0E00      	MOVLW       0
0x1000	0x19F7      	XORWF       _option, 0, 1
L__ler_bot464:
0x1002	0xE137      	BNZ         L_ler_bot58
;TCC_5.c,467 :: 		if(prog==1)                                   //programação do numero
0x1004	0x0E00      	MOVLW       0
0x1006	0x19FA      	XORWF       _prog+1, 0, 1
0x1008	0xE102      	BNZ         L__ler_bot465
0x100A	0x0E01      	MOVLW       1
0x100C	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot465:
0x100E	0xE105      	BNZ         L_ler_bot59
;TCC_5.c,469 :: 		num--;                                       //decrementa num
0x1010	0x0E01      	MOVLW       1
0x1012	0x0101      	MOVLB       1
0x1014	0x5F11      	SUBWF       _num, 1, 1
0x1016	0x0E00      	MOVLW       0
0x1018	0x5B12      	SUBWFB      _num+1, 1, 1
;TCC_5.c,471 :: 		}
L_ler_bot59:
;TCC_5.c,472 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x101A	0x0E00      	MOVLW       0
0x101C	0x0100      	MOVLB       0
0x101E	0x19FA      	XORWF       _prog+1, 0, 1
0x1020	0xE102      	BNZ         L__ler_bot466
0x1022	0x0E02      	MOVLW       2
0x1024	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot466:
0x1026	0xE102      	BNZ         L_ler_bot60
;TCC_5.c,474 :: 		un = ~un;                                    //inverte un
0x1028	0x0101      	MOVLB       1
0x102A	0x7D09      	BTG         _un, BitPos(_un+0), 1
;TCC_5.c,475 :: 		}
L_ler_bot60:
;TCC_5.c,476 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x102C	0x0E00      	MOVLW       0
0x102E	0x0100      	MOVLB       0
0x1030	0x19FA      	XORWF       _prog+1, 0, 1
0x1032	0xE102      	BNZ         L__ler_bot467
0x1034	0x0E03      	MOVLW       3
0x1036	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot467:
0x1038	0xE105      	BNZ         L_ler_bot61
;TCC_5.c,478 :: 		qtd_comp--;                                  //decrementa qtd_comp3
0x103A	0x0E01      	MOVLW       1
0x103C	0x0101      	MOVLB       1
0x103E	0x5F17      	SUBWF       _qtd_comp, 1, 1
0x1040	0x0E00      	MOVLW       0
0x1042	0x5B18      	SUBWFB      _qtd_comp+1, 1, 1
;TCC_5.c,479 :: 		}
L_ler_bot61:
0x1044	0x0101      	MOVLB       1
;TCC_5.c,481 :: 		if(qtd_comp<1) qtd_comp = 0x04;               //se quantidade de comprimidos passar de 1, retorna para 4
0x1046	0x0E00      	MOVLW       0
0x1048	0x5D18      	SUBWF       _qtd_comp+1, 0, 1
0x104A	0xE102      	BNZ         L__ler_bot468
0x104C	0x0E01      	MOVLW       1
0x104E	0x5D17      	SUBWF       _qtd_comp, 0, 1
L__ler_bot468:
0x1050	0xE204      	BC          L_ler_bot62
0x1052	0x0E04      	MOVLW       4
0x1054	0x6F17      	MOVWF       _qtd_comp, 1
0x1056	0x0E00      	MOVLW       0
0x1058	0x6F18      	MOVWF       _qtd_comp+1, 1
L_ler_bot62:
;TCC_5.c,482 :: 		if(num>24) num=24;                            //se o numero for maior que 24, vai para 24
0x105A	0x0E00      	MOVLW       0
0x105C	0x6E00      	MOVWF       R0 
0x105E	0x5112      	MOVF        _num+1, 0, 1
0x1060	0x5C00      	SUBWF       R0, 0 
0x1062	0xE102      	BNZ         L__ler_bot469
0x1064	0x5111      	MOVF        _num, 0, 1
0x1066	0x0818      	SUBLW       24
L__ler_bot469:
0x1068	0xE204      	BC          L_ler_bot63
0x106A	0x0E18      	MOVLW       24
0x106C	0x6F11      	MOVWF       _num, 1
0x106E	0x0E00      	MOVLW       0
0x1070	0x6F12      	MOVWF       _num+1, 1
L_ler_bot63:
;TCC_5.c,483 :: 		}                                              //end if option==0
L_ler_bot58:
;TCC_5.c,485 :: 		if(option==1)                                  //dispenser n°2
0x1072	0x0E00      	MOVLW       0
0x1074	0x0100      	MOVLB       0
0x1076	0x19F8      	XORWF       _option+1, 0, 1
0x1078	0xE102      	BNZ         L__ler_bot470
0x107A	0x0E01      	MOVLW       1
0x107C	0x19F7      	XORWF       _option, 0, 1
L__ler_bot470:
0x107E	0xE137      	BNZ         L_ler_bot64
;TCC_5.c,487 :: 		if(prog==1)                                   //programação do número
0x1080	0x0E00      	MOVLW       0
0x1082	0x19FA      	XORWF       _prog+1, 0, 1
0x1084	0xE102      	BNZ         L__ler_bot471
0x1086	0x0E01      	MOVLW       1
0x1088	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot471:
0x108A	0xE105      	BNZ         L_ler_bot65
;TCC_5.c,489 :: 		num2--;                                      //decrementa num2
0x108C	0x0E01      	MOVLW       1
0x108E	0x0101      	MOVLB       1
0x1090	0x5F0D      	SUBWF       _num2, 1, 1
0x1092	0x0E00      	MOVLW       0
0x1094	0x5B0E      	SUBWFB      _num2+1, 1, 1
;TCC_5.c,491 :: 		}
L_ler_bot65:
;TCC_5.c,492 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x1096	0x0E00      	MOVLW       0
0x1098	0x0100      	MOVLB       0
0x109A	0x19FA      	XORWF       _prog+1, 0, 1
0x109C	0xE102      	BNZ         L__ler_bot472
0x109E	0x0E02      	MOVLW       2
0x10A0	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot472:
0x10A2	0xE102      	BNZ         L_ler_bot66
;TCC_5.c,494 :: 		un2 = ~un2;                                  //inverte un2
0x10A4	0x0101      	MOVLB       1
0x10A6	0x7F09      	BTG         _un2, BitPos(_un2+0), 1
;TCC_5.c,495 :: 		}
L_ler_bot66:
;TCC_5.c,496 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x10A8	0x0E00      	MOVLW       0
0x10AA	0x0100      	MOVLB       0
0x10AC	0x19FA      	XORWF       _prog+1, 0, 1
0x10AE	0xE102      	BNZ         L__ler_bot473
0x10B0	0x0E03      	MOVLW       3
0x10B2	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot473:
0x10B4	0xE105      	BNZ         L_ler_bot67
;TCC_5.c,498 :: 		qtd_comp2--;                                 //decrementa qtd_comp2
0x10B6	0x0E01      	MOVLW       1
0x10B8	0x0101      	MOVLB       1
0x10BA	0x5F19      	SUBWF       _qtd_comp2, 1, 1
0x10BC	0x0E00      	MOVLW       0
0x10BE	0x5B1A      	SUBWFB      _qtd_comp2+1, 1, 1
;TCC_5.c,499 :: 		}
L_ler_bot67:
0x10C0	0x0101      	MOVLB       1
;TCC_5.c,501 :: 		if(qtd_comp2<1) qtd_comp2 = 0x04;             //se quantidade de comprimidos passar de 1, retorna para 4
0x10C2	0x0E00      	MOVLW       0
0x10C4	0x5D1A      	SUBWF       _qtd_comp2+1, 0, 1
0x10C6	0xE102      	BNZ         L__ler_bot474
0x10C8	0x0E01      	MOVLW       1
0x10CA	0x5D19      	SUBWF       _qtd_comp2, 0, 1
L__ler_bot474:
0x10CC	0xE204      	BC          L_ler_bot68
0x10CE	0x0E04      	MOVLW       4
0x10D0	0x6F19      	MOVWF       _qtd_comp2, 1
0x10D2	0x0E00      	MOVLW       0
0x10D4	0x6F1A      	MOVWF       _qtd_comp2+1, 1
L_ler_bot68:
;TCC_5.c,502 :: 		if(num2>24) num2=24;                          //se o numero for maior que 24, vai para 24
0x10D6	0x0E00      	MOVLW       0
0x10D8	0x6E00      	MOVWF       R0 
0x10DA	0x510E      	MOVF        _num2+1, 0, 1
0x10DC	0x5C00      	SUBWF       R0, 0 
0x10DE	0xE102      	BNZ         L__ler_bot475
0x10E0	0x510D      	MOVF        _num2, 0, 1
0x10E2	0x0818      	SUBLW       24
L__ler_bot475:
0x10E4	0xE204      	BC          L_ler_bot69
0x10E6	0x0E18      	MOVLW       24
0x10E8	0x6F0D      	MOVWF       _num2, 1
0x10EA	0x0E00      	MOVLW       0
0x10EC	0x6F0E      	MOVWF       _num2+1, 1
L_ler_bot69:
;TCC_5.c,504 :: 		}                                              //end if option==1
L_ler_bot64:
;TCC_5.c,506 :: 		if(option==2)                                  //dispenser n°3
0x10EE	0x0E00      	MOVLW       0
0x10F0	0x0100      	MOVLB       0
0x10F2	0x19F8      	XORWF       _option+1, 0, 1
0x10F4	0xE102      	BNZ         L__ler_bot476
0x10F6	0x0E02      	MOVLW       2
0x10F8	0x19F7      	XORWF       _option, 0, 1
L__ler_bot476:
0x10FA	0xE137      	BNZ         L_ler_bot70
;TCC_5.c,508 :: 		if(prog==1)                                   //programação do número
0x10FC	0x0E00      	MOVLW       0
0x10FE	0x19FA      	XORWF       _prog+1, 0, 1
0x1100	0xE102      	BNZ         L__ler_bot477
0x1102	0x0E01      	MOVLW       1
0x1104	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot477:
0x1106	0xE105      	BNZ         L_ler_bot71
;TCC_5.c,510 :: 		num3--;                                      //decrementa num3
0x1108	0x0E01      	MOVLW       1
0x110A	0x0101      	MOVLB       1
0x110C	0x5F0F      	SUBWF       _num3, 1, 1
0x110E	0x0E00      	MOVLW       0
0x1110	0x5B10      	SUBWFB      _num3+1, 1, 1
;TCC_5.c,512 :: 		}
L_ler_bot71:
;TCC_5.c,513 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x1112	0x0E00      	MOVLW       0
0x1114	0x0100      	MOVLB       0
0x1116	0x19FA      	XORWF       _prog+1, 0, 1
0x1118	0xE102      	BNZ         L__ler_bot478
0x111A	0x0E02      	MOVLW       2
0x111C	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot478:
0x111E	0xE102      	BNZ         L_ler_bot72
;TCC_5.c,515 :: 		un3 = ~un3;                                  //inverte un3
0x1120	0x0101      	MOVLB       1
0x1122	0x7909      	BTG         _un3, BitPos(_un3+0), 1
;TCC_5.c,516 :: 		}
L_ler_bot72:
;TCC_5.c,517 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x1124	0x0E00      	MOVLW       0
0x1126	0x0100      	MOVLB       0
0x1128	0x19FA      	XORWF       _prog+1, 0, 1
0x112A	0xE102      	BNZ         L__ler_bot479
0x112C	0x0E03      	MOVLW       3
0x112E	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot479:
0x1130	0xE105      	BNZ         L_ler_bot73
;TCC_5.c,519 :: 		qtd_comp3--;                                 //decrementa qtd_comp3
0x1132	0x0E01      	MOVLW       1
0x1134	0x0101      	MOVLB       1
0x1136	0x5F13      	SUBWF       _qtd_comp3, 1, 1
0x1138	0x0E00      	MOVLW       0
0x113A	0x5B14      	SUBWFB      _qtd_comp3+1, 1, 1
;TCC_5.c,520 :: 		}
L_ler_bot73:
0x113C	0x0101      	MOVLB       1
;TCC_5.c,522 :: 		if(qtd_comp3<1) qtd_comp3 = 0x04;             //se quantidade de comprimidos passar de 1, retorna para 4
0x113E	0x0E00      	MOVLW       0
0x1140	0x5D14      	SUBWF       _qtd_comp3+1, 0, 1
0x1142	0xE102      	BNZ         L__ler_bot480
0x1144	0x0E01      	MOVLW       1
0x1146	0x5D13      	SUBWF       _qtd_comp3, 0, 1
L__ler_bot480:
0x1148	0xE204      	BC          L_ler_bot74
0x114A	0x0E04      	MOVLW       4
0x114C	0x6F13      	MOVWF       _qtd_comp3, 1
0x114E	0x0E00      	MOVLW       0
0x1150	0x6F14      	MOVWF       _qtd_comp3+1, 1
L_ler_bot74:
;TCC_5.c,523 :: 		if(num3>24) num3=24;                          //se o numero for maior que 24, vai para 24
0x1152	0x0E00      	MOVLW       0
0x1154	0x6E00      	MOVWF       R0 
0x1156	0x5110      	MOVF        _num3+1, 0, 1
0x1158	0x5C00      	SUBWF       R0, 0 
0x115A	0xE102      	BNZ         L__ler_bot481
0x115C	0x510F      	MOVF        _num3, 0, 1
0x115E	0x0818      	SUBLW       24
L__ler_bot481:
0x1160	0xE204      	BC          L_ler_bot75
0x1162	0x0E18      	MOVLW       24
0x1164	0x6F0F      	MOVWF       _num3, 1
0x1166	0x0E00      	MOVLW       0
0x1168	0x6F10      	MOVWF       _num3+1, 1
L_ler_bot75:
;TCC_5.c,525 :: 		}                                              //end if option==2
L_ler_bot70:
;TCC_5.c,527 :: 		if(option==3)                                  //dispenser n°4
0x116A	0x0E00      	MOVLW       0
0x116C	0x0100      	MOVLB       0
0x116E	0x19F8      	XORWF       _option+1, 0, 1
0x1170	0xE102      	BNZ         L__ler_bot482
0x1172	0x0E03      	MOVLW       3
0x1174	0x19F7      	XORWF       _option, 0, 1
L__ler_bot482:
0x1176	0xE137      	BNZ         L_ler_bot76
;TCC_5.c,529 :: 		if(prog==1)                                   //programação do número
0x1178	0x0E00      	MOVLW       0
0x117A	0x19FA      	XORWF       _prog+1, 0, 1
0x117C	0xE102      	BNZ         L__ler_bot483
0x117E	0x0E01      	MOVLW       1
0x1180	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot483:
0x1182	0xE105      	BNZ         L_ler_bot77
;TCC_5.c,531 :: 		num4--;                                      //decrementa num4
0x1184	0x0E01      	MOVLW       1
0x1186	0x0101      	MOVLB       1
0x1188	0x5F0A      	SUBWF       _num4, 1, 1
0x118A	0x0E00      	MOVLW       0
0x118C	0x5B0B      	SUBWFB      _num4+1, 1, 1
;TCC_5.c,533 :: 		}
L_ler_bot77:
;TCC_5.c,534 :: 		if (prog==2)                                  //programação de unidade(hora/dia)
0x118E	0x0E00      	MOVLW       0
0x1190	0x0100      	MOVLB       0
0x1192	0x19FA      	XORWF       _prog+1, 0, 1
0x1194	0xE102      	BNZ         L__ler_bot484
0x1196	0x0E02      	MOVLW       2
0x1198	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot484:
0x119A	0xE102      	BNZ         L_ler_bot78
;TCC_5.c,536 :: 		un4 = ~un4;                                  //inverte un4
0x119C	0x0101      	MOVLB       1
0x119E	0x7B09      	BTG         _un4, BitPos(_un4+0), 1
;TCC_5.c,537 :: 		}
L_ler_bot78:
;TCC_5.c,538 :: 		if (prog==3)                                  //programação de quantidade de remédio
0x11A0	0x0E00      	MOVLW       0
0x11A2	0x0100      	MOVLB       0
0x11A4	0x19FA      	XORWF       _prog+1, 0, 1
0x11A6	0xE102      	BNZ         L__ler_bot485
0x11A8	0x0E03      	MOVLW       3
0x11AA	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot485:
0x11AC	0xE105      	BNZ         L_ler_bot79
;TCC_5.c,540 :: 		qtd_comp4--;                                 //decrementa qtd_comp4
0x11AE	0x0E01      	MOVLW       1
0x11B0	0x0101      	MOVLB       1
0x11B2	0x5F15      	SUBWF       _qtd_comp4, 1, 1
0x11B4	0x0E00      	MOVLW       0
0x11B6	0x5B16      	SUBWFB      _qtd_comp4+1, 1, 1
;TCC_5.c,541 :: 		}
L_ler_bot79:
0x11B8	0x0101      	MOVLB       1
;TCC_5.c,543 :: 		if(qtd_comp4<1) qtd_comp4 = 0x04;             //se quantidade de comprimidos passar de 1, retorna para 4
0x11BA	0x0E00      	MOVLW       0
0x11BC	0x5D16      	SUBWF       _qtd_comp4+1, 0, 1
0x11BE	0xE102      	BNZ         L__ler_bot486
0x11C0	0x0E01      	MOVLW       1
0x11C2	0x5D15      	SUBWF       _qtd_comp4, 0, 1
L__ler_bot486:
0x11C4	0xE204      	BC          L_ler_bot80
0x11C6	0x0E04      	MOVLW       4
0x11C8	0x6F15      	MOVWF       _qtd_comp4, 1
0x11CA	0x0E00      	MOVLW       0
0x11CC	0x6F16      	MOVWF       _qtd_comp4+1, 1
L_ler_bot80:
;TCC_5.c,545 :: 		if(num4>24) num4=24;                          //se o numero for maior que 24, vai para 24
0x11CE	0x0E00      	MOVLW       0
0x11D0	0x6E00      	MOVWF       R0 
0x11D2	0x510B      	MOVF        _num4+1, 0, 1
0x11D4	0x5C00      	SUBWF       R0, 0 
0x11D6	0xE102      	BNZ         L__ler_bot487
0x11D8	0x510A      	MOVF        _num4, 0, 1
0x11DA	0x0818      	SUBLW       24
L__ler_bot487:
0x11DC	0xE204      	BC          L_ler_bot81
0x11DE	0x0E18      	MOVLW       24
0x11E0	0x6F0A      	MOVWF       _num4, 1
0x11E2	0x0E00      	MOVLW       0
0x11E4	0x6F0B      	MOVWF       _num4+1, 1
L_ler_bot81:
;TCC_5.c,547 :: 		}                                              //end if option==3
L_ler_bot76:
;TCC_5.c,549 :: 		comp  = qtd_comp;
0x11E6	0xF101C117  	MOVFF       _qtd_comp, _comp
0x11EA	0xF102C118  	MOVFF       _qtd_comp+1, _comp+1
;TCC_5.c,550 :: 		comp2 = qtd_comp2;
0x11EE	0xF103C119  	MOVFF       _qtd_comp2, _comp2
0x11F2	0xF104C11A  	MOVFF       _qtd_comp2+1, _comp2+1
;TCC_5.c,551 :: 		comp3 = qtd_comp3;
0x11F6	0xF105C113  	MOVFF       _qtd_comp3, _comp3
0x11FA	0xF106C114  	MOVFF       _qtd_comp3+1, _comp3+1
;TCC_5.c,552 :: 		comp4 = qtd_comp4;                             //igualando as variaveis para despejar o numero certo de comprimidos
0x11FE	0xF107C115  	MOVFF       _qtd_comp4, _comp4
0x1202	0xF108C116  	MOVFF       _qtd_comp4+1, _comp4+1
;TCC_5.c,554 :: 		}                                               //end if botão3 e b3_flag
L_ler_bot57:
;TCC_5.c,557 :: 		if(!BOTAO4) b4_flag=0x01;                       //se botão4 for pressionado, flag do botão4 = 1
0x1206	0xB882      	BTFSC       PORTC, 4 
0x1208	0xD002      	BRA         L_ler_bot82
0x120A	0x0101      	MOVLB       1
0x120C	0x830C      	BSF         _b4_flag, BitPos(_b4_flag+0), 1
L_ler_bot82:
;TCC_5.c,559 :: 		if(BOTAO4 && b4_flag)                           //se botão4 for solto e flag do botão4 for 1
0x120E	0xA882      	BTFSS       PORTC, 4 
0x1210	0xD044      	BRA         L_ler_bot85
0x1212	0x0101      	MOVLB       1
0x1214	0xA30C      	BTFSS       _b4_flag, BitPos(_b4_flag+0), 1
0x1216	0xD041      	BRA         L_ler_bot85
L__ler_bot382:
;TCC_5.c,561 :: 		LCD_Cmd(_LCD_CLEAR);                          //limpa LCD
0x1218	0x0E01      	MOVLW       1
0x121A	0x6F25      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x121C	0xF000EC58  	CALL        _Lcd_Cmd, 0
;TCC_5.c,562 :: 		b4_flag    =  0x00;                           //limpa flag do botão4
0x1220	0x930C      	BCF         _b4_flag, BitPos(_b4_flag+0), 1
;TCC_5.c,563 :: 		if(num!=0 || num2!=0 || num3!=0 || num4!=0)    //se num, num2, num3 ou num4 for diferente 0
0x1222	0x0E00      	MOVLW       0
0x1224	0x1912      	XORWF       _num+1, 0, 1
0x1226	0xE102      	BNZ         L__ler_bot488
0x1228	0x0E00      	MOVLW       0
0x122A	0x1911      	XORWF       _num, 0, 1
L__ler_bot488:
0x122C	0xE113      	BNZ         L__ler_bot381
0x122E	0x0E00      	MOVLW       0
0x1230	0x190E      	XORWF       _num2+1, 0, 1
0x1232	0xE102      	BNZ         L__ler_bot489
0x1234	0x0E00      	MOVLW       0
0x1236	0x190D      	XORWF       _num2, 0, 1
L__ler_bot489:
0x1238	0xE10D      	BNZ         L__ler_bot381
0x123A	0x0E00      	MOVLW       0
0x123C	0x1910      	XORWF       _num3+1, 0, 1
0x123E	0xE102      	BNZ         L__ler_bot490
0x1240	0x0E00      	MOVLW       0
0x1242	0x190F      	XORWF       _num3, 0, 1
L__ler_bot490:
0x1244	0xE107      	BNZ         L__ler_bot381
0x1246	0x0E00      	MOVLW       0
0x1248	0x190B      	XORWF       _num4+1, 0, 1
0x124A	0xE102      	BNZ         L__ler_bot491
0x124C	0x0E00      	MOVLW       0
0x124E	0x190A      	XORWF       _num4, 0, 1
L__ler_bot491:
0x1250	0xE101      	BNZ         L__ler_bot381
0x1252	0xD023      	BRA         L_ler_bot88
L__ler_bot381:
;TCC_5.c,565 :: 		if(prog==0)                                   //se prog = 0
0x1254	0x0E00      	MOVLW       0
0x1256	0x0100      	MOVLB       0
0x1258	0x19FA      	XORWF       _prog+1, 0, 1
0x125A	0xE102      	BNZ         L__ler_bot492
0x125C	0x0E00      	MOVLW       0
0x125E	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot492:
0x1260	0xE11C      	BNZ         L_ler_bot89
;TCC_5.c,567 :: 		if(!toque && !toque2 && !toque3 && !toque4)  //se nenhum contador tiver finalizado...
0x1262	0x0101      	MOVLB       1
0x1264	0xB90C      	BTFSC       _toque, BitPos(_toque+0), 1
0x1266	0xD019      	BRA         L_ler_bot92
0x1268	0x0100      	MOVLB       0
0x126A	0xB5FF      	BTFSC       _toque2, BitPos(_toque2+0), 1
0x126C	0xD016      	BRA         L_ler_bot92
0x126E	0xB3FF      	BTFSC       _toque3, BitPos(_toque3+0), 1
0x1270	0xD014      	BRA         L_ler_bot92
0x1272	0xB7FF      	BTFSC       _toque4, BitPos(_toque4+0), 1
0x1274	0xD012      	BRA         L_ler_bot92
L__ler_bot380:
;TCC_5.c,569 :: 		if(!ligar)                                  //se bit de ligar = 0 (desligado)
0x1276	0x0101      	MOVLB       1
0x1278	0xB709      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x127A	0xD009      	BRA         L_ler_bot93
;TCC_5.c,571 :: 		temp =0x00;                                //zera temp
0x127C	0x0100      	MOVLB       0
0x127E	0x6BD3      	CLRF        _temp, 1
0x1280	0x6BD4      	CLRF        _temp+1, 1
;TCC_5.c,572 :: 		temp2=0x00;                                //zera temp2
0x1282	0x6BCF      	CLRF        _temp2, 1
0x1284	0x6BD0      	CLRF        _temp2+1, 1
;TCC_5.c,573 :: 		temp3=0x00;                                //zera temp3
0x1286	0x6BCD      	CLRF        _temp3, 1
0x1288	0x6BCE      	CLRF        _temp3+1, 1
;TCC_5.c,574 :: 		temp4=0x00;                                //zera temp4
0x128A	0x6BD1      	CLRF        _temp4, 1
0x128C	0x6BD2      	CLRF        _temp4+1, 1
;TCC_5.c,576 :: 		}                                           //end if !ligar
L_ler_bot93:
;TCC_5.c,577 :: 		ligar = ~ligar;                              //inverte ligar
0x128E	0x0101      	MOVLB       1
0x1290	0x7709      	BTG         _ligar, BitPos(_ligar+0), 1
;TCC_5.c,578 :: 		if(!ligar) display2 = 0x01;                  //se ligar for 0, bit display2 = 1
0x1292	0xB709      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x1294	0xD002      	BRA         L_ler_bot94
0x1296	0x0100      	MOVLB       0
0x1298	0x81FF      	BSF         _display2, BitPos(_display2+0), 1
L_ler_bot94:
;TCC_5.c,580 :: 		}                                            //end if !toque && !toque2 && !toque3 && !toque4
L_ler_bot92:
;TCC_5.c,582 :: 		}                                             //end if prog==0
L_ler_bot89:
;TCC_5.c,584 :: 		}                                              //end if num!=0 || num2!=0 ||num3!=0 || num4!=0
L_ler_bot88:
;TCC_5.c,586 :: 		}                                               //end if BOTAO4 && b4_flag
L_ler_bot85:
;TCC_5.c,588 :: 		if(!un)                                         //se un = 0
0x129A	0x0101      	MOVLB       1
0x129C	0xBD09      	BTFSC       _un, BitPos(_un+0), 1
0x129E	0xD004      	BRA         L_ler_bot95
;TCC_5.c,590 :: 		mult = num * 1;                                //mult é num * 3600 (hora)
0x12A0	0xF0DBC111  	MOVFF       _num, _mult
0x12A4	0xF0DCC112  	MOVFF       _num+1, _mult+1
;TCC_5.c,591 :: 		}
L_ler_bot95:
;TCC_5.c,592 :: 		if(un)                                          //se un = 1
0x12A8	0xAD09      	BTFSS       _un, BitPos(_un+0), 1
0x12AA	0xD00E      	BRA         L_ler_bot96
;TCC_5.c,594 :: 		mult = num * 5;                                //mult é num * 86400 (dia)
0x12AC	0xF000C111  	MOVFF       _num, R0
0x12B0	0xF001C112  	MOVFF       _num+1, R1
0x12B4	0x0E05      	MOVLW       5
0x12B6	0x6E04      	MOVWF       R4 
0x12B8	0x0E00      	MOVLW       0
0x12BA	0x6E05      	MOVWF       R5 
0x12BC	0xF003EC16  	CALL        _Mul_16X16_U, 0
0x12C0	0xF0DBC000  	MOVFF       R0, _mult
0x12C4	0xF0DCC001  	MOVFF       R1, _mult+1
;TCC_5.c,595 :: 		}
L_ler_bot96:
;TCC_5.c,597 :: 		if(!un2)                                        //se un2 = 0
0x12C8	0xBF09      	BTFSC       _un2, BitPos(_un2+0), 1
0x12CA	0xD004      	BRA         L_ler_bot97
;TCC_5.c,599 :: 		mult2 = num2 * 1;                              //mult2 é num2 * 3600 (hora)
0x12CC	0xF0D9C10D  	MOVFF       _num2, _mult2
0x12D0	0xF0DAC10E  	MOVFF       _num2+1, _mult2+1
;TCC_5.c,600 :: 		}
L_ler_bot97:
;TCC_5.c,601 :: 		if(un2)                                         //se un2 = 1
0x12D4	0xAF09      	BTFSS       _un2, BitPos(_un2+0), 1
0x12D6	0xD00E      	BRA         L_ler_bot98
;TCC_5.c,603 :: 		mult2 = num2 * 5;                              //mult2 é num2 * 86400 (dia)
0x12D8	0xF000C10D  	MOVFF       _num2, R0
0x12DC	0xF001C10E  	MOVFF       _num2+1, R1
0x12E0	0x0E05      	MOVLW       5
0x12E2	0x6E04      	MOVWF       R4 
0x12E4	0x0E00      	MOVLW       0
0x12E6	0x6E05      	MOVWF       R5 
0x12E8	0xF003EC16  	CALL        _Mul_16X16_U, 0
0x12EC	0xF0D9C000  	MOVFF       R0, _mult2
0x12F0	0xF0DAC001  	MOVFF       R1, _mult2+1
;TCC_5.c,604 :: 		}
L_ler_bot98:
;TCC_5.c,606 :: 		if(!un3)                                        //se un3 = 0
0x12F4	0xB909      	BTFSC       _un3, BitPos(_un3+0), 1
0x12F6	0xD004      	BRA         L_ler_bot99
;TCC_5.c,608 :: 		mult3 = num3 * 1;                              //mult3 é num3 * 3600 (hora)
0x12F8	0xF0DFC10F  	MOVFF       _num3, _mult3
0x12FC	0xF0E0C110  	MOVFF       _num3+1, _mult3+1
;TCC_5.c,609 :: 		}
L_ler_bot99:
;TCC_5.c,610 :: 		if(un3)                                         //se un3 = 1
0x1300	0xA909      	BTFSS       _un3, BitPos(_un3+0), 1
0x1302	0xD00E      	BRA         L_ler_bot100
;TCC_5.c,612 :: 		mult3 = num3 * 5;                              //mult3 é num3 * 86400 (dia)
0x1304	0xF000C10F  	MOVFF       _num3, R0
0x1308	0xF001C110  	MOVFF       _num3+1, R1
0x130C	0x0E05      	MOVLW       5
0x130E	0x6E04      	MOVWF       R4 
0x1310	0x0E00      	MOVLW       0
0x1312	0x6E05      	MOVWF       R5 
0x1314	0xF003EC16  	CALL        _Mul_16X16_U, 0
0x1318	0xF0DFC000  	MOVFF       R0, _mult3
0x131C	0xF0E0C001  	MOVFF       R1, _mult3+1
;TCC_5.c,613 :: 		}
L_ler_bot100:
;TCC_5.c,615 :: 		if(!un4)                                        //se un4 = 0
0x1320	0xBB09      	BTFSC       _un4, BitPos(_un4+0), 1
0x1322	0xD004      	BRA         L_ler_bot101
;TCC_5.c,617 :: 		mult4 = num4 * 1;                              //mult4 é num4 * 3600 (hora)
0x1324	0xF0DDC10A  	MOVFF       _num4, _mult4
0x1328	0xF0DEC10B  	MOVFF       _num4+1, _mult4+1
;TCC_5.c,618 :: 		}
L_ler_bot101:
;TCC_5.c,619 :: 		if(un4)                                         //se un4 = 1
0x132C	0xAB09      	BTFSS       _un4, BitPos(_un4+0), 1
0x132E	0xD00E      	BRA         L_ler_bot102
;TCC_5.c,621 :: 		mult4 = num4 * 5;                              //mult4 é num4 * 86400 (dia)
0x1330	0xF000C10A  	MOVFF       _num4, R0
0x1334	0xF001C10B  	MOVFF       _num4+1, R1
0x1338	0x0E05      	MOVLW       5
0x133A	0x6E04      	MOVWF       R4 
0x133C	0x0E00      	MOVLW       0
0x133E	0x6E05      	MOVWF       R5 
0x1340	0xF003EC16  	CALL        _Mul_16X16_U, 0
0x1344	0xF0DDC000  	MOVFF       R0, _mult4
0x1348	0xF0DEC001  	MOVFF       R1, _mult4+1
;TCC_5.c,622 :: 		}
L_ler_bot102:
;TCC_5.c,625 :: 		if(!BOTAO5) b5_flag = 0x01;                     //se botão5 for pressionado, flag do botão5 = 1
0x134C	0xBA82      	BTFSC       PORTC, 5 
0x134E	0xD002      	BRA         L_ler_bot103
0x1350	0x0100      	MOVLB       0
0x1352	0x89FF      	BSF         _b5_flag, BitPos(_b5_flag+0), 1
L_ler_bot103:
;TCC_5.c,627 :: 		if(BOTAO5 && b5_flag)                           //se botão5 for solto e flag do botão5 for 1
0x1354	0xAA82      	BTFSS       PORTC, 5 
0x1356	0xD03F      	BRA         L_ler_bot106
0x1358	0x0100      	MOVLB       0
0x135A	0xA9FF      	BTFSS       _b5_flag, BitPos(_b5_flag+0), 1
0x135C	0xD03C      	BRA         L_ler_bot106
L__ler_bot379:
;TCC_5.c,629 :: 		LCD_Cmd(_LCD_CLEAR);                           //limpa LCD
0x135E	0x0E01      	MOVLW       1
0x1360	0x0101      	MOVLB       1
0x1362	0x6F25      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x1364	0xF000EC58  	CALL        _Lcd_Cmd, 0
;TCC_5.c,630 :: 		b5_flag = 0x00;                                //limpa flag do botão5
0x1368	0x0100      	MOVLB       0
0x136A	0x99FF      	BCF         _b5_flag, BitPos(_b5_flag+0), 1
;TCC_5.c,631 :: 		if(prog != 0)                                  //se prog for diferente de 0
0x136C	0x0E00      	MOVLW       0
0x136E	0x19FA      	XORWF       _prog+1, 0, 1
0x1370	0xE102      	BNZ         L__ler_bot493
0x1372	0x0E00      	MOVLW       0
0x1374	0x19F9      	XORWF       _prog, 0, 1
L__ler_bot493:
0x1376	0xE00A      	BZ          L_ler_bot107
;TCC_5.c,633 :: 		option++;                                     //incrementa option
0x1378	0x4BF7      	INFSNZ      _option, 1, 1
0x137A	0x2BF8      	INCF        _option+1, 1, 1
;TCC_5.c,634 :: 		if(option == 4) option=0x00;                  //se option for 4, option = 0
0x137C	0x0E00      	MOVLW       0
0x137E	0x19F8      	XORWF       _option+1, 0, 1
0x1380	0xE102      	BNZ         L__ler_bot494
0x1382	0x0E04      	MOVLW       4
0x1384	0x19F7      	XORWF       _option, 0, 1
L__ler_bot494:
0x1386	0xE102      	BNZ         L_ler_bot108
0x1388	0x6BF7      	CLRF        _option, 1
0x138A	0x6BF8      	CLRF        _option+1, 1
L_ler_bot108:
;TCC_5.c,635 :: 		}
L_ler_bot107:
;TCC_5.c,637 :: 		if(toque || toque2 || toque3 || toque4)       //se algum comando do SOM estiver ativado...
0x138C	0x0101      	MOVLB       1
0x138E	0xB90C      	BTFSC       _toque, BitPos(_toque+0), 1
0x1390	0xD008      	BRA         L__ler_bot378
0x1392	0x0100      	MOVLB       0
0x1394	0xB5FF      	BTFSC       _toque2, BitPos(_toque2+0), 1
0x1396	0xD005      	BRA         L__ler_bot378
0x1398	0xB3FF      	BTFSC       _toque3, BitPos(_toque3+0), 1
0x139A	0xD003      	BRA         L__ler_bot378
0x139C	0xB7FF      	BTFSC       _toque4, BitPos(_toque4+0), 1
0x139E	0xD001      	BRA         L__ler_bot378
0x13A0	0xD01A      	BRA         L_ler_bot111
L__ler_bot378:
;TCC_5.c,639 :: 		if(toque)temp_ligado=0x00;                    //se for o toque 1, zera o contador 1
0x13A2	0x0101      	MOVLB       1
0x13A4	0xA90C      	BTFSS       _toque, BitPos(_toque+0), 1
0x13A6	0xD003      	BRA         L_ler_bot112
0x13A8	0x0100      	MOVLB       0
0x13AA	0x6BD7      	CLRF        _temp_ligado, 1
0x13AC	0x6BD8      	CLRF        _temp_ligado+1, 1
L_ler_bot112:
0x13AE	0x0100      	MOVLB       0
;TCC_5.c,640 :: 		if(toque2)temp_ligado2=0x00;                  //se for o toque 2, zera o contador 2
0x13B0	0xA5FF      	BTFSS       _toque2, BitPos(_toque2+0), 1
0x13B2	0xD002      	BRA         L_ler_bot113
0x13B4	0x6BD5      	CLRF        _temp_ligado2, 1
0x13B6	0x6BD6      	CLRF        _temp_ligado2+1, 1
L_ler_bot113:
;TCC_5.c,641 :: 		if(toque3)temp_ligado3=0x00;                  //se for o toque 3, zera o contador 3
0x13B8	0xA3FF      	BTFSS       _toque3, BitPos(_toque3+0), 1
0x13BA	0xD002      	BRA         L_ler_bot114
0x13BC	0x6A51      	CLRF        _temp_ligado3 
0x13BE	0x6A52      	CLRF        _temp_ligado3+1 
L_ler_bot114:
;TCC_5.c,642 :: 		if(toque4)temp_ligado4=0x00;                  //se for o toque 4, zera o contador 4
0x13C0	0xA7FF      	BTFSS       _toque4, BitPos(_toque4+0), 1
0x13C2	0xD002      	BRA         L_ler_bot115
0x13C4	0x6A4F      	CLRF        _temp_ligado4 
0x13C6	0x6A50      	CLRF        _temp_ligado4+1 
L_ler_bot115:
;TCC_5.c,643 :: 		toque =0x00;
0x13C8	0x0101      	MOVLB       1
0x13CA	0x990C      	BCF         _toque, BitPos(_toque+0), 1
;TCC_5.c,644 :: 		toque2=0x00;
0x13CC	0x0100      	MOVLB       0
0x13CE	0x95FF      	BCF         _toque2, BitPos(_toque2+0), 1
;TCC_5.c,645 :: 		toque3=0x00;
0x13D0	0x93FF      	BCF         _toque3, BitPos(_toque3+0), 1
;TCC_5.c,646 :: 		toque4=0x00;                                 //zera todos os bits de SOM
0x13D2	0x97FF      	BCF         _toque4, BitPos(_toque4+0), 1
;TCC_5.c,647 :: 		SOM=0x00;
0x13D4	0x9480      	BCF         PORTA, 2 
;TCC_5.c,649 :: 		}                                             //end if toque || toque2 || toque3 || toque4
L_ler_bot111:
;TCC_5.c,651 :: 		}                                               //end if BOTAO5 && b5_flag
L_ler_bot106:
;TCC_5.c,653 :: 		}                                                 //end ler_bot()
L_end_ler_bot:
0x13D6	0x0012      	RETURN      0
; end of _ler_bot
_disp:
;TCC_5.c,735 :: 		void disp()
;TCC_5.c,737 :: 		if(!ligar && prog==0)                           //se ligar for 0 e prog for 0
0x13D8	0x0101      	MOVLB       1
0x13DA	0xB709      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x13DC	0xD077      	BRA         L_disp145
0x13DE	0x0E00      	MOVLW       0
0x13E0	0x0100      	MOVLB       0
0x13E2	0x19FA      	XORWF       _prog+1, 0, 1
0x13E4	0xE102      	BNZ         L__disp519
0x13E6	0x0E00      	MOVLW       0
0x13E8	0x19F9      	XORWF       _prog, 0, 1
L__disp519:
0x13EA	0xE170      	BNZ         L_disp145
L__disp393:
;TCC_5.c,739 :: 		if(!display && !display2)                      //se os bits diplay e display2 forem 0
0x13EC	0x0101      	MOVLB       1
0x13EE	0xBB0C      	BTFSC       _display, BitPos(_display+0), 1
0x13F0	0xD019      	BRA         L_disp148
0x13F2	0x0100      	MOVLB       0
0x13F4	0xB1FF      	BTFSC       _display2, BitPos(_display2+0), 1
0x13F6	0xD016      	BRA         L_disp148
L__disp392:
;TCC_5.c,741 :: 		LCD_Out(1,1,"  DISPENSER DE  ");             //exibe "DISPENSER DE"
0x13F8	0x0E01      	MOVLW       1
0x13FA	0x0101      	MOVLB       1
0x13FC	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x13FE	0x0E01      	MOVLW       1
0x1400	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x1402	0x0E18      	MOVLW       ?lstr1_TCC_5
0x1404	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x1406	0x0E00      	MOVLW       hi_addr(?lstr1_TCC_5)
0x1408	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x140A	0xF002EC9E  	CALL        _Lcd_Out, 0
;TCC_5.c,742 :: 		LCD_Out(2,1,"    REMEDIOS    ");             //      "  REMEDIOS  "
0x140E	0x0E02      	MOVLW       2
0x1410	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x1412	0x0E01      	MOVLW       1
0x1414	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x1416	0x0E3E      	MOVLW       ?lstr2_TCC_5
0x1418	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x141A	0x0E00      	MOVLW       hi_addr(?lstr2_TCC_5)
0x141C	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x141E	0xF002EC9E  	CALL        _Lcd_Out, 0
;TCC_5.c,743 :: 		}
0x1422	0xD054      	BRA         L_disp149
L_disp148:
0x1424	0x0101      	MOVLB       1
;TCC_5.c,746 :: 		if(display && !display2)                      //se bits display for 1 e display2 for 0
0x1426	0xAB0C      	BTFSS       _display, BitPos(_display+0), 1
0x1428	0xD027      	BRA         L_disp152
0x142A	0x0100      	MOVLB       0
0x142C	0xB1FF      	BTFSC       _display2, BitPos(_display2+0), 1
0x142E	0xD024      	BRA         L_disp152
L__disp391:
;TCC_5.c,748 :: 		display=0x00;                                //limpa bit display
0x1430	0x0101      	MOVLB       1
0x1432	0x9B0C      	BCF         _display, BitPos(_display+0), 1
;TCC_5.c,749 :: 		LCD_Out(1,1,"ETEC LAURO GOMES");             //exibe "ETEC LAURO GOMES"
0x1434	0x0E01      	MOVLW       1
0x1436	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x1438	0x0E01      	MOVLW       1
0x143A	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x143C	0x0E2D      	MOVLW       ?lstr3_TCC_5
0x143E	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x1440	0x0E00      	MOVLW       hi_addr(?lstr3_TCC_5)
0x1442	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x1444	0xF002EC9E  	CALL        _Lcd_Out, 0
;TCC_5.c,750 :: 		LCD_Out(2,1,"  3A MECA 2021  ");             //      "  3A MECA 2021  "
0x1448	0x0E02      	MOVLW       2
0x144A	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x144C	0x0E01      	MOVLW       1
0x144E	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x1450	0x0E9A      	MOVLW       ?lstr4_TCC_5
0x1452	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x1454	0x0E00      	MOVLW       hi_addr(?lstr4_TCC_5)
0x1456	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x1458	0xF002EC9E  	CALL        _Lcd_Out, 0
;TCC_5.c,751 :: 		delay_ms(1000);                              //espera 1 segundo
0x145C	0x0E0B      	MOVLW       11
0x145E	0x6E0B      	MOVWF       R11, 0
0x1460	0x0E26      	MOVLW       38
0x1462	0x6E0C      	MOVWF       R12, 0
0x1464	0x0E5D      	MOVLW       93
0x1466	0x6E0D      	MOVWF       R13, 0
L_disp153:
0x1468	0x2E0D      	DECFSZ      R13, 1, 0
0x146A	0xD7FE      	BRA         L_disp153
0x146C	0x2E0C      	DECFSZ      R12, 1, 0
0x146E	0xD7FC      	BRA         L_disp153
0x1470	0x2E0B      	DECFSZ      R11, 1, 0
0x1472	0xD7FA      	BRA         L_disp153
0x1474	0x0000      	NOP
0x1476	0x0000      	NOP
;TCC_5.c,752 :: 		}
L_disp152:
0x1478	0x0101      	MOVLB       1
;TCC_5.c,753 :: 		if(!display && display2)                      //se os bits display for 0 e display2 for 1
0x147A	0xBB0C      	BTFSC       _display, BitPos(_display+0), 1
0x147C	0xD027      	BRA         L_disp156
0x147E	0x0100      	MOVLB       0
0x1480	0xA1FF      	BTFSS       _display2, BitPos(_display2+0), 1
0x1482	0xD024      	BRA         L_disp156
L__disp390:
;TCC_5.c,755 :: 		display2=0x00;                               //limpa bit display2
0x1484	0x91FF      	BCF         _display2, BitPos(_display2+0), 1
;TCC_5.c,756 :: 		LCD_Out(1,1,"     PARANDO    ");             //exibe "     PARANDO    "
0x1486	0x0E01      	MOVLW       1
0x1488	0x0101      	MOVLB       1
0x148A	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x148C	0x0E01      	MOVLW       1
0x148E	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x1490	0x0E89      	MOVLW       ?lstr5_TCC_5
0x1492	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x1494	0x0E00      	MOVLW       hi_addr(?lstr5_TCC_5)
0x1496	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x1498	0xF002EC9E  	CALL        _Lcd_Out, 0
;TCC_5.c,757 :: 		LCD_Out(2,1,"     CONTAGEM   ");             //      "     CONTAGEM   "
0x149C	0x0E02      	MOVLW       2
0x149E	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x14A0	0x0E01      	MOVLW       1
0x14A2	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x14A4	0x0EBC      	MOVLW       ?lstr6_TCC_5
0x14A6	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x14A8	0x0E00      	MOVLW       hi_addr(?lstr6_TCC_5)
0x14AA	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x14AC	0xF002EC9E  	CALL        _Lcd_Out, 0
;TCC_5.c,758 :: 		delay_ms(1000);                              //espera 1 segundo
0x14B0	0x0E0B      	MOVLW       11
0x14B2	0x6E0B      	MOVWF       R11, 0
0x14B4	0x0E26      	MOVLW       38
0x14B6	0x6E0C      	MOVWF       R12, 0
0x14B8	0x0E5D      	MOVLW       93
0x14BA	0x6E0D      	MOVWF       R13, 0
L_disp157:
0x14BC	0x2E0D      	DECFSZ      R13, 1, 0
0x14BE	0xD7FE      	BRA         L_disp157
0x14C0	0x2E0C      	DECFSZ      R12, 1, 0
0x14C2	0xD7FC      	BRA         L_disp157
0x14C4	0x2E0B      	DECFSZ      R11, 1, 0
0x14C6	0xD7FA      	BRA         L_disp157
0x14C8	0x0000      	NOP
0x14CA	0x0000      	NOP
;TCC_5.c,759 :: 		}
L_disp156:
;TCC_5.c,760 :: 		}                                              //end else
L_disp149:
;TCC_5.c,761 :: 		}                                               //end if !ligar && prog==0
L_disp145:
;TCC_5.c,763 :: 		if(prog==1)                                     //programação de numeros
0x14CC	0x0E00      	MOVLW       0
0x14CE	0x0100      	MOVLB       0
0x14D0	0x19FA      	XORWF       _prog+1, 0, 1
0x14D2	0xE102      	BNZ         L__disp520
0x14D4	0x0E01      	MOVLW       1
0x14D6	0x19F9      	XORWF       _prog, 0, 1
L__disp520:
0x14D8	0xE14D      	BNZ         L_disp158
;TCC_5.c,765 :: 		LCD_Out(1,1,"PROGRAME NUMERO:");               //exibe "PROGRAME NUMERO:
0x14DA	0x0E01      	MOVLW       1
0x14DC	0x0101      	MOVLB       1
0x14DE	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x14E0	0x0E01      	MOVLW       1
0x14E2	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x14E4	0x0EAB      	MOVLW       ?lstr7_TCC_5
0x14E6	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x14E8	0x0E00      	MOVLW       hi_addr(?lstr7_TCC_5)
0x14EA	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x14EC	0xF002EC9E  	CALL        _Lcd_Out, 0
;TCC_5.c,766 :: 		num_un();                                      //executa num_un
0x14F0	0xF003EC3E  	CALL        _num_un, 0
;TCC_5.c,767 :: 		if(option==0) LCD_Chr(2,1,'1');               //se option for 0, exibe "1"
0x14F4	0x0E00      	MOVLW       0
0x14F6	0x0100      	MOVLB       0
0x14F8	0x19F8      	XORWF       _option+1, 0, 1
0x14FA	0xE102      	BNZ         L__disp521
0x14FC	0x0E00      	MOVLW       0
0x14FE	0x19F7      	XORWF       _option, 0, 1
L__disp521:
0x1500	0xE109      	BNZ         L_disp159
0x1502	0x0E02      	MOVLW       2
0x1504	0x0101      	MOVLB       1
0x1506	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x1508	0x0E01      	MOVLW       1
0x150A	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x150C	0x0E31      	MOVLW       49
0x150E	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1510	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp159:
;TCC_5.c,768 :: 		if(option==1) LCD_Chr(2,1,'2');               //se option for 1, exibe "2"
0x1514	0x0E00      	MOVLW       0
0x1516	0x0100      	MOVLB       0
0x1518	0x19F8      	XORWF       _option+1, 0, 1
0x151A	0xE102      	BNZ         L__disp522
0x151C	0x0E01      	MOVLW       1
0x151E	0x19F7      	XORWF       _option, 0, 1
L__disp522:
0x1520	0xE109      	BNZ         L_disp160
0x1522	0x0E02      	MOVLW       2
0x1524	0x0101      	MOVLB       1
0x1526	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x1528	0x0E01      	MOVLW       1
0x152A	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x152C	0x0E32      	MOVLW       50
0x152E	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1530	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp160:
;TCC_5.c,769 :: 		if(option==2) LCD_Chr(2,1,'3');               //se option for 2, exibe "3"
0x1534	0x0E00      	MOVLW       0
0x1536	0x0100      	MOVLB       0
0x1538	0x19F8      	XORWF       _option+1, 0, 1
0x153A	0xE102      	BNZ         L__disp523
0x153C	0x0E02      	MOVLW       2
0x153E	0x19F7      	XORWF       _option, 0, 1
L__disp523:
0x1540	0xE109      	BNZ         L_disp161
0x1542	0x0E02      	MOVLW       2
0x1544	0x0101      	MOVLB       1
0x1546	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x1548	0x0E01      	MOVLW       1
0x154A	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x154C	0x0E33      	MOVLW       51
0x154E	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1550	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp161:
;TCC_5.c,770 :: 		if(option==3) LCD_Chr(2,1,'4');               //se option for 2, exibe "4"
0x1554	0x0E00      	MOVLW       0
0x1556	0x0100      	MOVLB       0
0x1558	0x19F8      	XORWF       _option+1, 0, 1
0x155A	0xE102      	BNZ         L__disp524
0x155C	0x0E03      	MOVLW       3
0x155E	0x19F7      	XORWF       _option, 0, 1
L__disp524:
0x1560	0xE109      	BNZ         L_disp162
0x1562	0x0E02      	MOVLW       2
0x1564	0x0101      	MOVLB       1
0x1566	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x1568	0x0E01      	MOVLW       1
0x156A	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x156C	0x0E34      	MOVLW       52
0x156E	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1570	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp162:
;TCC_5.c,771 :: 		}
L_disp158:
;TCC_5.c,773 :: 		if(prog==2)                                     //se prog for 2
0x1574	0x0E00      	MOVLW       0
0x1576	0x0100      	MOVLB       0
0x1578	0x19FA      	XORWF       _prog+1, 0, 1
0x157A	0xE102      	BNZ         L__disp525
0x157C	0x0E02      	MOVLW       2
0x157E	0x19F9      	XORWF       _prog, 0, 1
L__disp525:
0x1580	0xE14D      	BNZ         L_disp163
;TCC_5.c,775 :: 		LCD_Out(1,1,"PROGRAME Un.:");                  //exibe "PROGRAME Un.:"
0x1582	0x0E01      	MOVLW       1
0x1584	0x0101      	MOVLB       1
0x1586	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x1588	0x0E01      	MOVLW       1
0x158A	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x158C	0x0E68      	MOVLW       ?lstr8_TCC_5
0x158E	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x1590	0x0E00      	MOVLW       hi_addr(?lstr8_TCC_5)
0x1592	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x1594	0xF002EC9E  	CALL        _Lcd_Out, 0
;TCC_5.c,776 :: 		num_un();                                      //executa num_un
0x1598	0xF003EC3E  	CALL        _num_un, 0
;TCC_5.c,777 :: 		if(option==0) LCD_Chr(2,1,'1');               //se option for 0, exibe "1"
0x159C	0x0E00      	MOVLW       0
0x159E	0x0100      	MOVLB       0
0x15A0	0x19F8      	XORWF       _option+1, 0, 1
0x15A2	0xE102      	BNZ         L__disp526
0x15A4	0x0E00      	MOVLW       0
0x15A6	0x19F7      	XORWF       _option, 0, 1
L__disp526:
0x15A8	0xE109      	BNZ         L_disp164
0x15AA	0x0E02      	MOVLW       2
0x15AC	0x0101      	MOVLB       1
0x15AE	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x15B0	0x0E01      	MOVLW       1
0x15B2	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x15B4	0x0E31      	MOVLW       49
0x15B6	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x15B8	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp164:
;TCC_5.c,778 :: 		if(option==1) LCD_Chr(2,1,'2');               //se option for 1, exibe "2"
0x15BC	0x0E00      	MOVLW       0
0x15BE	0x0100      	MOVLB       0
0x15C0	0x19F8      	XORWF       _option+1, 0, 1
0x15C2	0xE102      	BNZ         L__disp527
0x15C4	0x0E01      	MOVLW       1
0x15C6	0x19F7      	XORWF       _option, 0, 1
L__disp527:
0x15C8	0xE109      	BNZ         L_disp165
0x15CA	0x0E02      	MOVLW       2
0x15CC	0x0101      	MOVLB       1
0x15CE	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x15D0	0x0E01      	MOVLW       1
0x15D2	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x15D4	0x0E32      	MOVLW       50
0x15D6	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x15D8	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp165:
;TCC_5.c,779 :: 		if(option==2) LCD_Chr(2,1,'3');               //se option for 2, exibe "3"
0x15DC	0x0E00      	MOVLW       0
0x15DE	0x0100      	MOVLB       0
0x15E0	0x19F8      	XORWF       _option+1, 0, 1
0x15E2	0xE102      	BNZ         L__disp528
0x15E4	0x0E02      	MOVLW       2
0x15E6	0x19F7      	XORWF       _option, 0, 1
L__disp528:
0x15E8	0xE109      	BNZ         L_disp166
0x15EA	0x0E02      	MOVLW       2
0x15EC	0x0101      	MOVLB       1
0x15EE	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x15F0	0x0E01      	MOVLW       1
0x15F2	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x15F4	0x0E33      	MOVLW       51
0x15F6	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x15F8	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp166:
;TCC_5.c,780 :: 		if(option==3) LCD_Chr(2,1,'4');               //se option for 2, exibe "4"
0x15FC	0x0E00      	MOVLW       0
0x15FE	0x0100      	MOVLB       0
0x1600	0x19F8      	XORWF       _option+1, 0, 1
0x1602	0xE102      	BNZ         L__disp529
0x1604	0x0E03      	MOVLW       3
0x1606	0x19F7      	XORWF       _option, 0, 1
L__disp529:
0x1608	0xE109      	BNZ         L_disp167
0x160A	0x0E02      	MOVLW       2
0x160C	0x0101      	MOVLB       1
0x160E	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x1610	0x0E01      	MOVLW       1
0x1612	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x1614	0x0E34      	MOVLW       52
0x1616	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1618	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp167:
;TCC_5.c,781 :: 		}
L_disp163:
;TCC_5.c,783 :: 		if(prog==3)                                     //programação de quantidade de comprimidos
0x161C	0x0E00      	MOVLW       0
0x161E	0x0100      	MOVLB       0
0x1620	0x19FA      	XORWF       _prog+1, 0, 1
0x1622	0xE102      	BNZ         L__disp530
0x1624	0x0E03      	MOVLW       3
0x1626	0x19F9      	XORWF       _prog, 0, 1
L__disp530:
0x1628	0xE14D      	BNZ         L_disp168
;TCC_5.c,785 :: 		LCD_Out(1,1,"Qtd. COMPRIMIDOS");               //exibe "Qtd. COMPRIMIDOS"
0x162A	0x0E01      	MOVLW       1
0x162C	0x0101      	MOVLB       1
0x162E	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x1630	0x0E01      	MOVLW       1
0x1632	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x1634	0x0E57      	MOVLW       ?lstr9_TCC_5
0x1636	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x1638	0x0E00      	MOVLW       hi_addr(?lstr9_TCC_5)
0x163A	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x163C	0xF002EC9E  	CALL        _Lcd_Out, 0
;TCC_5.c,786 :: 		num_un();                                      //executa num_un
0x1640	0xF003EC3E  	CALL        _num_un, 0
;TCC_5.c,787 :: 		if(option==0) LCD_Chr(2,1,'1');               //se option for 0, exibe "1"
0x1644	0x0E00      	MOVLW       0
0x1646	0x0100      	MOVLB       0
0x1648	0x19F8      	XORWF       _option+1, 0, 1
0x164A	0xE102      	BNZ         L__disp531
0x164C	0x0E00      	MOVLW       0
0x164E	0x19F7      	XORWF       _option, 0, 1
L__disp531:
0x1650	0xE109      	BNZ         L_disp169
0x1652	0x0E02      	MOVLW       2
0x1654	0x0101      	MOVLB       1
0x1656	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x1658	0x0E01      	MOVLW       1
0x165A	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x165C	0x0E31      	MOVLW       49
0x165E	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1660	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp169:
;TCC_5.c,788 :: 		if(option==1) LCD_Chr(2,1,'2');               //se option for 1, exibe "2"
0x1664	0x0E00      	MOVLW       0
0x1666	0x0100      	MOVLB       0
0x1668	0x19F8      	XORWF       _option+1, 0, 1
0x166A	0xE102      	BNZ         L__disp532
0x166C	0x0E01      	MOVLW       1
0x166E	0x19F7      	XORWF       _option, 0, 1
L__disp532:
0x1670	0xE109      	BNZ         L_disp170
0x1672	0x0E02      	MOVLW       2
0x1674	0x0101      	MOVLB       1
0x1676	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x1678	0x0E01      	MOVLW       1
0x167A	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x167C	0x0E32      	MOVLW       50
0x167E	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1680	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp170:
;TCC_5.c,789 :: 		if(option==2) LCD_Chr(2,1,'3');               //se option for 2, exibe "3"
0x1684	0x0E00      	MOVLW       0
0x1686	0x0100      	MOVLB       0
0x1688	0x19F8      	XORWF       _option+1, 0, 1
0x168A	0xE102      	BNZ         L__disp533
0x168C	0x0E02      	MOVLW       2
0x168E	0x19F7      	XORWF       _option, 0, 1
L__disp533:
0x1690	0xE109      	BNZ         L_disp171
0x1692	0x0E02      	MOVLW       2
0x1694	0x0101      	MOVLB       1
0x1696	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x1698	0x0E01      	MOVLW       1
0x169A	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x169C	0x0E33      	MOVLW       51
0x169E	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x16A0	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp171:
;TCC_5.c,790 :: 		if(option==3) LCD_Chr(2,1,'4');               //se option for 2, exibe "4"
0x16A4	0x0E00      	MOVLW       0
0x16A6	0x0100      	MOVLB       0
0x16A8	0x19F8      	XORWF       _option+1, 0, 1
0x16AA	0xE102      	BNZ         L__disp534
0x16AC	0x0E03      	MOVLW       3
0x16AE	0x19F7      	XORWF       _option, 0, 1
L__disp534:
0x16B0	0xE109      	BNZ         L_disp172
0x16B2	0x0E02      	MOVLW       2
0x16B4	0x0101      	MOVLB       1
0x16B6	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x16B8	0x0E01      	MOVLW       1
0x16BA	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x16BC	0x0E34      	MOVLW       52
0x16BE	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x16C0	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp172:
;TCC_5.c,791 :: 		}
L_disp168:
0x16C4	0x0101      	MOVLB       1
;TCC_5.c,793 :: 		if(ligar)                                       //se ligar for 1 (ligado)
0x16C6	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x16C8	0xD068      	BRA         L_disp173
;TCC_5.c,795 :: 		LCD_Out(1,1,"DISP  TEMPO  Qtd");               //exibe "CONTANDO:   DISP";
0x16CA	0x0E01      	MOVLW       1
0x16CC	0x6F1F      	MOVWF       FARG_Lcd_Out_row, 1
0x16CE	0x0E01      	MOVLW       1
0x16D0	0x6F20      	MOVWF       FARG_Lcd_Out_column, 1
0x16D2	0x0E78      	MOVLW       ?lstr10_TCC_5
0x16D4	0x6F21      	MOVWF       FARG_Lcd_Out_text, 1
0x16D6	0x0E00      	MOVLW       hi_addr(?lstr10_TCC_5)
0x16D8	0x6F22      	MOVWF       FARG_Lcd_Out_text+1, 1
0x16DA	0xF002EC9E  	CALL        _Lcd_Out, 0
;TCC_5.c,796 :: 		if(temp_disp>20) temp_disp=0x00;               //se temp_disp for maior que 20, zera temp_disp
0x16DE	0x0E00      	MOVLW       0
0x16E0	0x6E00      	MOVWF       R0 
0x16E2	0x0100      	MOVLB       0
0x16E4	0x5177      	MOVF        _temp_disp+1, 0, 1
0x16E6	0x5C00      	SUBWF       R0, 0 
0x16E8	0xE102      	BNZ         L__disp535
0x16EA	0x5176      	MOVF        _temp_disp, 0, 1
0x16EC	0x0814      	SUBLW       20
L__disp535:
0x16EE	0xE202      	BC          L_disp174
0x16F0	0x6B76      	CLRF        _temp_disp, 1
0x16F2	0x6B77      	CLRF        _temp_disp+1, 1
L_disp174:
;TCC_5.c,797 :: 		if(temp_disp == 20)                            //se temp_disp for 20 (2 segundos)
0x16F4	0x0E00      	MOVLW       0
0x16F6	0x1977      	XORWF       _temp_disp+1, 0, 1
0x16F8	0xE102      	BNZ         L__disp536
0x16FA	0x0E14      	MOVLW       20
0x16FC	0x1976      	XORWF       _temp_disp, 0, 1
L__disp536:
0x16FE	0xE14B      	BNZ         L_disp175
;TCC_5.c,799 :: 		temp_disp=0x00;                               //zera temp_disp
0x1700	0x6B76      	CLRF        _temp_disp, 1
0x1702	0x6B77      	CLRF        _temp_disp+1, 1
;TCC_5.c,800 :: 		option++;                                     //incrementa option
0x1704	0x4BF7      	INFSNZ      _option, 1, 1
0x1706	0x2BF8      	INCF        _option+1, 1, 1
;TCC_5.c,801 :: 		if(option == 4) option=0x00;                  //se option for 3, option = 0
0x1708	0x0E00      	MOVLW       0
0x170A	0x19F8      	XORWF       _option+1, 0, 1
0x170C	0xE102      	BNZ         L__disp537
0x170E	0x0E04      	MOVLW       4
0x1710	0x19F7      	XORWF       _option, 0, 1
L__disp537:
0x1712	0xE102      	BNZ         L_disp176
0x1714	0x6BF7      	CLRF        _option, 1
0x1716	0x6BF8      	CLRF        _option+1, 1
L_disp176:
;TCC_5.c,802 :: 		if(option==0) LCD_Chr(2,1,'1');              //se option for 0, exibe "1"
0x1718	0x0E00      	MOVLW       0
0x171A	0x19F8      	XORWF       _option+1, 0, 1
0x171C	0xE102      	BNZ         L__disp538
0x171E	0x0E00      	MOVLW       0
0x1720	0x19F7      	XORWF       _option, 0, 1
L__disp538:
0x1722	0xE109      	BNZ         L_disp177
0x1724	0x0E02      	MOVLW       2
0x1726	0x0101      	MOVLB       1
0x1728	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x172A	0x0E01      	MOVLW       1
0x172C	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x172E	0x0E31      	MOVLW       49
0x1730	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1732	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp177:
;TCC_5.c,803 :: 		if(option==1) LCD_Chr(2,1,'2');              //se option for 1, exibe "2"
0x1736	0x0E00      	MOVLW       0
0x1738	0x0100      	MOVLB       0
0x173A	0x19F8      	XORWF       _option+1, 0, 1
0x173C	0xE102      	BNZ         L__disp539
0x173E	0x0E01      	MOVLW       1
0x1740	0x19F7      	XORWF       _option, 0, 1
L__disp539:
0x1742	0xE109      	BNZ         L_disp178
0x1744	0x0E02      	MOVLW       2
0x1746	0x0101      	MOVLB       1
0x1748	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x174A	0x0E01      	MOVLW       1
0x174C	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x174E	0x0E32      	MOVLW       50
0x1750	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1752	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp178:
;TCC_5.c,804 :: 		if(option==2) LCD_Chr(2,1,'3');              //se option for 2, exibe "3"
0x1756	0x0E00      	MOVLW       0
0x1758	0x0100      	MOVLB       0
0x175A	0x19F8      	XORWF       _option+1, 0, 1
0x175C	0xE102      	BNZ         L__disp540
0x175E	0x0E02      	MOVLW       2
0x1760	0x19F7      	XORWF       _option, 0, 1
L__disp540:
0x1762	0xE109      	BNZ         L_disp179
0x1764	0x0E02      	MOVLW       2
0x1766	0x0101      	MOVLB       1
0x1768	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x176A	0x0E01      	MOVLW       1
0x176C	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x176E	0x0E33      	MOVLW       51
0x1770	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1772	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp179:
;TCC_5.c,805 :: 		if(option==3) LCD_Chr(2,1,'4');              //se option for 2, exibe "4"
0x1776	0x0E00      	MOVLW       0
0x1778	0x0100      	MOVLB       0
0x177A	0x19F8      	XORWF       _option+1, 0, 1
0x177C	0xE102      	BNZ         L__disp541
0x177E	0x0E03      	MOVLW       3
0x1780	0x19F7      	XORWF       _option, 0, 1
L__disp541:
0x1782	0xE109      	BNZ         L_disp180
0x1784	0x0E02      	MOVLW       2
0x1786	0x0101      	MOVLB       1
0x1788	0x6F1F      	MOVWF       FARG_Lcd_Chr_row, 1
0x178A	0x0E01      	MOVLW       1
0x178C	0x6F20      	MOVWF       FARG_Lcd_Chr_column, 1
0x178E	0x0E34      	MOVLW       52
0x1790	0x6F21      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x1792	0xF002EC6F  	CALL        _Lcd_Chr, 0
L_disp180:
;TCC_5.c,806 :: 		}
L_disp175:
;TCC_5.c,807 :: 		num_un();                                      //executa num_un
0x1796	0xF003EC3E  	CALL        _num_un, 0
;TCC_5.c,808 :: 		}
L_disp173:
;TCC_5.c,810 :: 		}                                                 //end disp()
L_end_disp:
0x179A	0x0012      	RETURN      0
; end of _disp
_Lcd_Init:
;__Lib_Lcd.c,84 :: 		
;__Lib_Lcd.c,86 :: 		
0x179C	0x9695      	BCF         LCD_EN_Direction, BitPos(LCD_EN_Direction+0) 
;__Lib_Lcd.c,87 :: 		
0x179E	0x9495      	BCF         LCD_RS_Direction, BitPos(LCD_RS_Direction+0) 
;__Lib_Lcd.c,88 :: 		
0x17A0	0x9895      	BCF         LCD_D4_Direction, BitPos(LCD_D4_Direction+0) 
;__Lib_Lcd.c,89 :: 		
0x17A2	0x9A95      	BCF         LCD_D5_Direction, BitPos(LCD_D5_Direction+0) 
;__Lib_Lcd.c,90 :: 		
0x17A4	0x9C95      	BCF         LCD_D6_Direction, BitPos(LCD_D6_Direction+0) 
;__Lib_Lcd.c,91 :: 		
0x17A6	0x9E95      	BCF         LCD_D7_Direction, BitPos(LCD_D7_Direction+0) 
;__Lib_Lcd.c,93 :: 		
0x17A8	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,94 :: 		
0x17AA	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
;__Lib_Lcd.c,95 :: 		
0x17AC	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,96 :: 		
0x17AE	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,97 :: 		
0x17B0	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,98 :: 		
0x17B2	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,100 :: 		
0x17B4	0xF000EC48  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,101 :: 		
0x17B8	0xF000EC48  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,102 :: 		
0x17BC	0xF000EC48  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,105 :: 		
0x17C0	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,106 :: 		
0x17C2	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,107 :: 		
0x17C4	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,108 :: 		
0x17C6	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,109 :: 		
0x17CA	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,110 :: 		
0x17CC	0xF000EC48  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,112 :: 		
0x17D0	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,113 :: 		
0x17D2	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,114 :: 		
0x17D6	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,115 :: 		
0x17D8	0xF000EC48  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,117 :: 		
0x17DC	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,118 :: 		
0x17DE	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,119 :: 		
0x17E2	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,120 :: 		
0x17E4	0xF000EC48  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,123 :: 		
0x17E8	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,124 :: 		
0x17EA	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,125 :: 		
0x17EC	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,126 :: 		
0x17F0	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,127 :: 		
0x17F2	0xF000EC48  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,130 :: 		
0x17F6	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,131 :: 		
0x17F8	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,132 :: 		
0x17FC	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,134 :: 		
0x17FE	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,135 :: 		
0x1800	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,136 :: 		
0x1802	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,137 :: 		
0x1804	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,138 :: 		
0x1808	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,139 :: 		
0x180A	0xF000EC48  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,142 :: 		
0x180E	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,143 :: 		
0x1810	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,144 :: 		
0x1812	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,145 :: 		
0x1814	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,146 :: 		
0x1818	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,148 :: 		
0x181A	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,149 :: 		
0x181C	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,150 :: 		
0x181E	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,151 :: 		
0x1822	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,152 :: 		
0x1824	0xF000EC48  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,155 :: 		
0x1828	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,156 :: 		
0x182A	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,157 :: 		
0x182E	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,159 :: 		
0x1830	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,160 :: 		
0x1832	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,161 :: 		
0x1834	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,162 :: 		
0x1838	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,163 :: 		
0x183A	0xF000EC48  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,166 :: 		
0x183E	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,167 :: 		
0x1840	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,168 :: 		
0x1842	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,169 :: 		
0x1846	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,171 :: 		
0x1848	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,172 :: 		
0x184A	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,173 :: 		
0x184C	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,174 :: 		
0x184E	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,175 :: 		
0x1850	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,176 :: 		
0x1852	0xF000EC45  	CALL        _Delay_1us, 0
;__Lib_Lcd.c,177 :: 		
0x1856	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,179 :: 		
0x1858	0xF000EC48  	CALL        _Delay_5500us, 0
;__Lib_Lcd.c,181 :: 		
0x185C	0x0101      	MOVLB       1
0x185E	0x8D00      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,182 :: 		
L_end_Lcd_Init:
0x1860	0x0012      	RETURN      0
; end of _Lcd_Init
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x1862	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x1864	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x1868	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x186A	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x186C	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x186E	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x1870	0x0012      	RETURN      0
; end of ___CC2DW
_EEPROM_Read:
;__Lib_EEPROM_256.c,7 :: 		
;__Lib_EEPROM_256.c,9 :: 		
0x1872	0x9CA6      	BCF         EECON1, 6 
;__Lib_EEPROM_256.c,10 :: 		
0x1874	0xFFA9C11B  	MOVFF       FARG_EEPROM_Read_address, EEADR
;__Lib_EEPROM_256.c,11 :: 		
0x1878	0x9EA6      	BCF         EECON1, 7 
;__Lib_EEPROM_256.c,12 :: 		
0x187A	0x80A6      	BSF         EECON1, 0 
;__Lib_EEPROM_256.c,14 :: 		
0x187C	0xF000CFA8  	MOVFF       EEDATA, R0
;__Lib_EEPROM_256.c,16 :: 		
L_end_EEPROM_Read:
0x1880	0x0012      	RETURN      0
; end of _EEPROM_Read
_timebase4:
;TCC_5.c,1210 :: 		void timebase4()
;TCC_5.c,1212 :: 		if(!ligar)                                      //se ligar for 0
0x1882	0x0101      	MOVLB       1
0x1884	0xB709      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x1886	0xD002      	BRA         L_timebase4278
;TCC_5.c,1214 :: 		temp_ligado4 = 0x00;                           //zera temp_ligado4
0x1888	0x6A4F      	CLRF        _temp_ligado4 
0x188A	0x6A50      	CLRF        _temp_ligado4+1 
;TCC_5.c,1215 :: 		}
L_timebase4278:
;TCC_5.c,1217 :: 		if(ligar && num4!=0)                            //se ligar for 1 e num4 diferente de 0
0x188C	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x188E	0xD028      	BRA         L_timebase4281
0x1890	0x0E00      	MOVLW       0
0x1892	0x190B      	XORWF       _num4+1, 0, 1
0x1894	0xE102      	BNZ         L__timebase4586
0x1896	0x0E00      	MOVLW       0
0x1898	0x190A      	XORWF       _num4, 0, 1
L__timebase4586:
0x189A	0xE022      	BZ          L_timebase4281
L__timebase4409:
;TCC_5.c,1219 :: 		if(temp4==10)                                  //conta 1 segundo
0x189C	0x0E00      	MOVLW       0
0x189E	0x0100      	MOVLB       0
0x18A0	0x19D2      	XORWF       _temp4+1, 0, 1
0x18A2	0xE102      	BNZ         L__timebase4587
0x18A4	0x0E0A      	MOVLW       10
0x18A6	0x19D1      	XORWF       _temp4, 0, 1
L__timebase4587:
0x18A8	0xE104      	BNZ         L_timebase4282
;TCC_5.c,1221 :: 		temp4 = 0x00;                                 //zera temp4
0x18AA	0x6BD1      	CLRF        _temp4, 1
0x18AC	0x6BD2      	CLRF        _temp4+1, 1
;TCC_5.c,1222 :: 		temp_ligado4++;                               //incrementa temp_ligado4 a cada 1 segundo
0x18AE	0x4A4F      	INFSNZ      _temp_ligado4, 1 
0x18B0	0x2A50      	INCF        _temp_ligado4+1, 1 
;TCC_5.c,1224 :: 		}                                              //end if temp3==10
L_timebase4282:
;TCC_5.c,1226 :: 		if(temp_ligado4==mult4)                        //compara igualdade entre temp_ligado4 e mult4
0x18B2	0x5050      	MOVF        _temp_ligado4+1, 0 
0x18B4	0x19DE      	XORWF       _mult4+1, 0, 1
0x18B6	0xE102      	BNZ         L__timebase4588
0x18B8	0x51DD      	MOVF        _mult4, 0, 1
0x18BA	0x184F      	XORWF       _temp_ligado4, 0 
L__timebase4588:
0x18BC	0xE109      	BNZ         L_timebase4283
;TCC_5.c,1228 :: 		toque4 = 0x01;                                //liga o bit toque4
0x18BE	0x87FF      	BSF         _toque4, BitPos(_toque4+0), 1
;TCC_5.c,1229 :: 		atv_mot4 = 0x01;                              //liga o bit de ativação do motor 4
0x18C0	0x0101      	MOVLB       1
0x18C2	0x8309      	BSF         _atv_mot4, BitPos(_atv_mot4+0), 1
;TCC_5.c,1230 :: 		comp4 = qtd_comp4;
0x18C4	0xF107C115  	MOVFF       _qtd_comp4, _comp4
0x18C8	0xF108C116  	MOVFF       _qtd_comp4+1, _comp4+1
;TCC_5.c,1231 :: 		abre_mot4();                                  //define os bits de controle do motor 4 para abrir
0x18CC	0xF000ECBB  	CALL        _abre_mot4, 0
;TCC_5.c,1233 :: 		}                                              //end if temp_ligado4==mult4
L_timebase4283:
;TCC_5.c,1235 :: 		if(atv_mot4)                                   //se ativação do motor 4 ligada...
0x18D0	0x0101      	MOVLB       1
0x18D2	0xA309      	BTFSS       _atv_mot4, BitPos(_atv_mot4+0), 1
0x18D4	0xD003      	BRA         L_timebase4284
;TCC_5.c,1237 :: 		read_motbits();                               //executa a leitura dos bits de controle dos motores
0x18D6	0xF004EC97  	CALL        _read_motbits, 0
;TCC_5.c,1239 :: 		}                                              //end if atv_mot4
0x18DA	0xD002      	BRA         L_timebase4285
L_timebase4284:
;TCC_5.c,1243 :: 		alarme();                                     //aciona o alarme
0x18DC	0xF005ECDC  	CALL        _alarme, 0
;TCC_5.c,1245 :: 		}                                              //end else
L_timebase4285:
;TCC_5.c,1247 :: 		}                                               //end if ligar && num4!=0
L_timebase4281:
;TCC_5.c,1249 :: 		}                                                 //end timebase4()
L_end_timebase4:
0x18E0	0x0012      	RETURN      0
; end of _timebase4
_timebase3:
;TCC_5.c,1164 :: 		void timebase3()
;TCC_5.c,1166 :: 		if(!ligar)                                      //se ligar for 0
0x18E2	0x0101      	MOVLB       1
0x18E4	0xB709      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x18E6	0xD002      	BRA         L_timebase3270
;TCC_5.c,1168 :: 		temp_ligado3 = 0x00;                           //zera temp_ligado3
0x18E8	0x6A51      	CLRF        _temp_ligado3 
0x18EA	0x6A52      	CLRF        _temp_ligado3+1 
;TCC_5.c,1169 :: 		}
L_timebase3270:
;TCC_5.c,1171 :: 		if(ligar && num3!=0)                            //se ligar for 1 e num3 diferente de 0
0x18EC	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x18EE	0xD028      	BRA         L_timebase3273
0x18F0	0x0E00      	MOVLW       0
0x18F2	0x1910      	XORWF       _num3+1, 0, 1
0x18F4	0xE102      	BNZ         L__timebase3582
0x18F6	0x0E00      	MOVLW       0
0x18F8	0x190F      	XORWF       _num3, 0, 1
L__timebase3582:
0x18FA	0xE022      	BZ          L_timebase3273
L__timebase3408:
;TCC_5.c,1173 :: 		if(temp3==10)                                  //conta 1 segundo
0x18FC	0x0E00      	MOVLW       0
0x18FE	0x0100      	MOVLB       0
0x1900	0x19CE      	XORWF       _temp3+1, 0, 1
0x1902	0xE102      	BNZ         L__timebase3583
0x1904	0x0E0A      	MOVLW       10
0x1906	0x19CD      	XORWF       _temp3, 0, 1
L__timebase3583:
0x1908	0xE104      	BNZ         L_timebase3274
;TCC_5.c,1175 :: 		temp3 = 0x00;                                 //zera temp3
0x190A	0x6BCD      	CLRF        _temp3, 1
0x190C	0x6BCE      	CLRF        _temp3+1, 1
;TCC_5.c,1176 :: 		temp_ligado3++;                               //incrementa temp_ligado3 a cada 1 segundo
0x190E	0x4A51      	INFSNZ      _temp_ligado3, 1 
0x1910	0x2A52      	INCF        _temp_ligado3+1, 1 
;TCC_5.c,1178 :: 		}                                              //end if temp3==10
L_timebase3274:
;TCC_5.c,1180 :: 		if(temp_ligado3==mult3)                        //compara igualdade entre temp_ligado3 e mult3
0x1912	0x5052      	MOVF        _temp_ligado3+1, 0 
0x1914	0x19E0      	XORWF       _mult3+1, 0, 1
0x1916	0xE102      	BNZ         L__timebase3584
0x1918	0x51DF      	MOVF        _mult3, 0, 1
0x191A	0x1851      	XORWF       _temp_ligado3, 0 
L__timebase3584:
0x191C	0xE109      	BNZ         L_timebase3275
;TCC_5.c,1182 :: 		toque3 = 0x01;                                //liga o bit toque3
0x191E	0x83FF      	BSF         _toque3, BitPos(_toque3+0), 1
;TCC_5.c,1183 :: 		atv_mot3 = 0x01;                              //liga o bit de aativação do motor 3
0x1920	0x0101      	MOVLB       1
0x1922	0x8F00      	BSF         _atv_mot3, BitPos(_atv_mot3+0), 1
;TCC_5.c,1184 :: 		comp3 = qtd_comp3;
0x1924	0xF105C113  	MOVFF       _qtd_comp3, _comp3
0x1928	0xF106C114  	MOVFF       _qtd_comp3+1, _comp3+1
;TCC_5.c,1185 :: 		abre_mot3();                                  //define os bits de controle do motor 3 para abrir
0x192C	0xF000ECAD  	CALL        _abre_mot3, 0
;TCC_5.c,1187 :: 		}                                              //end if temp_ligado3==mult3
L_timebase3275:
;TCC_5.c,1189 :: 		if(atv_mot3)                                   //se ativação do motor 3 ligada...
0x1930	0x0101      	MOVLB       1
0x1932	0xAF00      	BTFSS       _atv_mot3, BitPos(_atv_mot3+0), 1
0x1934	0xD003      	BRA         L_timebase3276
;TCC_5.c,1191 :: 		read_motbits();                               //executa a leitura dos bits de controle dos motores
0x1936	0xF004EC97  	CALL        _read_motbits, 0
;TCC_5.c,1193 :: 		}                                              //end if atv_mot3
0x193A	0xD002      	BRA         L_timebase3277
L_timebase3276:
;TCC_5.c,1197 :: 		alarme();                                     //aciona o alarme
0x193C	0xF005ECDC  	CALL        _alarme, 0
;TCC_5.c,1199 :: 		}                                              //end else
L_timebase3277:
;TCC_5.c,1201 :: 		}                                               //end if ligar && num3!=0
L_timebase3273:
;TCC_5.c,1203 :: 		}                                                 //end timebase3()
L_end_timebase3:
0x1940	0x0012      	RETURN      0
; end of _timebase3
_timebase2:
;TCC_5.c,1118 :: 		void timebase2()
;TCC_5.c,1120 :: 		if(!ligar)                                      //se ligar for 0
0x1942	0x0101      	MOVLB       1
0x1944	0xB709      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x1946	0xD003      	BRA         L_timebase2262
;TCC_5.c,1122 :: 		temp_ligado2 = 0x00;                           //zera temp_ligado2
0x1948	0x0100      	MOVLB       0
0x194A	0x6BD5      	CLRF        _temp_ligado2, 1
0x194C	0x6BD6      	CLRF        _temp_ligado2+1, 1
;TCC_5.c,1123 :: 		}
L_timebase2262:
;TCC_5.c,1125 :: 		if(ligar && num2!=0)                            //se ligar for 1 e num2 diferente de 0
0x194E	0x0101      	MOVLB       1
0x1950	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1952	0xD028      	BRA         L_timebase2265
0x1954	0x0E00      	MOVLW       0
0x1956	0x190E      	XORWF       _num2+1, 0, 1
0x1958	0xE102      	BNZ         L__timebase2578
0x195A	0x0E00      	MOVLW       0
0x195C	0x190D      	XORWF       _num2, 0, 1
L__timebase2578:
0x195E	0xE022      	BZ          L_timebase2265
L__timebase2407:
;TCC_5.c,1127 :: 		if(temp2==10)                                  //conta 1 segundo
0x1960	0x0E00      	MOVLW       0
0x1962	0x0100      	MOVLB       0
0x1964	0x19D0      	XORWF       _temp2+1, 0, 1
0x1966	0xE102      	BNZ         L__timebase2579
0x1968	0x0E0A      	MOVLW       10
0x196A	0x19CF      	XORWF       _temp2, 0, 1
L__timebase2579:
0x196C	0xE104      	BNZ         L_timebase2266
;TCC_5.c,1129 :: 		temp2 = 0x00;                                 //zera temp2
0x196E	0x6BCF      	CLRF        _temp2, 1
0x1970	0x6BD0      	CLRF        _temp2+1, 1
;TCC_5.c,1130 :: 		temp_ligado2++;                               //incrementa temp_ligado2 a cada 1 segundo
0x1972	0x4BD5      	INFSNZ      _temp_ligado2, 1, 1
0x1974	0x2BD6      	INCF        _temp_ligado2+1, 1, 1
;TCC_5.c,1132 :: 		}                                              //end if temp2==10
L_timebase2266:
;TCC_5.c,1134 :: 		if(temp_ligado2==mult2)                        //compara igualdade entre temp_ligado2 e mult2
0x1976	0x51D6      	MOVF        _temp_ligado2+1, 0, 1
0x1978	0x19DA      	XORWF       _mult2+1, 0, 1
0x197A	0xE102      	BNZ         L__timebase2580
0x197C	0x51D9      	MOVF        _mult2, 0, 1
0x197E	0x19D5      	XORWF       _temp_ligado2, 0, 1
L__timebase2580:
0x1980	0xE109      	BNZ         L_timebase2267
;TCC_5.c,1136 :: 		toque2 = 0x01;                                //liga o bit toque2
0x1982	0x85FF      	BSF         _toque2, BitPos(_toque2+0), 1
;TCC_5.c,1137 :: 		atv_mot2 = 0x01;                              //liga o bit de aativação do motor 2
0x1984	0x0101      	MOVLB       1
0x1986	0x8109      	BSF         _atv_mot2, BitPos(_atv_mot2+0), 1
;TCC_5.c,1138 :: 		comp2 = qtd_comp2;
0x1988	0xF103C119  	MOVFF       _qtd_comp2, _comp2
0x198C	0xF104C11A  	MOVFF       _qtd_comp2+1, _comp2+1
;TCC_5.c,1139 :: 		abre_mot2();                                  //define os bits de controle do motor 2 para abrir
0x1990	0xF000ECA6  	CALL        _abre_mot2, 0
;TCC_5.c,1141 :: 		}                                              //end if temp_ligado2==mult2
L_timebase2267:
;TCC_5.c,1143 :: 		if(atv_mot2)                                   //se ativação do motor 2 ligada...
0x1994	0x0101      	MOVLB       1
0x1996	0xA109      	BTFSS       _atv_mot2, BitPos(_atv_mot2+0), 1
0x1998	0xD003      	BRA         L_timebase2268
;TCC_5.c,1145 :: 		read_motbits();                               //executa a leitura dos bits de controle dos motores
0x199A	0xF004EC97  	CALL        _read_motbits, 0
;TCC_5.c,1147 :: 		}                                              //end if atv_mot2
0x199E	0xD002      	BRA         L_timebase2269
L_timebase2268:
;TCC_5.c,1151 :: 		alarme();                                     //aciona o alarme
0x19A0	0xF005ECDC  	CALL        _alarme, 0
;TCC_5.c,1153 :: 		}                                              //end else
L_timebase2269:
;TCC_5.c,1155 :: 		}                                               //end if ligar && num2!=0
L_timebase2265:
;TCC_5.c,1157 :: 		}                                                 //end timebase2()
L_end_timebase2:
0x19A4	0x0012      	RETURN      0
; end of _timebase2
_piscaLED:
;TCC_5.c,909 :: 		void piscaLED()
;TCC_5.c,912 :: 		if(ligar && !toque && num!=0)                   //se ligar for um(ligado), toque for zero e num diferente de zero...
0x19A6	0x0101      	MOVLB       1
0x19A8	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x19AA	0xD013      	BRA         L_piscaLED199
0x19AC	0xB90C      	BTFSC       _toque, BitPos(_toque+0), 1
0x19AE	0xD011      	BRA         L_piscaLED199
0x19B0	0x0E00      	MOVLW       0
0x19B2	0x1912      	XORWF       _num+1, 0, 1
0x19B4	0xE102      	BNZ         L__piscaLED552
0x19B6	0x0E00      	MOVLW       0
0x19B8	0x1911      	XORWF       _num, 0, 1
L__piscaLED552:
0x19BA	0xE00B      	BZ          L_piscaLED199
L__piscaLED405:
;TCC_5.c,914 :: 		if(temp_led>=10)                               //conta 1 segundo
0x19BC	0x0E00      	MOVLW       0
0x19BE	0x0100      	MOVLB       0
0x19C0	0x5DE2      	SUBWF       _temp_led+1, 0, 1
0x19C2	0xE102      	BNZ         L__piscaLED553
0x19C4	0x0E0A      	MOVLW       10
0x19C6	0x5DE1      	SUBWF       _temp_led, 0, 1
L__piscaLED553:
0x19C8	0xE303      	BNC         L_piscaLED200
;TCC_5.c,916 :: 		temp_led = 0x00;                      //zera temp_led
0x19CA	0x6BE1      	CLRF        _temp_led, 1
0x19CC	0x6BE2      	CLRF        _temp_led+1, 1
;TCC_5.c,917 :: 		LED  = ~LED;                          //inverte LED de indicação do dispenser n°1
0x19CE	0x7080      	BTG         PORTA, 0 
;TCC_5.c,918 :: 		}                                              //end if temp_led>=10
L_piscaLED200:
;TCC_5.c,920 :: 		}                                               //end if ligar && !toque && num!=0
0x19D0	0xD022      	BRA         L_piscaLED201
L_piscaLED199:
;TCC_5.c,924 :: 		if(ligar && toque)                             //se ligar for 1 e toque for 1
0x19D2	0x0101      	MOVLB       1
0x19D4	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x19D6	0xD00D      	BRA         L_piscaLED204
0x19D8	0xA90C      	BTFSS       _toque, BitPos(_toque+0), 1
0x19DA	0xD00B      	BRA         L_piscaLED204
L__piscaLED404:
;TCC_5.c,926 :: 		if(temp_led>=2)                               //conta 200ms
0x19DC	0x0E00      	MOVLW       0
0x19DE	0x0100      	MOVLB       0
0x19E0	0x5DE2      	SUBWF       _temp_led+1, 0, 1
0x19E2	0xE102      	BNZ         L__piscaLED554
0x19E4	0x0E02      	MOVLW       2
0x19E6	0x5DE1      	SUBWF       _temp_led, 0, 1
L__piscaLED554:
0x19E8	0xE303      	BNC         L_piscaLED205
;TCC_5.c,928 :: 		temp_led=0x00;                               //zera temp_led
0x19EA	0x6BE1      	CLRF        _temp_led, 1
0x19EC	0x6BE2      	CLRF        _temp_led+1, 1
;TCC_5.c,929 :: 		LED = ~LED;                                  //inverte LED de indicação do dispenser n°1
0x19EE	0x7080      	BTG         PORTA, 0 
;TCC_5.c,931 :: 		}                                             //end if temp_led>=2
L_piscaLED205:
;TCC_5.c,933 :: 		}                                              //end if ligar && toque
0x19F0	0xD012      	BRA         L_piscaLED206
L_piscaLED204:
0x19F2	0x0100      	MOVLB       0
;TCC_5.c,936 :: 		if(prog>0 && option==0)                       //se estiver em programação e dispenser n°1 selecionado
0x19F4	0x0E00      	MOVLW       0
0x19F6	0x6E00      	MOVWF       R0 
0x19F8	0x51FA      	MOVF        _prog+1, 0, 1
0x19FA	0x5C00      	SUBWF       R0, 0 
0x19FC	0xE102      	BNZ         L__piscaLED555
0x19FE	0x51F9      	MOVF        _prog, 0, 1
0x1A00	0x0800      	SUBLW       0
L__piscaLED555:
0x1A02	0xE208      	BC          L_piscaLED209
0x1A04	0x0E00      	MOVLW       0
0x1A06	0x19F8      	XORWF       _option+1, 0, 1
0x1A08	0xE102      	BNZ         L__piscaLED556
0x1A0A	0x0E00      	MOVLW       0
0x1A0C	0x19F7      	XORWF       _option, 0, 1
L__piscaLED556:
0x1A0E	0xE102      	BNZ         L_piscaLED209
L__piscaLED403:
;TCC_5.c,938 :: 		LED = 0x01;                                  //LED do dispenser n°1 aceso
0x1A10	0x8080      	BSF         PORTA, 0 
;TCC_5.c,939 :: 		}                                             //end if prog>0 && option==0
0x1A12	0xD001      	BRA         L_piscaLED210
L_piscaLED209:
;TCC_5.c,941 :: 		else LED = 0x00;                              //senão, LED do dispenser n°1 desligado
0x1A14	0x9080      	BCF         PORTA, 0 
L_piscaLED210:
;TCC_5.c,943 :: 		}                                              //end else
L_piscaLED206:
;TCC_5.c,945 :: 		}                                               //end else
L_piscaLED201:
;TCC_5.c,949 :: 		if(temp_led2 ==5)                                //conta 500ms
0x1A16	0x0E00      	MOVLW       0
0x1A18	0x19E8      	XORWF       _temp_led2+1, 0, 1
0x1A1A	0xE102      	BNZ         L__piscaLED557
0x1A1C	0x0E05      	MOVLW       5
0x1A1E	0x19E7      	XORWF       _temp_led2, 0, 1
L__piscaLED557:
0x1A20	0xE103      	BNZ         L_piscaLED211
;TCC_5.c,951 :: 		temp_led2=0x00;                                 //zera temp_led2
0x1A22	0x6BE7      	CLRF        _temp_led2, 1
0x1A24	0x6BE8      	CLRF        _temp_led2+1, 1
;TCC_5.c,952 :: 		LED2 = ~LED2;                                   //inverte estado do LED de indicação geral
0x1A26	0x7680      	BTG         PORTA, 3 
;TCC_5.c,954 :: 		}                                                //end if temp_led==5
L_piscaLED211:
;TCC_5.c,956 :: 		if(ligar && !toque2 && num2!=0)                  //se ligar for 1, toque 2 for 0 e num2 diferente de 0...
0x1A28	0x0101      	MOVLB       1
0x1A2A	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1A2C	0xD015      	BRA         L_piscaLED214
0x1A2E	0x0100      	MOVLB       0
0x1A30	0xB5FF      	BTFSC       _toque2, BitPos(_toque2+0), 1
0x1A32	0xD012      	BRA         L_piscaLED214
0x1A34	0x0E00      	MOVLW       0
0x1A36	0x0101      	MOVLB       1
0x1A38	0x190E      	XORWF       _num2+1, 0, 1
0x1A3A	0xE102      	BNZ         L__piscaLED558
0x1A3C	0x0E00      	MOVLW       0
0x1A3E	0x190D      	XORWF       _num2, 0, 1
L__piscaLED558:
0x1A40	0xE00B      	BZ          L_piscaLED214
L__piscaLED402:
;TCC_5.c,958 :: 		if(temp_led3>=10)                               //conta 1 segundo
0x1A42	0x0E00      	MOVLW       0
0x1A44	0x0100      	MOVLB       0
0x1A46	0x5DE6      	SUBWF       _temp_led3+1, 0, 1
0x1A48	0xE102      	BNZ         L__piscaLED559
0x1A4A	0x0E0A      	MOVLW       10
0x1A4C	0x5DE5      	SUBWF       _temp_led3, 0, 1
L__piscaLED559:
0x1A4E	0xE303      	BNC         L_piscaLED215
;TCC_5.c,960 :: 		temp_led3 = 0x00;                              //zera temp_led3
0x1A50	0x6BE5      	CLRF        _temp_led3, 1
0x1A52	0x6BE6      	CLRF        _temp_led3+1, 1
;TCC_5.c,961 :: 		LED3 = ~LED3;                                  //inverte estado do LED de indicação do dispenser n°2
0x1A54	0x7081      	BTG         PORTB, 0 
;TCC_5.c,963 :: 		}                                               //end if temp_led3>=10
L_piscaLED215:
;TCC_5.c,965 :: 		}                                                //end if ligar && !toque2 && num2!=0
0x1A56	0xD022      	BRA         L_piscaLED216
L_piscaLED214:
;TCC_5.c,969 :: 		if(ligar && toque2)                             //se ligar e toque2 for 1
0x1A58	0x0101      	MOVLB       1
0x1A5A	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1A5C	0xD00D      	BRA         L_piscaLED219
0x1A5E	0x0100      	MOVLB       0
0x1A60	0xA5FF      	BTFSS       _toque2, BitPos(_toque2+0), 1
0x1A62	0xD00A      	BRA         L_piscaLED219
L__piscaLED401:
;TCC_5.c,971 :: 		if(temp_led3>=2)                               //conta 200 milisegundos
0x1A64	0x0E00      	MOVLW       0
0x1A66	0x5DE6      	SUBWF       _temp_led3+1, 0, 1
0x1A68	0xE102      	BNZ         L__piscaLED560
0x1A6A	0x0E02      	MOVLW       2
0x1A6C	0x5DE5      	SUBWF       _temp_led3, 0, 1
L__piscaLED560:
0x1A6E	0xE303      	BNC         L_piscaLED220
;TCC_5.c,973 :: 		temp_led3=0x00;                               //zera temp_led3
0x1A70	0x6BE5      	CLRF        _temp_led3, 1
0x1A72	0x6BE6      	CLRF        _temp_led3+1, 1
;TCC_5.c,974 :: 		LED3 = ~LED3;                                 //inverte estado do LED de indicação do dispenser n°2
0x1A74	0x7081      	BTG         PORTB, 0 
;TCC_5.c,976 :: 		}                                              //end if temp_led3>=2
L_piscaLED220:
;TCC_5.c,978 :: 		}                                               //end if ligar && toque2
0x1A76	0xD012      	BRA         L_piscaLED221
L_piscaLED219:
0x1A78	0x0100      	MOVLB       0
;TCC_5.c,982 :: 		if(prog>0 && option==1)                        //se estiver em programação e dispenser n°2 selecionado
0x1A7A	0x0E00      	MOVLW       0
0x1A7C	0x6E00      	MOVWF       R0 
0x1A7E	0x51FA      	MOVF        _prog+1, 0, 1
0x1A80	0x5C00      	SUBWF       R0, 0 
0x1A82	0xE102      	BNZ         L__piscaLED561
0x1A84	0x51F9      	MOVF        _prog, 0, 1
0x1A86	0x0800      	SUBLW       0
L__piscaLED561:
0x1A88	0xE208      	BC          L_piscaLED224
0x1A8A	0x0E00      	MOVLW       0
0x1A8C	0x19F8      	XORWF       _option+1, 0, 1
0x1A8E	0xE102      	BNZ         L__piscaLED562
0x1A90	0x0E01      	MOVLW       1
0x1A92	0x19F7      	XORWF       _option, 0, 1
L__piscaLED562:
0x1A94	0xE102      	BNZ         L_piscaLED224
L__piscaLED400:
;TCC_5.c,984 :: 		LED3 = 0x01;                                  //LED do dispenser n°2 aceso
0x1A96	0x8081      	BSF         PORTB, 0 
;TCC_5.c,985 :: 		}                                              //end if prog>0 && option==1
0x1A98	0xD001      	BRA         L_piscaLED225
L_piscaLED224:
;TCC_5.c,987 :: 		else LED3 = 0x00;                               //senão, LED do dispenser n°2 desligado
0x1A9A	0x9081      	BCF         PORTB, 0 
L_piscaLED225:
;TCC_5.c,989 :: 		}                                               //end else
L_piscaLED221:
;TCC_5.c,991 :: 		}                                                //end else
L_piscaLED216:
;TCC_5.c,993 :: 		if(ligar && !toque3 && num3!=0)                  //se ligar for 1, toque3 for 0 e num3 diferente de 0...
0x1A9C	0x0101      	MOVLB       1
0x1A9E	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1AA0	0xD015      	BRA         L_piscaLED228
0x1AA2	0x0100      	MOVLB       0
0x1AA4	0xB3FF      	BTFSC       _toque3, BitPos(_toque3+0), 1
0x1AA6	0xD012      	BRA         L_piscaLED228
0x1AA8	0x0E00      	MOVLW       0
0x1AAA	0x0101      	MOVLB       1
0x1AAC	0x1910      	XORWF       _num3+1, 0, 1
0x1AAE	0xE102      	BNZ         L__piscaLED563
0x1AB0	0x0E00      	MOVLW       0
0x1AB2	0x190F      	XORWF       _num3, 0, 1
L__piscaLED563:
0x1AB4	0xE00B      	BZ          L_piscaLED228
L__piscaLED399:
;TCC_5.c,995 :: 		if(temp_led4>=10)                               //conta 1 segundo
0x1AB6	0x0E00      	MOVLW       0
0x1AB8	0x0100      	MOVLB       0
0x1ABA	0x5DF6      	SUBWF       _temp_led4+1, 0, 1
0x1ABC	0xE102      	BNZ         L__piscaLED564
0x1ABE	0x0E0A      	MOVLW       10
0x1AC0	0x5DF5      	SUBWF       _temp_led4, 0, 1
L__piscaLED564:
0x1AC2	0xE303      	BNC         L_piscaLED229
;TCC_5.c,997 :: 		temp_led4 = 0x00;                              //zera temp_led4
0x1AC4	0x6BF5      	CLRF        _temp_led4, 1
0x1AC6	0x6BF6      	CLRF        _temp_led4+1, 1
;TCC_5.c,998 :: 		LED4 = ~LED4;                                  //inverte estado do LED de indicação do dispenser n°3
0x1AC8	0x7281      	BTG         PORTB, 1 
;TCC_5.c,1000 :: 		}                                               //end if temp_led4>=10
L_piscaLED229:
;TCC_5.c,1002 :: 		}                                                //end if ligar && !toque3 && num3!=0
0x1ACA	0xD022      	BRA         L_piscaLED230
L_piscaLED228:
;TCC_5.c,1006 :: 		if(ligar && toque3)                             //se ligar e toque3 for 1
0x1ACC	0x0101      	MOVLB       1
0x1ACE	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1AD0	0xD00D      	BRA         L_piscaLED233
0x1AD2	0x0100      	MOVLB       0
0x1AD4	0xA3FF      	BTFSS       _toque3, BitPos(_toque3+0), 1
0x1AD6	0xD00A      	BRA         L_piscaLED233
L__piscaLED398:
;TCC_5.c,1008 :: 		if(temp_led4>=2)                               //conta 200 milisegundos
0x1AD8	0x0E00      	MOVLW       0
0x1ADA	0x5DF6      	SUBWF       _temp_led4+1, 0, 1
0x1ADC	0xE102      	BNZ         L__piscaLED565
0x1ADE	0x0E02      	MOVLW       2
0x1AE0	0x5DF5      	SUBWF       _temp_led4, 0, 1
L__piscaLED565:
0x1AE2	0xE303      	BNC         L_piscaLED234
;TCC_5.c,1010 :: 		temp_led4=0x00;                               //zera temp_led4
0x1AE4	0x6BF5      	CLRF        _temp_led4, 1
0x1AE6	0x6BF6      	CLRF        _temp_led4+1, 1
;TCC_5.c,1011 :: 		LED4 = ~LED4;                                 //inverte estado do LED de indicação do dispenser n°3
0x1AE8	0x7281      	BTG         PORTB, 1 
;TCC_5.c,1013 :: 		}                                              //end if temp_led4>=2
L_piscaLED234:
;TCC_5.c,1015 :: 		}                                               //end if ligar && toque3
0x1AEA	0xD012      	BRA         L_piscaLED235
L_piscaLED233:
0x1AEC	0x0100      	MOVLB       0
;TCC_5.c,1019 :: 		if(prog>0 && option==2)                        //se estiver em programação e dispenser n°3 selecionado
0x1AEE	0x0E00      	MOVLW       0
0x1AF0	0x6E00      	MOVWF       R0 
0x1AF2	0x51FA      	MOVF        _prog+1, 0, 1
0x1AF4	0x5C00      	SUBWF       R0, 0 
0x1AF6	0xE102      	BNZ         L__piscaLED566
0x1AF8	0x51F9      	MOVF        _prog, 0, 1
0x1AFA	0x0800      	SUBLW       0
L__piscaLED566:
0x1AFC	0xE208      	BC          L_piscaLED238
0x1AFE	0x0E00      	MOVLW       0
0x1B00	0x19F8      	XORWF       _option+1, 0, 1
0x1B02	0xE102      	BNZ         L__piscaLED567
0x1B04	0x0E02      	MOVLW       2
0x1B06	0x19F7      	XORWF       _option, 0, 1
L__piscaLED567:
0x1B08	0xE102      	BNZ         L_piscaLED238
L__piscaLED397:
;TCC_5.c,1021 :: 		LED4 = 0x01;                                  //LED do dispenser n°3 aceso
0x1B0A	0x8281      	BSF         PORTB, 1 
;TCC_5.c,1022 :: 		}                                              //end if prog>0 && option==2
0x1B0C	0xD001      	BRA         L_piscaLED239
L_piscaLED238:
;TCC_5.c,1024 :: 		else LED4 = 0x00;                               //senão, LED do dispenser n°3 desligado
0x1B0E	0x9281      	BCF         PORTB, 1 
L_piscaLED239:
;TCC_5.c,1026 :: 		}                                               //end else
L_piscaLED235:
;TCC_5.c,1028 :: 		}                                                //end else
L_piscaLED230:
;TCC_5.c,1031 :: 		if(ligar && !toque4 && num4!=0)                  //se ligar for 1, toque4 for 0 e num4 diferente de 0...
0x1B10	0x0101      	MOVLB       1
0x1B12	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1B14	0xD015      	BRA         L_piscaLED242
0x1B16	0x0100      	MOVLB       0
0x1B18	0xB7FF      	BTFSC       _toque4, BitPos(_toque4+0), 1
0x1B1A	0xD012      	BRA         L_piscaLED242
0x1B1C	0x0E00      	MOVLW       0
0x1B1E	0x0101      	MOVLB       1
0x1B20	0x190B      	XORWF       _num4+1, 0, 1
0x1B22	0xE102      	BNZ         L__piscaLED568
0x1B24	0x0E00      	MOVLW       0
0x1B26	0x190A      	XORWF       _num4, 0, 1
L__piscaLED568:
0x1B28	0xE00B      	BZ          L_piscaLED242
L__piscaLED396:
;TCC_5.c,1033 :: 		if(temp_led5>=10)                               //conta 1 segundo
0x1B2A	0x0E00      	MOVLW       0
0x1B2C	0x0100      	MOVLB       0
0x1B2E	0x5DF4      	SUBWF       _temp_led5+1, 0, 1
0x1B30	0xE102      	BNZ         L__piscaLED569
0x1B32	0x0E0A      	MOVLW       10
0x1B34	0x5DF3      	SUBWF       _temp_led5, 0, 1
L__piscaLED569:
0x1B36	0xE303      	BNC         L_piscaLED243
;TCC_5.c,1035 :: 		temp_led5 = 0x00;                              //zera temp_led5
0x1B38	0x6BF3      	CLRF        _temp_led5, 1
0x1B3A	0x6BF4      	CLRF        _temp_led5+1, 1
;TCC_5.c,1036 :: 		LED5 = ~LED5;                                  //inverte estado do LED de indicação do dispenser n°4
0x1B3C	0x7681      	BTG         PORTB, 3 
;TCC_5.c,1038 :: 		}                                               //end if temp_led5>=10
L_piscaLED243:
;TCC_5.c,1040 :: 		}                                                //end if ligar && !toque4 && num4!=0
0x1B3E	0xD022      	BRA         L_piscaLED244
L_piscaLED242:
;TCC_5.c,1044 :: 		if(ligar && toque4)                             //se ligar e toque4 for 1
0x1B40	0x0101      	MOVLB       1
0x1B42	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1B44	0xD00D      	BRA         L_piscaLED247
0x1B46	0x0100      	MOVLB       0
0x1B48	0xA7FF      	BTFSS       _toque4, BitPos(_toque4+0), 1
0x1B4A	0xD00A      	BRA         L_piscaLED247
L__piscaLED395:
;TCC_5.c,1046 :: 		if(temp_led5>=2)                               //conta 200 milisegundos
0x1B4C	0x0E00      	MOVLW       0
0x1B4E	0x5DF4      	SUBWF       _temp_led5+1, 0, 1
0x1B50	0xE102      	BNZ         L__piscaLED570
0x1B52	0x0E02      	MOVLW       2
0x1B54	0x5DF3      	SUBWF       _temp_led5, 0, 1
L__piscaLED570:
0x1B56	0xE303      	BNC         L_piscaLED248
;TCC_5.c,1048 :: 		temp_led5=0x00;                               //zera temp_led5
0x1B58	0x6BF3      	CLRF        _temp_led5, 1
0x1B5A	0x6BF4      	CLRF        _temp_led5+1, 1
;TCC_5.c,1049 :: 		LED5 = ~LED5;                                 //inverte estado do LED de indicação do dispenser n°4
0x1B5C	0x7681      	BTG         PORTB, 3 
;TCC_5.c,1051 :: 		}                                              //end if temp_led5>=2
L_piscaLED248:
;TCC_5.c,1053 :: 		}                                               //end if ligar && toque4
0x1B5E	0xD012      	BRA         L_piscaLED249
L_piscaLED247:
0x1B60	0x0100      	MOVLB       0
;TCC_5.c,1057 :: 		if(prog>0 && option==3)                        //se estiver em programação e dispenser n°4 selecionado
0x1B62	0x0E00      	MOVLW       0
0x1B64	0x6E00      	MOVWF       R0 
0x1B66	0x51FA      	MOVF        _prog+1, 0, 1
0x1B68	0x5C00      	SUBWF       R0, 0 
0x1B6A	0xE102      	BNZ         L__piscaLED571
0x1B6C	0x51F9      	MOVF        _prog, 0, 1
0x1B6E	0x0800      	SUBLW       0
L__piscaLED571:
0x1B70	0xE208      	BC          L_piscaLED252
0x1B72	0x0E00      	MOVLW       0
0x1B74	0x19F8      	XORWF       _option+1, 0, 1
0x1B76	0xE102      	BNZ         L__piscaLED572
0x1B78	0x0E03      	MOVLW       3
0x1B7A	0x19F7      	XORWF       _option, 0, 1
L__piscaLED572:
0x1B7C	0xE102      	BNZ         L_piscaLED252
L__piscaLED394:
;TCC_5.c,1059 :: 		LED5 = 0x01;                                  //LED do dispenser n°4 aceso
0x1B7E	0x8681      	BSF         PORTB, 3 
;TCC_5.c,1060 :: 		}                                              //end if prog>0 && option==3
0x1B80	0xD001      	BRA         L_piscaLED253
L_piscaLED252:
;TCC_5.c,1062 :: 		else LED5 = 0x00;                               //senão, LED do dispenser n°4 desligado
0x1B82	0x9681      	BCF         PORTB, 3 
L_piscaLED253:
;TCC_5.c,1064 :: 		}                                               //end else
L_piscaLED249:
;TCC_5.c,1066 :: 		}                                                //end else
L_piscaLED244:
;TCC_5.c,1068 :: 		}                                                 //end piscaLED()
L_end_piscaLED:
0x1B84	0x0012      	RETURN      0
; end of _piscaLED
_timebase:
;TCC_5.c,1075 :: 		void timebase()
;TCC_5.c,1077 :: 		if(!ligar)                                      //se ligar for 0
0x1B86	0x0101      	MOVLB       1
0x1B88	0xB709      	BTFSC       _ligar, BitPos(_ligar+0), 1
0x1B8A	0xD003      	BRA         L_timebase254
;TCC_5.c,1079 :: 		temp_ligado = 0x00;                            //zera temp_ligado
0x1B8C	0x0100      	MOVLB       0
0x1B8E	0x6BD7      	CLRF        _temp_ligado, 1
0x1B90	0x6BD8      	CLRF        _temp_ligado+1, 1
;TCC_5.c,1080 :: 		}
L_timebase254:
;TCC_5.c,1081 :: 		if(ligar && num!=0)                             //se ligar for 1 e num diferente de 0...
0x1B92	0x0101      	MOVLB       1
0x1B94	0xA709      	BTFSS       _ligar, BitPos(_ligar+0), 1
0x1B96	0xD028      	BRA         L_timebase257
0x1B98	0x0E00      	MOVLW       0
0x1B9A	0x1912      	XORWF       _num+1, 0, 1
0x1B9C	0xE102      	BNZ         L__timebase574
0x1B9E	0x0E00      	MOVLW       0
0x1BA0	0x1911      	XORWF       _num, 0, 1
L__timebase574:
0x1BA2	0xE022      	BZ          L_timebase257
L__timebase406:
;TCC_5.c,1083 :: 		if(temp==10)                                   //conta 1 segundo
0x1BA4	0x0E00      	MOVLW       0
0x1BA6	0x0100      	MOVLB       0
0x1BA8	0x19D4      	XORWF       _temp+1, 0, 1
0x1BAA	0xE102      	BNZ         L__timebase575
0x1BAC	0x0E0A      	MOVLW       10
0x1BAE	0x19D3      	XORWF       _temp, 0, 1
L__timebase575:
0x1BB0	0xE104      	BNZ         L_timebase258
;TCC_5.c,1085 :: 		temp = 0x00;                                  //zera temp
0x1BB2	0x6BD3      	CLRF        _temp, 1
0x1BB4	0x6BD4      	CLRF        _temp+1, 1
;TCC_5.c,1086 :: 		temp_ligado++;                                //incrementa temp_ligado a cada 1 segundo
0x1BB6	0x4BD7      	INFSNZ      _temp_ligado, 1, 1
0x1BB8	0x2BD8      	INCF        _temp_ligado+1, 1, 1
;TCC_5.c,1088 :: 		}                                              //end if temp==10
L_timebase258:
;TCC_5.c,1090 :: 		if(temp_ligado==mult)                          //compara a igualdade de temp_ligado com mult
0x1BBA	0x51D8      	MOVF        _temp_ligado+1, 0, 1
0x1BBC	0x19DC      	XORWF       _mult+1, 0, 1
0x1BBE	0xE102      	BNZ         L__timebase576
0x1BC0	0x51DB      	MOVF        _mult, 0, 1
0x1BC2	0x19D7      	XORWF       _temp_ligado, 0, 1
L__timebase576:
0x1BC4	0xE109      	BNZ         L_timebase259
;TCC_5.c,1092 :: 		toque = 0x01;                                 //liga o bit toque
0x1BC6	0x0101      	MOVLB       1
0x1BC8	0x890C      	BSF         _toque, BitPos(_toque+0), 1
;TCC_5.c,1093 :: 		atv_mot = 0x01;                               //liga o bit de ativação do motor
0x1BCA	0x8100      	BSF         _atv_mot, BitPos(_atv_mot+0), 1
;TCC_5.c,1094 :: 		comp = qtd_comp;
0x1BCC	0xF101C117  	MOVFF       _qtd_comp, _comp
0x1BD0	0xF102C118  	MOVFF       _qtd_comp+1, _comp+1
;TCC_5.c,1095 :: 		abre_mot();                                   //define os bits de controle do motor para abri-lo
0x1BD4	0xF000EC97  	CALL        _abre_mot, 0
;TCC_5.c,1097 :: 		}                                              //end if temp_ligado==mult
L_timebase259:
;TCC_5.c,1099 :: 		if(atv_mot)                                    //se ativação do motor for ligada...
0x1BD8	0x0101      	MOVLB       1
0x1BDA	0xA100      	BTFSS       _atv_mot, BitPos(_atv_mot+0), 1
0x1BDC	0xD003      	BRA         L_timebase260
;TCC_5.c,1101 :: 		read_motbits();                               //executa a leitura dos bits de controle dos motores
0x1BDE	0xF004EC97  	CALL        _read_motbits, 0
;TCC_5.c,1103 :: 		}                                              //end if atv_mot
0x1BE2	0xD002      	BRA         L_timebase261
L_timebase260:
;TCC_5.c,1107 :: 		alarme();                                     //executa o alarme
0x1BE4	0xF005ECDC  	CALL        _alarme, 0
;TCC_5.c,1108 :: 		}
L_timebase261:
;TCC_5.c,1109 :: 		}                                               //end if ligar
L_timebase257:
;TCC_5.c,1111 :: 		}                                                 //end timebase()
L_end_timebase:
0x1BE8	0x0012      	RETURN      0
; end of _timebase
_main:
0x1BEA	0xF00FEC3B  	CALL        7798, 0
;TCC_5.c,214 :: 		void main (void)
;TCC_5.c,219 :: 		ADCON1        =   0x0F;                   //Define os pinos como digital
0x1BEE	0x0E0F      	MOVLW       15
0x1BF0	0x6EC1      	MOVWF       ADCON1 
;TCC_5.c,220 :: 		CMCON         =   0x07;                   //Desativa os comparadores
0x1BF2	0x0E07      	MOVLW       7
0x1BF4	0x6EB4      	MOVWF       CMCON 
;TCC_5.c,222 :: 		TMR0H         =   0x3C;
0x1BF6	0x0E3C      	MOVLW       60
0x1BF8	0x6ED7      	MOVWF       TMR0H 
;TCC_5.c,223 :: 		TMR0L         =   0xB0;                   //Inicia timer0 em 15536
0x1BFA	0x0EB0      	MOVLW       176
0x1BFC	0x6ED6      	MOVWF       TMR0L 
;TCC_5.c,224 :: 		TMR1H         =   0x3C;
0x1BFE	0x0E3C      	MOVLW       60
0x1C00	0x6ECF      	MOVWF       TMR1H 
;TCC_5.c,225 :: 		TMR1L         =   0xB0;                   //Inicia TMR1 em 15536
0x1C02	0x0EB0      	MOVLW       176
0x1C04	0x6ECE      	MOVWF       TMR1L 
;TCC_5.c,228 :: 		INTCON.GIE    =   0x01;                   //Ativa interrupção global
0x1C06	0x8EF2      	BSF         INTCON, 7 
;TCC_5.c,229 :: 		INTCON.PEIE   =   0x01;                   //Ativa interrupção por periféricos
0x1C08	0x8CF2      	BSF         INTCON, 6 
;TCC_5.c,230 :: 		INTCON.TMR0IE =   0x01;                   //Ativa interrupção por overflow
0x1C0A	0x8AF2      	BSF         INTCON, 5 
;TCC_5.c,232 :: 		TMR0IF_bit    =   0x00;                   //zera a flag do timer0
0x1C0C	0x94F2      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0) 
;TCC_5.c,233 :: 		TMR1IF_bit    =   0x00;                   //zera a flag do timer1
0x1C0E	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;TCC_5.c,236 :: 		INTCON2.RBPU  =   0x01;                   //Desliga os resistores de pull-ups do portB
0x1C10	0x8EF1      	BSF         INTCON2, 7 
;TCC_5.c,237 :: 		T0CON         =   0x81;                   //TMR0 16 bits, prescaler 1:4
0x1C12	0x0E81      	MOVLW       129
0x1C14	0x6ED5      	MOVWF       T0CON 
;TCC_5.c,238 :: 		T1CON         =   0xA1;                   //TMR1 16 bits, prescaler 1:4
0x1C16	0x0EA1      	MOVLW       161
0x1C18	0x6ECD      	MOVWF       T1CON 
;TCC_5.c,241 :: 		ligar         =   0x00;                   //     |
0x1C1A	0x0101      	MOVLB       1
0x1C1C	0x9709      	BCF         _ligar, BitPos(_ligar+0), 1
;TCC_5.c,242 :: 		b1_flag       =   0x00;                   //     |
0x1C1E	0x9509      	BCF         _b1_flag, BitPos(_b1_flag+0), 1
;TCC_5.c,243 :: 		b2_flag       =   0x00;                   //     |
0x1C20	0x950C      	BCF         _b2_flag, BitPos(_b2_flag+0), 1
;TCC_5.c,244 :: 		b3_flag       =   0x00;                   //     |
0x1C22	0x970C      	BCF         _b3_flag, BitPos(_b3_flag+0), 1
;TCC_5.c,245 :: 		b4_flag       =   0x00;                   //     |
0x1C24	0x930C      	BCF         _b4_flag, BitPos(_b4_flag+0), 1
;TCC_5.c,246 :: 		b5_flag       =   0x00;                   //     |
0x1C26	0x0100      	MOVLB       0
0x1C28	0x99FF      	BCF         _b5_flag, BitPos(_b5_flag+0), 1
;TCC_5.c,247 :: 		display       =   0x00;                   //     |
0x1C2A	0x0101      	MOVLB       1
0x1C2C	0x9B0C      	BCF         _display, BitPos(_display+0), 1
;TCC_5.c,248 :: 		fast_inc      =   0x00;                   //     |
0x1C2E	0x910C      	BCF         _fast_inc, BitPos(_fast_inc+0), 1
;TCC_5.c,249 :: 		toque         =   0x00;                   //     |
0x1C30	0x990C      	BCF         _toque, BitPos(_toque+0), 1
;TCC_5.c,250 :: 		toque2        =   0x00;                   //     |
0x1C32	0x0100      	MOVLB       0
0x1C34	0x95FF      	BCF         _toque2, BitPos(_toque2+0), 1
;TCC_5.c,251 :: 		toque3        =   0x00;                   //     |
0x1C36	0x93FF      	BCF         _toque3, BitPos(_toque3+0), 1
;TCC_5.c,252 :: 		toque4        =   0x00;                   //     |
0x1C38	0x97FF      	BCF         _toque4, BitPos(_toque4+0), 1
;TCC_5.c,253 :: 		open_bit      =   0x00;                   //     |
0x1C3A	0x9BFF      	BCF         _open_bit, BitPos(_open_bit+0), 1
;TCC_5.c,254 :: 		open_bit2     =   0x00;                   //     |
0x1C3C	0x0101      	MOVLB       1
0x1C3E	0x9700      	BCF         _open_bit2, BitPos(_open_bit2+0), 1
;TCC_5.c,255 :: 		open_bit3     =   0x00;                   //     |
0x1C40	0x9500      	BCF         _open_bit3, BitPos(_open_bit3+0), 1
;TCC_5.c,256 :: 		open_bit4     =   0x00;                   //     |
0x1C42	0x9B00      	BCF         _open_bit4, BitPos(_open_bit4+0), 1
;TCC_5.c,257 :: 		close_bit     =   0x00;                   //     |
0x1C44	0x9900      	BCF         _close_bit, BitPos(_close_bit+0), 1
;TCC_5.c,258 :: 		close_bit2    =   0x00;                   //     |
0x1C46	0x0100      	MOVLB       0
0x1C48	0x9FFF      	BCF         _close_bit2, BitPos(_close_bit2+0), 1
;TCC_5.c,259 :: 		close_bit3    =   0x00;                   //     |
0x1C4A	0x9DFF      	BCF         _close_bit3, BitPos(_close_bit3+0), 1
;TCC_5.c,260 :: 		close_bit4    =   0x00;                   //     |
0x1C4C	0x0101      	MOVLB       1
0x1C4E	0x9300      	BCF         _close_bit4, BitPos(_close_bit4+0), 1
;TCC_5.c,261 :: 		atv_mot       =   0x00;                   //     |
0x1C50	0x9100      	BCF         _atv_mot, BitPos(_atv_mot+0), 1
;TCC_5.c,262 :: 		atv_mot2      =   0x00;                   //     |
0x1C52	0x9109      	BCF         _atv_mot2, BitPos(_atv_mot2+0), 1
;TCC_5.c,263 :: 		atv_mot3      =   0x00;                   //     |
0x1C54	0x9F00      	BCF         _atv_mot3, BitPos(_atv_mot3+0), 1
;TCC_5.c,264 :: 		atv_mot4      =   0x00;                   //    \ /
0x1C56	0x9309      	BCF         _atv_mot4, BitPos(_atv_mot4+0), 1
;TCC_5.c,266 :: 		SM            =   0x00;                   //zerando todos os bits
0x1C58	0x9280      	BCF         PORTA, 1 
;TCC_5.c,267 :: 		SM2           =   0x00;
0x1C5A	0x9880      	BCF         PORTA, 4 
;TCC_5.c,268 :: 		SM3           =   0x00;
0x1C5C	0x9A80      	BCF         PORTA, 5 
;TCC_5.c,269 :: 		SM4           =   0x00;
0x1C5E	0x9481      	BCF         PORTB, 2 
;TCC_5.c,271 :: 		num           =   EEPROM_Read(0x01);      //lê os dados da EEPROM para variável num
0x1C60	0x0E01      	MOVLW       1
0x1C62	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1C64	0xDE06      	RCALL       _EEPROM_Read
0x1C66	0xF111C000  	MOVFF       R0, _num
0x1C6A	0x0E00      	MOVLW       0
0x1C6C	0x6F12      	MOVWF       _num+1, 1
;TCC_5.c,272 :: 		un            =   EEPROM_Read(0x03);      //lê os dados da EEPROM para variável un
0x1C6E	0x0E03      	MOVLW       3
0x1C70	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1C72	0xDDFF      	RCALL       _EEPROM_Read
0x1C74	0xB000      	BTFSC       R0, 0 
0x1C76	0xD002      	BRA         L__main426
0x1C78	0x9D09      	BCF         _un, BitPos(_un+0), 1
0x1C7A	0xD001      	BRA         L__main427
L__main426:
0x1C7C	0x8D09      	BSF         _un, BitPos(_un+0), 1
L__main427:
;TCC_5.c,273 :: 		num2          =   EEPROM_Read(0x02);      //lê os dados da EEPROM para variável num2
0x1C7E	0x0E02      	MOVLW       2
0x1C80	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1C82	0xDDF7      	RCALL       _EEPROM_Read
0x1C84	0xF10DC000  	MOVFF       R0, _num2
0x1C88	0x0E00      	MOVLW       0
0x1C8A	0x6F0E      	MOVWF       _num2+1, 1
;TCC_5.c,274 :: 		un2           =   EEPROM_Read(0x04);      //lê os dados da EEPROM para variável un2
0x1C8C	0x0E04      	MOVLW       4
0x1C8E	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1C90	0xDDF0      	RCALL       _EEPROM_Read
0x1C92	0xB000      	BTFSC       R0, 0 
0x1C94	0xD002      	BRA         L__main428
0x1C96	0x9F09      	BCF         _un2, BitPos(_un2+0), 1
0x1C98	0xD001      	BRA         L__main429
L__main428:
0x1C9A	0x8F09      	BSF         _un2, BitPos(_un2+0), 1
L__main429:
;TCC_5.c,275 :: 		num3          =   EEPROM_Read(0x05);      //lê os dados da EEPROM para variável num3
0x1C9C	0x0E05      	MOVLW       5
0x1C9E	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1CA0	0xDDE8      	RCALL       _EEPROM_Read
0x1CA2	0xF10FC000  	MOVFF       R0, _num3
0x1CA6	0x0E00      	MOVLW       0
0x1CA8	0x6F10      	MOVWF       _num3+1, 1
;TCC_5.c,276 :: 		un3           =   EEPROM_Read(0x06);      //lê os dados da EEPROM para variável un3
0x1CAA	0x0E06      	MOVLW       6
0x1CAC	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1CAE	0xDDE1      	RCALL       _EEPROM_Read
0x1CB0	0xB000      	BTFSC       R0, 0 
0x1CB2	0xD002      	BRA         L__main430
0x1CB4	0x9909      	BCF         _un3, BitPos(_un3+0), 1
0x1CB6	0xD001      	BRA         L__main431
L__main430:
0x1CB8	0x8909      	BSF         _un3, BitPos(_un3+0), 1
L__main431:
;TCC_5.c,277 :: 		num4          =   EEPROM_Read(0x07);      //lê os dados da EEPROM para variável num4
0x1CBA	0x0E07      	MOVLW       7
0x1CBC	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1CBE	0xDDD9      	RCALL       _EEPROM_Read
0x1CC0	0xF10AC000  	MOVFF       R0, _num4
0x1CC4	0x0E00      	MOVLW       0
0x1CC6	0x6F0B      	MOVWF       _num4+1, 1
;TCC_5.c,278 :: 		un4           =   EEPROM_Read(0x08);      //lê os dados da EEPROM para variável un4
0x1CC8	0x0E08      	MOVLW       8
0x1CCA	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1CCC	0xDDD2      	RCALL       _EEPROM_Read
0x1CCE	0xB000      	BTFSC       R0, 0 
0x1CD0	0xD002      	BRA         L__main432
0x1CD2	0x9B09      	BCF         _un4, BitPos(_un4+0), 1
0x1CD4	0xD001      	BRA         L__main433
L__main432:
0x1CD6	0x8B09      	BSF         _un4, BitPos(_un4+0), 1
L__main433:
;TCC_5.c,279 :: 		qtd_comp      =   EEPROM_Read(0x09);      //lê os dados da EEPROM para variavel qtd_comp
0x1CD8	0x0E09      	MOVLW       9
0x1CDA	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1CDC	0xDDCA      	RCALL       _EEPROM_Read
0x1CDE	0xF117C000  	MOVFF       R0, _qtd_comp
0x1CE2	0x0E00      	MOVLW       0
0x1CE4	0x6F18      	MOVWF       _qtd_comp+1, 1
;TCC_5.c,280 :: 		qtd_comp2     =   EEPROM_Read(0x0A);      //lê os dados da EEPROM para variavel qtd_comp2
0x1CE6	0x0E0A      	MOVLW       10
0x1CE8	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1CEA	0xDDC3      	RCALL       _EEPROM_Read
0x1CEC	0xF119C000  	MOVFF       R0, _qtd_comp2
0x1CF0	0x0E00      	MOVLW       0
0x1CF2	0x6F1A      	MOVWF       _qtd_comp2+1, 1
;TCC_5.c,281 :: 		qtd_comp3     =   EEPROM_Read(0x0B);      //lê os dados da EEPROM para variavel qtd_comp3
0x1CF4	0x0E0B      	MOVLW       11
0x1CF6	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1CF8	0xDDBC      	RCALL       _EEPROM_Read
0x1CFA	0xF113C000  	MOVFF       R0, _qtd_comp3
0x1CFE	0x0E00      	MOVLW       0
0x1D00	0x6F14      	MOVWF       _qtd_comp3+1, 1
;TCC_5.c,282 :: 		qtd_comp4     =   EEPROM_Read(0x0C);      //lê os dados da EEPROM para variavel qtd_comp4
0x1D02	0x0E0C      	MOVLW       12
0x1D04	0x6F1B      	MOVWF       FARG_EEPROM_Read_address, 1
0x1D06	0xDDB5      	RCALL       _EEPROM_Read
0x1D08	0xF115C000  	MOVFF       R0, _qtd_comp4
0x1D0C	0x0E00      	MOVLW       0
0x1D0E	0x6F16      	MOVWF       _qtd_comp4+1, 1
;TCC_5.c,284 :: 		if(qtd_comp==0xFF)qtd_comp=0x01;
0x1D10	0x0E00      	MOVLW       0
0x1D12	0x1918      	XORWF       _qtd_comp+1, 0, 1
0x1D14	0xE102      	BNZ         L__main434
0x1D16	0x0EFF      	MOVLW       255
0x1D18	0x1917      	XORWF       _qtd_comp, 0, 1
L__main434:
0x1D1A	0xE104      	BNZ         L_main2
0x1D1C	0x0E01      	MOVLW       1
0x1D1E	0x6F17      	MOVWF       _qtd_comp, 1
0x1D20	0x0E00      	MOVLW       0
0x1D22	0x6F18      	MOVWF       _qtd_comp+1, 1
L_main2:
;TCC_5.c,285 :: 		if(qtd_comp2==0xFF)qtd_comp2=0x01;
0x1D24	0x0E00      	MOVLW       0
0x1D26	0x191A      	XORWF       _qtd_comp2+1, 0, 1
0x1D28	0xE102      	BNZ         L__main435
0x1D2A	0x0EFF      	MOVLW       255
0x1D2C	0x1919      	XORWF       _qtd_comp2, 0, 1
L__main435:
0x1D2E	0xE104      	BNZ         L_main3
0x1D30	0x0E01      	MOVLW       1
0x1D32	0x6F19      	MOVWF       _qtd_comp2, 1
0x1D34	0x0E00      	MOVLW       0
0x1D36	0x6F1A      	MOVWF       _qtd_comp2+1, 1
L_main3:
;TCC_5.c,286 :: 		if(qtd_comp3==0xFF)qtd_comp3=0x01;
0x1D38	0x0E00      	MOVLW       0
0x1D3A	0x1914      	XORWF       _qtd_comp3+1, 0, 1
0x1D3C	0xE102      	BNZ         L__main436
0x1D3E	0x0EFF      	MOVLW       255
0x1D40	0x1913      	XORWF       _qtd_comp3, 0, 1
L__main436:
0x1D42	0xE104      	BNZ         L_main4
0x1D44	0x0E01      	MOVLW       1
0x1D46	0x6F13      	MOVWF       _qtd_comp3, 1
0x1D48	0x0E00      	MOVLW       0
0x1D4A	0x6F14      	MOVWF       _qtd_comp3+1, 1
L_main4:
;TCC_5.c,287 :: 		if(qtd_comp4==0xFF)qtd_comp4=0x01;
0x1D4C	0x0E00      	MOVLW       0
0x1D4E	0x1916      	XORWF       _qtd_comp4+1, 0, 1
0x1D50	0xE102      	BNZ         L__main437
0x1D52	0x0EFF      	MOVLW       255
0x1D54	0x1915      	XORWF       _qtd_comp4, 0, 1
L__main437:
0x1D56	0xE104      	BNZ         L_main5
0x1D58	0x0E01      	MOVLW       1
0x1D5A	0x6F15      	MOVWF       _qtd_comp4, 1
0x1D5C	0x0E00      	MOVLW       0
0x1D5E	0x6F16      	MOVWF       _qtd_comp4+1, 1
L_main5:
;TCC_5.c,289 :: 		TRISA = 0x00;                             //seta todos os bits do TRISA como saída
0x1D60	0x6A92      	CLRF        TRISA 
;TCC_5.c,290 :: 		TRISC = 0x3F;                             //seta os bits 0,1,2,3,5 como entrada
0x1D62	0x0E3F      	MOVLW       63
0x1D64	0x6E94      	MOVWF       TRISC 
;TCC_5.c,291 :: 		TRISB = 0x00;                             //seta todos os bits do TRISB como saída
0x1D66	0x6A93      	CLRF        TRISB 
;TCC_5.c,293 :: 		LCD_Init();                               //inicia o LCD
0x1D68	0xDD19      	RCALL       _Lcd_Init
;TCC_5.c,294 :: 		LCD_Cmd(_LCD_CLEAR);                      //limpa o LCD
0x1D6A	0x0E01      	MOVLW       1
0x1D6C	0x6F25      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x1D6E	0xF000EC58  	CALL        _Lcd_Cmd, 0
;TCC_5.c,295 :: 		LCD_Cmd(_LCD_CURSOR_OFF);                 //desliga cursor do LCD
0x1D72	0x0E0C      	MOVLW       12
0x1D74	0x6F25      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x1D76	0xF000EC58  	CALL        _Lcd_Cmd, 0
;TCC_5.c,297 :: 		while(1)                                         //loop infinito
L_main6:
;TCC_5.c,299 :: 		ler_bot();                                     //executa ler_bot
0x1D7A	0xF006EC0B  	CALL        _ler_bot, 0
;TCC_5.c,301 :: 		disp();                                        //executa disp
0x1D7E	0xF009ECEC  	CALL        _disp, 0
;TCC_5.c,302 :: 		}                                                //end while
0x1D82	0xD7FB      	BRA         L_main6
;TCC_5.c,304 :: 		}                                                 //end main
L_end_main:
0x1D84	0xD7FF      	BRA         $+0
; end of _main
0x1E76	0xF018EE10  	LFSR        1, 24
0x1E7A	0x0EE7      	MOVLW       231
0x1E7C	0x6E00      	MOVWF       R0 
0x1E7E	0x0E01      	MOVLW       1
0x1E80	0x6E01      	MOVWF       R1 
0x1E82	0x0E86      	MOVLW       134
0x1E84	0x6EF6      	MOVWF       4086 
0x1E86	0x0E1D      	MOVLW       29
0x1E88	0x6EF7      	MOVWF       TBLPTRH 
0x1E8A	0x0E00      	MOVLW       0
0x1E8C	0x6EF8      	MOVWF       TBLPTRU 
0x1E8E	0xF00CEC31  	CALL        6242, 0
0x1E92	0xF001EE11  	LFSR        1, 257
0x1E96	0x0E08      	MOVLW       8
0x1E98	0x6E00      	MOVWF       R0 
0x1E9A	0x0E01      	MOVLW       1
0x1E9C	0x6E01      	MOVWF       R1 
0x1E9E	0x0E6D      	MOVLW       109
0x1EA0	0x6EF6      	MOVWF       4086 
0x1EA2	0x0E1E      	MOVLW       30
0x1EA4	0x6EF7      	MOVWF       TBLPTRH 
0x1EA6	0x0E00      	MOVLW       0
0x1EA8	0x6EF8      	MOVWF       TBLPTRU 
0x1EAA	0xF00CEC31  	CALL        6242, 0
0x1EAE	0x0012      	RETURN      0
;TCC_5.c,0 :: ?ICS?lstr1_TCC_5
0x1D86	0x2020 ;?ICS?lstr1_TCC_5+0
0x1D88	0x4944 ;?ICS?lstr1_TCC_5+2
0x1D8A	0x5053 ;?ICS?lstr1_TCC_5+4
0x1D8C	0x4E45 ;?ICS?lstr1_TCC_5+6
0x1D8E	0x4553 ;?ICS?lstr1_TCC_5+8
0x1D90	0x2052 ;?ICS?lstr1_TCC_5+10
0x1D92	0x4544 ;?ICS?lstr1_TCC_5+12
0x1D94	0x2020 ;?ICS?lstr1_TCC_5+14
0x1D96	0x00 ;?ICS?lstr1_TCC_5+16
; end of ?ICS?lstr1_TCC_5
;TCC_5.c,0 :: ?ICS_dia
0x1D97	0x6964 ;?ICS_dia+0
0x1D99	0x0061 ;?ICS_dia+2
; end of ?ICS_dia
;TCC_5.c,0 :: ?ICS?lstr3_TCC_5
0x1D9B	0x5445 ;?ICS?lstr3_TCC_5+0
0x1D9D	0x4345 ;?ICS?lstr3_TCC_5+2
0x1D9F	0x4C20 ;?ICS?lstr3_TCC_5+4
0x1DA1	0x5541 ;?ICS?lstr3_TCC_5+6
0x1DA3	0x4F52 ;?ICS?lstr3_TCC_5+8
0x1DA5	0x4720 ;?ICS?lstr3_TCC_5+10
0x1DA7	0x4D4F ;?ICS?lstr3_TCC_5+12
0x1DA9	0x5345 ;?ICS?lstr3_TCC_5+14
0x1DAB	0x00 ;?ICS?lstr3_TCC_5+16
; end of ?ICS?lstr3_TCC_5
;TCC_5.c,0 :: ?ICS?lstr2_TCC_5
0x1DAC	0x2020 ;?ICS?lstr2_TCC_5+0
0x1DAE	0x2020 ;?ICS?lstr2_TCC_5+2
0x1DB0	0x4552 ;?ICS?lstr2_TCC_5+4
0x1DB2	0x454D ;?ICS?lstr2_TCC_5+6
0x1DB4	0x4944 ;?ICS?lstr2_TCC_5+8
0x1DB6	0x534F ;?ICS?lstr2_TCC_5+10
0x1DB8	0x2020 ;?ICS?lstr2_TCC_5+12
0x1DBA	0x2020 ;?ICS?lstr2_TCC_5+14
0x1DBC	0x00 ;?ICS?lstr2_TCC_5+16
; end of ?ICS?lstr2_TCC_5
;TCC_5.c,0 :: ?ICS_temp_ligado4
0x1DBD	0x0000 ;?ICS_temp_ligado4+0
; end of ?ICS_temp_ligado4
;TCC_5.c,0 :: ?ICS_temp_ligado3
0x1DBF	0x0000 ;?ICS_temp_ligado3+0
; end of ?ICS_temp_ligado3
;TCC_5.c,0 :: ?ICS_hora
0x1DC1	0x2068 ;?ICS_hora+0
0x1DC3	0x0020 ;?ICS_hora+2
; end of ?ICS_hora
;TCC_5.c,0 :: ?ICS?lstr9_TCC_5
0x1DC5	0x7451 ;?ICS?lstr9_TCC_5+0
0x1DC7	0x2E64 ;?ICS?lstr9_TCC_5+2
0x1DC9	0x4320 ;?ICS?lstr9_TCC_5+4
0x1DCB	0x4D4F ;?ICS?lstr9_TCC_5+6
0x1DCD	0x5250 ;?ICS?lstr9_TCC_5+8
0x1DCF	0x4D49 ;?ICS?lstr9_TCC_5+10
0x1DD1	0x4449 ;?ICS?lstr9_TCC_5+12
0x1DD3	0x534F ;?ICS?lstr9_TCC_5+14
0x1DD5	0x00 ;?ICS?lstr9_TCC_5+16
; end of ?ICS?lstr9_TCC_5
;TCC_5.c,0 :: ?ICS?lstr8_TCC_5
0x1DD6	0x5250 ;?ICS?lstr8_TCC_5+0
0x1DD8	0x474F ;?ICS?lstr8_TCC_5+2
0x1DDA	0x4152 ;?ICS?lstr8_TCC_5+4
0x1DDC	0x454D ;?ICS?lstr8_TCC_5+6
0x1DDE	0x5520 ;?ICS?lstr8_TCC_5+8
0x1DE0	0x2E6E ;?ICS?lstr8_TCC_5+10
0x1DE2	0x003A ;?ICS?lstr8_TCC_5+12
; end of ?ICS?lstr8_TCC_5
;TCC_5.c,0 :: ?ICS_temp_disp
0x1DE4	0x0000 ;?ICS_temp_disp+0
; end of ?ICS_temp_disp
;TCC_5.c,0 :: ?ICS?lstr10_TCC_5
0x1DE6	0x4944 ;?ICS?lstr10_TCC_5+0
0x1DE8	0x5053 ;?ICS?lstr10_TCC_5+2
0x1DEA	0x2020 ;?ICS?lstr10_TCC_5+4
0x1DEC	0x4554 ;?ICS?lstr10_TCC_5+6
0x1DEE	0x504D ;?ICS?lstr10_TCC_5+8
0x1DF0	0x204F ;?ICS?lstr10_TCC_5+10
0x1DF2	0x5120 ;?ICS?lstr10_TCC_5+12
0x1DF4	0x6474 ;?ICS?lstr10_TCC_5+14
0x1DF6	0x00 ;?ICS?lstr10_TCC_5+16
; end of ?ICS?lstr10_TCC_5
;TCC_5.c,0 :: ?ICS?lstr5_TCC_5
0x1DF7	0x2020 ;?ICS?lstr5_TCC_5+0
0x1DF9	0x2020 ;?ICS?lstr5_TCC_5+2
0x1DFB	0x5020 ;?ICS?lstr5_TCC_5+4
0x1DFD	0x5241 ;?ICS?lstr5_TCC_5+6
0x1DFF	0x4E41 ;?ICS?lstr5_TCC_5+8
0x1E01	0x4F44 ;?ICS?lstr5_TCC_5+10
0x1E03	0x2020 ;?ICS?lstr5_TCC_5+12
0x1E05	0x2020 ;?ICS?lstr5_TCC_5+14
0x1E07	0x00 ;?ICS?lstr5_TCC_5+16
; end of ?ICS?lstr5_TCC_5
;TCC_5.c,0 :: ?ICS?lstr4_TCC_5
0x1E08	0x2020 ;?ICS?lstr4_TCC_5+0
0x1E0A	0x4133 ;?ICS?lstr4_TCC_5+2
0x1E0C	0x4D20 ;?ICS?lstr4_TCC_5+4
0x1E0E	0x4345 ;?ICS?lstr4_TCC_5+6
0x1E10	0x2041 ;?ICS?lstr4_TCC_5+8
0x1E12	0x3032 ;?ICS?lstr4_TCC_5+10
0x1E14	0x3132 ;?ICS?lstr4_TCC_5+12
0x1E16	0x2020 ;?ICS?lstr4_TCC_5+14
0x1E18	0x00 ;?ICS?lstr4_TCC_5+16
; end of ?ICS?lstr4_TCC_5
;TCC_5.c,0 :: ?ICS?lstr7_TCC_5
0x1E19	0x5250 ;?ICS?lstr7_TCC_5+0
0x1E1B	0x474F ;?ICS?lstr7_TCC_5+2
0x1E1D	0x4152 ;?ICS?lstr7_TCC_5+4
0x1E1F	0x454D ;?ICS?lstr7_TCC_5+6
0x1E21	0x4E20 ;?ICS?lstr7_TCC_5+8
0x1E23	0x4D55 ;?ICS?lstr7_TCC_5+10
0x1E25	0x5245 ;?ICS?lstr7_TCC_5+12
0x1E27	0x3A4F ;?ICS?lstr7_TCC_5+14
0x1E29	0x00 ;?ICS?lstr7_TCC_5+16
; end of ?ICS?lstr7_TCC_5
;TCC_5.c,0 :: ?ICS?lstr6_TCC_5
0x1E2A	0x2020 ;?ICS?lstr6_TCC_5+0
0x1E2C	0x2020 ;?ICS?lstr6_TCC_5+2
0x1E2E	0x4320 ;?ICS?lstr6_TCC_5+4
0x1E30	0x4E4F ;?ICS?lstr6_TCC_5+6
0x1E32	0x4154 ;?ICS?lstr6_TCC_5+8
0x1E34	0x4547 ;?ICS?lstr6_TCC_5+10
0x1E36	0x204D ;?ICS?lstr6_TCC_5+12
0x1E38	0x2020 ;?ICS?lstr6_TCC_5+14
0x1E3A	0x00 ;?ICS?lstr6_TCC_5+16
; end of ?ICS?lstr6_TCC_5
;TCC_5.c,0 :: ?ICS_temp3
0x1E3B	0x0000 ;?ICS_temp3+0
; end of ?ICS_temp3
;TCC_5.c,0 :: ?ICS_temp2
0x1E3D	0x0000 ;?ICS_temp2+0
; end of ?ICS_temp2
;TCC_5.c,0 :: ?ICS_temp4
0x1E3F	0x0000 ;?ICS_temp4+0
; end of ?ICS_temp4
;TCC_5.c,0 :: ?ICS_temp
0x1E41	0x0000 ;?ICS_temp+0
; end of ?ICS_temp
;TCC_5.c,0 :: ?ICS_temp_ligado2
0x1E43	0x0000 ;?ICS_temp_ligado2+0
; end of ?ICS_temp_ligado2
;TCC_5.c,0 :: ?ICS_temp_ligado
0x1E45	0x0000 ;?ICS_temp_ligado+0
; end of ?ICS_temp_ligado
;TCC_5.c,0 :: ?ICS_mult2
0x1E47	0x0000 ;?ICS_mult2+0
; end of ?ICS_mult2
;TCC_5.c,0 :: ?ICS_mult
0x1E49	0x0000 ;?ICS_mult+0
; end of ?ICS_mult
;TCC_5.c,0 :: ?ICS_mult4
0x1E4B	0x0000 ;?ICS_mult4+0
; end of ?ICS_mult4
;TCC_5.c,0 :: ?ICS_mult3
0x1E4D	0x0000 ;?ICS_mult3+0
; end of ?ICS_mult3
;TCC_5.c,0 :: ?ICS_temp_led
0x1E4F	0x0000 ;?ICS_temp_led+0
; end of ?ICS_temp_led
;TCC_5.c,0 :: ?ICS_x_mot
0x1E51	0x0000 ;?ICS_x_mot+0
; end of ?ICS_x_mot
;TCC_5.c,0 :: ?ICS_temp_led3
0x1E53	0x0000 ;?ICS_temp_led3+0
; end of ?ICS_temp_led3
;TCC_5.c,0 :: ?ICS_temp_led2
0x1E55	0x0000 ;?ICS_temp_led2+0
; end of ?ICS_temp_led2
;TCC_5.c,0 :: ?ICS_x_mot3
0x1E57	0x0000 ;?ICS_x_mot3+0
; end of ?ICS_x_mot3
;TCC_5.c,0 :: ?ICS_x_mot4
0x1E59	0x0000 ;?ICS_x_mot4+0
; end of ?ICS_x_mot4
;TCC_5.c,0 :: ?ICS_temp_som
0x1E5B	0x0000 ;?ICS_temp_som+0
; end of ?ICS_temp_som
;TCC_5.c,0 :: ?ICS_vezes
0x1E5D	0x0000 ;?ICS_vezes+0
; end of ?ICS_vezes
;TCC_5.c,0 :: ?ICS_x_mot2
0x1E5F	0x0000 ;?ICS_x_mot2+0
; end of ?ICS_x_mot2
;TCC_5.c,0 :: ?ICS_temp_led5
0x1E61	0x0000 ;?ICS_temp_led5+0
; end of ?ICS_temp_led5
;TCC_5.c,0 :: ?ICS_temp_led4
0x1E63	0x0000 ;?ICS_temp_led4+0
; end of ?ICS_temp_led4
;TCC_5.c,0 :: ?ICS_option
0x1E65	0x0000 ;?ICS_option+0
; end of ?ICS_option
;TCC_5.c,0 :: ?ICS_prog
0x1E67	0x0000 ;?ICS_prog+0
; end of ?ICS_prog
;TCC_5.c,0 :: ?ICS_temp_inc
0x1E69	0x0000 ;?ICS_temp_inc+0
; end of ?ICS_temp_inc
;TCC_5.c,0 :: ?ICS_temp_num
0x1E6B	0x0000 ;?ICS_temp_num+0
; end of ?ICS_temp_num
;TCC_5.c,0 :: ?ICS_comp
0x1E6D	0x0000 ;?ICS_comp+0
; end of ?ICS_comp
;TCC_5.c,0 :: ?ICS_comp2
0x1E6F	0x0000 ;?ICS_comp2+0
; end of ?ICS_comp2
;TCC_5.c,0 :: ?ICS_comp3
0x1E71	0x0000 ;?ICS_comp3+0
; end of ?ICS_comp3
;TCC_5.c,0 :: ?ICS_comp4
0x1E73	0x0000 ;?ICS_comp4+0
; end of ?ICS_comp4
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [130]    _interrupt
0x008A       [6]    _Delay_1us
0x0090      [22]    _Delay_5500us
0x00A6      [10]    _Delay_50us
0x00B0     [126]    _Lcd_Cmd
0x012E      [16]    _abre_mot
0x013E      [14]    _Lcd_Chr_CP
0x014C      [14]    _abre_mot2
0x015A      [14]    _abre_mot3
0x0168      [14]    _fecha_mot3
0x0176      [14]    _abre_mot4
0x0184      [14]    _fecha_mot2
0x0192      [14]    _fecha_mot4
0x01A0      [16]    _fecha_mot
0x01B0     [100]    _mot_aberto4
0x0214     [102]    _mot_fechado4
0x027A     [102]    _mot_aberto2
0x02E0     [102]    _mot_aberto3
0x0346     [102]    _mot_fechado3
0x03AC     [102]    _mot_fechado
0x0412     [102]    _mot_fechado2
0x0478     [102]    _mot_aberto
0x04DE      [94]    _Lcd_Chr
0x053C     [126]    _Lcd_Out
0x05BA      [60]    _toca_som
0x05F6      [54]    _Div_16X16_U
0x062C      [80]    _Mul_16X16_U
0x067C     [690]    _num_un
0x092E     [168]    _read_motbits
0x09D6      [62]    _EEPROM_Write
0x0A14     [420]    _fast_incr
0x0BB8      [94]    _alarme
0x0C16    [1986]    _ler_bot
0x13D8     [964]    _disp
0x179C     [198]    _Lcd_Init
0x1862      [16]    ___CC2DW
0x1872      [16]    _EEPROM_Read
0x1882      [96]    _timebase4
0x18E2      [96]    _timebase3
0x1942     [100]    _timebase2
0x19A6     [480]    _piscaLED
0x1B86     [100]    _timebase
0x1BEA     [412]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0018      [17]    ?lstr1_TCC_5
0x0029       [4]    _dia
0x002D      [17]    ?lstr3_TCC_5
0x003E      [17]    ?lstr2_TCC_5
0x004F       [2]    _temp_ligado4
0x0051       [2]    _temp_ligado3
0x0053       [4]    _hora
0x0057      [17]    ?lstr9_TCC_5
0x0068      [14]    ?lstr8_TCC_5
0x0076       [2]    _temp_disp
0x0078      [17]    ?lstr10_TCC_5
0x0089      [17]    ?lstr5_TCC_5
0x009A      [17]    ?lstr4_TCC_5
0x00AB      [17]    ?lstr7_TCC_5
0x00BC      [17]    ?lstr6_TCC_5
0x00CD       [2]    _temp3
0x00CF       [2]    _temp2
0x00D1       [2]    _temp4
0x00D3       [2]    _temp
0x00D5       [2]    _temp_ligado2
0x00D7       [2]    _temp_ligado
0x00D9       [2]    _mult2
0x00DB       [2]    _mult
0x00DD       [2]    _mult4
0x00DF       [2]    _mult3
0x00E1       [2]    _temp_led
0x00E3       [2]    _x_mot
0x00E5       [2]    _temp_led3
0x00E7       [2]    _temp_led2
0x00E9       [2]    _x_mot3
0x00EB       [2]    _x_mot4
0x00ED       [2]    _temp_som
0x00EF       [2]    _vezes
0x00F1       [2]    _x_mot2
0x00F3       [2]    _temp_led5
0x00F5       [2]    _temp_led4
0x00F7       [2]    _option
0x00F9       [2]    _prog
0x00FB       [2]    _temp_inc
0x00FD       [2]    _temp_num
0x00FF       [0]    _b5_flag
0x00FF       [0]    _close_bit3
0x00FF       [0]    _close_bit2
0x00FF       [0]    _toque2
0x00FF       [0]    _display2
0x00FF       [0]    _toque3
0x00FF       [0]    _open_bit
0x00FF       [0]    _toque4
0x0100       [0]    _open_bit4
0x0100       [0]    _open_bit3
0x0100       [0]    __Lib_Lcd_cmd_status
0x0100       [0]    _close_bit
0x0100       [0]    _atv_mot
0x0100       [0]    _close_bit4
0x0100       [0]    _open_bit2
0x0100       [0]    _atv_mot3
0x0101       [2]    _comp
0x0103       [2]    _comp2
0x0105       [2]    _comp3
0x0107       [2]    _comp4
0x0109       [0]    _un
0x0109       [0]    _un2
0x0109       [0]    _un3
0x0109       [0]    _b1_flag
0x0109       [0]    _un4
0x0109       [0]    _atv_mot4
0x0109       [0]    _atv_mot2
0x0109       [0]    _ligar
0x010A       [2]    _num4
0x010C       [0]    _b4_flag
0x010C       [0]    _fast_inc
0x010C       [0]    _b2_flag
0x010C       [0]    _b3_flag
0x010C       [0]    _toque
0x010C       [0]    _display
0x010D       [2]    _num2
0x010F       [2]    _num3
0x0111       [2]    _num
0x0113       [2]    _qtd_comp3
0x0115       [2]    _qtd_comp4
0x0117       [2]    _qtd_comp
0x0119       [2]    _qtd_comp2
0x011B       [1]    FARG_EEPROM_Read_address
0x011C       [1]    num_un_dig1_L0
0x011C       [1]    FARG_EEPROM_Write_address
0x011D       [1]    FARG_EEPROM_Write_data_
0x011D       [2]    FLOC__num_un
0x011F       [1]    FARG_Lcd_Out_row
0x011F       [1]    FARG_Lcd_Chr_row
0x0120       [1]    FARG_Lcd_Out_column
0x0120       [1]    FARG_Lcd_Chr_column
0x0121       [2]    FARG_Lcd_Out_text
0x0121       [1]    FARG_Lcd_Chr_out_char
0x0123       [1]    Lcd_Out_i_L0
0x0124       [1]    FARG_Lcd_Chr_CP_out_char
0x0125       [1]    FARG_Lcd_Cmd_out_char
0x0F80       [1]    PORTA
0x0F80       [0]    LED2
0x0F80       [0]    LED
0x0F80       [0]    SOM
0x0F80       [0]    SM3
0x0F80       [0]    SM2
0x0F80       [0]    SM
0x0F81       [1]    PORTB
0x0F81       [0]    LED3
0x0F81       [0]    LED4
0x0F81       [0]    SM4
0x0F81       [0]    LED5
0x0F82       [0]    BOTAO4
0x0F82       [0]    BOTAO5
0x0F82       [0]    BOTAO3
0x0F82       [0]    BOTAO1
0x0F82       [0]    BOTAO2
0x0F82       [1]    PORTC
0x0F83       [0]    LCD_D7
0x0F83       [0]    LCD_RS
0x0F83       [0]    LCD_EN
0x0F83       [1]    PORTD
0x0F83       [0]    LCD_D5
0x0F83       [0]    LCD_D6
0x0F83       [0]    LCD_D4
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [0]    LCD_D7_Direction
0x0F95       [0]    LCD_EN_Direction
0x0F95       [0]    LCD_RS_Direction
0x0F95       [0]    LCD_D6_Direction
0x0F95       [0]    LCD_D4_Direction
0x0F95       [0]    LCD_D5_Direction
0x0F95       [0]    TRISD4_bit
0x0F95       [0]    TRISD3_bit
0x0F95       [0]    TRISD2_bit
0x0F95       [0]    TRISD7_bit
0x0F95       [0]    TRISD6_bit
0x0F95       [0]    TRISD5_bit
0x0F9E       [0]    TMR1IF_bit
0x0FA1       [1]    PIR2
0x0FA6       [1]    EECON1
0x0FA7       [1]    EECON2
0x0FA8       [1]    EEDATA
0x0FA9       [1]    EEADR
0x0FB4       [1]    CMCON
0x0FC1       [1]    ADCON1
0x0FCD       [1]    T1CON
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD5       [1]    T0CON
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF2       [0]    TMR0IF_bit
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x1D86      [17]    ?ICS?lstr1_TCC_5
0x1D97       [4]    ?ICS_dia
0x1D9B      [17]    ?ICS?lstr3_TCC_5
0x1DAC      [17]    ?ICS?lstr2_TCC_5
0x1DBD       [2]    ?ICS_temp_ligado4
0x1DBF       [2]    ?ICS_temp_ligado3
0x1DC1       [4]    ?ICS_hora
0x1DC5      [17]    ?ICS?lstr9_TCC_5
0x1DD6      [14]    ?ICS?lstr8_TCC_5
0x1DE4       [2]    ?ICS_temp_disp
0x1DE6      [17]    ?ICS?lstr10_TCC_5
0x1DF7      [17]    ?ICS?lstr5_TCC_5
0x1E08      [17]    ?ICS?lstr4_TCC_5
0x1E19      [17]    ?ICS?lstr7_TCC_5
0x1E2A      [17]    ?ICS?lstr6_TCC_5
0x1E3B       [2]    ?ICS_temp3
0x1E3D       [2]    ?ICS_temp2
0x1E3F       [2]    ?ICS_temp4
0x1E41       [2]    ?ICS_temp
0x1E43       [2]    ?ICS_temp_ligado2
0x1E45       [2]    ?ICS_temp_ligado
0x1E47       [2]    ?ICS_mult2
0x1E49       [2]    ?ICS_mult
0x1E4B       [2]    ?ICS_mult4
0x1E4D       [2]    ?ICS_mult3
0x1E4F       [2]    ?ICS_temp_led
0x1E51       [2]    ?ICS_x_mot
0x1E53       [2]    ?ICS_temp_led3
0x1E55       [2]    ?ICS_temp_led2
0x1E57       [2]    ?ICS_x_mot3
0x1E59       [2]    ?ICS_x_mot4
0x1E5B       [2]    ?ICS_temp_som
0x1E5D       [2]    ?ICS_vezes
0x1E5F       [2]    ?ICS_x_mot2
0x1E61       [2]    ?ICS_temp_led5
0x1E63       [2]    ?ICS_temp_led4
0x1E65       [2]    ?ICS_option
0x1E67       [2]    ?ICS_prog
0x1E69       [2]    ?ICS_temp_inc
0x1E6B       [2]    ?ICS_temp_num
0x1E6D       [2]    ?ICS_comp
0x1E6F       [2]    ?ICS_comp2
0x1E71       [2]    ?ICS_comp3
0x1E73       [2]    ?ICS_comp4
